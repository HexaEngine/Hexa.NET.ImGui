// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot3D
{
	public unsafe partial class ImPlot3D
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (zLabel != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(zLabel, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			SetupAxesNative(pStr0, pStr1, pStr2, xFlags, yFlags, zFlags);
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (zLabel != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(zLabel, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			SetupAxesNative(pStr0, pStr1, pStr2, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (zLabel != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(zLabel, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			SetupAxesNative(pStr0, pStr1, pStr2, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte* pStr2 = null;
			int pStrSize2 = 0;
			if (zLabel != null)
			{
				pStrSize2 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize2 >= Utils.MaxStackallocSize)
				{
					pStr2 = Utils.Alloc<byte>(pStrSize2 + 1);
				}
				else
				{
					byte* pStrStack2 = stackalloc byte[pStrSize2 + 1];
					pStr2 = pStrStack2;
				}
				int pStrOffset2 = Utils.EncodeStringUTF8(zLabel, pStr2, pStrSize2);
				pStr2[pStrOffset2] = 0;
			}
			SetupAxesNative(pStr0, pStr1, pStr2, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize2 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr2);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, pStr1, xFlags, yFlags, zFlags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, pStr1, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, pStr1, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, pStr1, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (zLabel != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(zLabel);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, pStr0, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, pStr1, xFlags, yFlags, zFlags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, pStr1, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, pStr1, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, pStr1, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative(pStr0, (byte*)pyLabel, pStr1, xFlags, yFlags, zFlags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative(pStr0, (byte*)pyLabel, pStr1, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative(pStr0, (byte*)pyLabel, pStr1, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative(pStr0, (byte*)pyLabel, pStr1, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(pStr0, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative(pStr0, (byte*)pyLabel, pStr1, xFlags, yFlags, zFlags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative(pStr0, (byte*)pyLabel, pStr1, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative(pStr0, (byte*)pyLabel, pStr1, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				byte* pStr1 = null;
				int pStrSize1 = 0;
				if (zLabel != null)
				{
					pStrSize1 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize1 >= Utils.MaxStackallocSize)
					{
						pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
					}
					else
					{
						byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
						pStr1 = pStrStack1;
					}
					int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
					pStr1[pStrOffset1] = 0;
				}
				SetupAxesNative(pStr0, (byte*)pyLabel, pStr1, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(pStr0, pStr1, (byte*)pzLabel, xFlags, yFlags, zFlags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(pStr0, pStr1, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(pStr0, pStr1, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(pStr0, pStr1, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(pStr0, pStr1, (byte*)pzLabel, xFlags, yFlags, zFlags);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(pStr0, pStr1, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(pStr0, pStr1, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(pStr0, pStr1, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr1);
				}
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxesLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxesLimitsNative([NativeName(NativeNameType.Param, "x_min")] [NativeName(NativeNameType.Type, "double")] double xMin, [NativeName(NativeNameType.Param, "x_max")] [NativeName(NativeNameType.Type, "double")] double xMax, [NativeName(NativeNameType.Param, "y_min")] [NativeName(NativeNameType.Type, "double")] double yMin, [NativeName(NativeNameType.Param, "y_max")] [NativeName(NativeNameType.Type, "double")] double yMax, [NativeName(NativeNameType.Param, "z_min")] [NativeName(NativeNameType.Type, "double")] double zMin, [NativeName(NativeNameType.Param, "z_max")] [NativeName(NativeNameType.Type, "double")] double zMax, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, ImPlot3DCond, void>)funcTable[18])(xMin, xMax, yMin, yMax, zMin, zMax, cond);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, ImPlot3DCond, void>)funcTable[18])(xMin, xMax, yMin, yMax, zMin, zMax, cond);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxesLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxesLimits([NativeName(NativeNameType.Param, "x_min")] [NativeName(NativeNameType.Type, "double")] double xMin, [NativeName(NativeNameType.Param, "x_max")] [NativeName(NativeNameType.Type, "double")] double xMax, [NativeName(NativeNameType.Param, "y_min")] [NativeName(NativeNameType.Type, "double")] double yMin, [NativeName(NativeNameType.Param, "y_max")] [NativeName(NativeNameType.Type, "double")] double yMax, [NativeName(NativeNameType.Param, "z_min")] [NativeName(NativeNameType.Type, "double")] double zMin, [NativeName(NativeNameType.Param, "z_max")] [NativeName(NativeNameType.Type, "double")] double zMax, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			SetupAxesLimitsNative(xMin, xMax, yMin, yMax, zMin, zMax, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxesLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxesLimits([NativeName(NativeNameType.Param, "x_min")] [NativeName(NativeNameType.Type, "double")] double xMin, [NativeName(NativeNameType.Param, "x_max")] [NativeName(NativeNameType.Type, "double")] double xMax, [NativeName(NativeNameType.Param, "y_min")] [NativeName(NativeNameType.Type, "double")] double yMin, [NativeName(NativeNameType.Param, "y_max")] [NativeName(NativeNameType.Type, "double")] double yMax, [NativeName(NativeNameType.Param, "z_min")] [NativeName(NativeNameType.Type, "double")] double zMin, [NativeName(NativeNameType.Param, "z_max")] [NativeName(NativeNameType.Type, "double")] double zMax)
		{
			SetupAxesLimitsNative(xMin, xMax, yMin, yMax, zMin, zMax, (ImPlot3DCond)(ImPlot3DCond.Once));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupBoxRotationNative([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth, [NativeName(NativeNameType.Param, "animate")] [NativeName(NativeNameType.Type, "bool")] byte animate, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, byte, ImPlot3DCond, void>)funcTable[19])(elevation, azimuth, animate, cond);
			#else
			((delegate* unmanaged[Cdecl]<float, float, byte, ImPlot3DCond, void>)funcTable[19])(elevation, azimuth, animate, cond);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxRotation([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth, [NativeName(NativeNameType.Param, "animate")] [NativeName(NativeNameType.Type, "bool")] bool animate, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			SetupBoxRotationNative(elevation, azimuth, animate ? (byte)1 : (byte)0, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxRotation([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth, [NativeName(NativeNameType.Param, "animate")] [NativeName(NativeNameType.Type, "bool")] bool animate)
		{
			SetupBoxRotationNative(elevation, azimuth, animate ? (byte)1 : (byte)0, (ImPlot3DCond)(ImPlot3DCond.Once));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxRotation([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			SetupBoxRotationNative(elevation, azimuth, (byte)(0), (ImPlot3DCond)(ImPlot3DCond.Once));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxRotation([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			SetupBoxRotationNative(elevation, azimuth, (byte)(0), cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Plot3DQuat")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupBoxRotationNative([NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "ImPlot3DQuat")] ImPlot3DQuat rotation, [NativeName(NativeNameType.Param, "animate")] [NativeName(NativeNameType.Type, "bool")] byte animate, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat, byte, ImPlot3DCond, void>)funcTable[20])(rotation, animate, cond);
			#else
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat, byte, ImPlot3DCond, void>)funcTable[20])(rotation, animate, cond);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Plot3DQuat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxRotation([NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "ImPlot3DQuat")] ImPlot3DQuat rotation, [NativeName(NativeNameType.Param, "animate")] [NativeName(NativeNameType.Type, "bool")] bool animate, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			SetupBoxRotationNative(rotation, animate ? (byte)1 : (byte)0, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Plot3DQuat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxRotation([NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "ImPlot3DQuat")] ImPlot3DQuat rotation, [NativeName(NativeNameType.Param, "animate")] [NativeName(NativeNameType.Type, "bool")] bool animate)
		{
			SetupBoxRotationNative(rotation, animate ? (byte)1 : (byte)0, (ImPlot3DCond)(ImPlot3DCond.Once));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Plot3DQuat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxRotation([NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "ImPlot3DQuat")] ImPlot3DQuat rotation)
		{
			SetupBoxRotationNative(rotation, (byte)(0), (ImPlot3DCond)(ImPlot3DCond.Once));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxRotation_Plot3DQuat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxRotation([NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "ImPlot3DQuat")] ImPlot3DQuat rotation, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			SetupBoxRotationNative(rotation, (byte)(0), cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxInitialRotation_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupBoxInitialRotationNative([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[21])(elevation, azimuth);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[21])(elevation, azimuth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxInitialRotation_Float")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxInitialRotation([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			SetupBoxInitialRotationNative(elevation, azimuth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxInitialRotation_Plot3DQuat")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupBoxInitialRotationNative([NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "ImPlot3DQuat")] ImPlot3DQuat rotation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat, void>)funcTable[22])(rotation);
			#else
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat, void>)funcTable[22])(rotation);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxInitialRotation_Plot3DQuat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxInitialRotation([NativeName(NativeNameType.Param, "rotation")] [NativeName(NativeNameType.Type, "ImPlot3DQuat")] ImPlot3DQuat rotation)
		{
			SetupBoxInitialRotationNative(rotation);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupBoxScaleNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[23])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[23])(x, y, z);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupBoxScale")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupBoxScale([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			SetupBoxScaleNative(x, y, z);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupLegend")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupLegendNative([NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "ImPlot3DLocation")] ImPlot3DLocation location, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DLegendFlags")] ImPlot3DLegendFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DLocation, ImPlot3DLegendFlags, void>)funcTable[24])(location, flags);
			#else
			((delegate* unmanaged[Cdecl]<ImPlot3DLocation, ImPlot3DLegendFlags, void>)funcTable[24])(location, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupLegend")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupLegend([NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "ImPlot3DLocation")] ImPlot3DLocation location, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DLegendFlags")] ImPlot3DLegendFlags flags)
		{
			SetupLegendNative(location, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupLegend")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupLegend([NativeName(NativeNameType.Param, "location")] [NativeName(NativeNameType.Type, "ImPlot3DLocation")] ImPlot3DLocation location)
		{
			SetupLegendNative(location, (ImPlot3DLegendFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PlotScatterNative([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, float*, float*, float*, int, ImPlot3DScatterFlags, int, int, void>)funcTable[25])(labelId, xs, ys, zs, count, flags, offset, stride);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, int, ImPlot3DScatterFlags, int, int, void>)funcTable[25])((nint)labelId, (nint)xs, (nint)ys, (nint)zs, count, flags, offset, stride);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			PlotScatterNative(labelId, xs, ys, zs, count, flags, offset, stride);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			PlotScatterNative(labelId, xs, ys, zs, count, flags, offset, (int)(sizeof(float)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags)
		{
			PlotScatterNative(labelId, xs, ys, zs, count, flags, (int)(0), (int)(sizeof(float)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			PlotScatterNative(labelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), (int)(0), (int)(sizeof(float)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			PlotScatterNative(labelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, (int)(sizeof(float)));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			PlotScatterNative(labelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, stride);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, flags, offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, flags, offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, flags, (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, flags, offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, flags, offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, flags, (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				PlotScatterNative((byte*)plabelId, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotScatterNative(pStr0, xs, ys, zs, count, flags, offset, stride);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotScatterNative(pStr0, xs, ys, zs, count, flags, offset, (int)(sizeof(float)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotScatterNative(pStr0, xs, ys, zs, count, flags, (int)(0), (int)(sizeof(float)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotScatterNative(pStr0, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), (int)(0), (int)(sizeof(float)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotScatterNative(pStr0, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, (int)(sizeof(float)));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] float* xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PlotScatterNative(pStr0, xs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, stride);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(labelId, (float*)pxs, ys, zs, count, flags, offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(labelId, (float*)pxs, ys, zs, count, flags, offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags)
		{
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(labelId, (float*)pxs, ys, zs, count, flags, (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(labelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), (int)(0), (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(labelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, (int)(sizeof(float)));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] byte* labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(labelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, stride);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, flags, offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, flags, offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, flags, (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* plabelId = &labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, flags, offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, flags, offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, flags, (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), (int)(0), (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, (int)(sizeof(float)));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			fixed (byte* plabelId = labelId)
			{
				fixed (float* pxs = &xs)
				{
					PlotScatterNative((byte*)plabelId, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, stride);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(pStr0, (float*)pxs, ys, zs, count, flags, offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(pStr0, (float*)pxs, ys, zs, count, flags, offset, (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DScatterFlags")] ImPlot3DScatterFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(pStr0, (float*)pxs, ys, zs, count, flags, (int)(0), (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(pStr0, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), (int)(0), (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(pStr0, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, (int)(sizeof(float)));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_PlotScatter_FloatPtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void PlotScatter([NativeName(NativeNameType.Param, "label_id")] [NativeName(NativeNameType.Type, "const char*")] string labelId, [NativeName(NativeNameType.Param, "xs")] [NativeName(NativeNameType.Type, "const float*")] ref float xs, [NativeName(NativeNameType.Param, "ys")] [NativeName(NativeNameType.Type, "const float*")] float* ys, [NativeName(NativeNameType.Param, "zs")] [NativeName(NativeNameType.Type, "const float*")] float* zs, [NativeName(NativeNameType.Param, "count")] [NativeName(NativeNameType.Type, "int")] int count, [NativeName(NativeNameType.Param, "offset")] [NativeName(NativeNameType.Type, "int")] int offset, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "int")] int stride)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (labelId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(labelId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(labelId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (float* pxs = &xs)
			{
				PlotScatterNative(pStr0, (float*)pxs, ys, zs, count, (ImPlot3DScatterFlags)(0), offset, stride);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}
	}
}
