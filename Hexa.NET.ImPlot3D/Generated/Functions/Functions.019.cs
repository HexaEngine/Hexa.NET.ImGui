// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot3D
{
	public unsafe partial class ImPlot3D
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_ImPlot3DPoint_Float")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DPoint*")]
		public static ImPlot3DPointPtr ImPlot3DPoint([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "_z")] [NativeName(NativeNameType.Type, "float")] float z)
		{
			ImPlot3DPointPtr ret = ImPlot3DPointNative(x, y, z);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Dot")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float DotNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DPoint*, ImPlot3DPoint, float>)funcTable[125])(self, rhs);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, ImPlot3DPoint, float>)funcTable[125])((nint)self, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Dot")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Dot([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			float ret = DotNative(self, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Dot")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Dot([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				float ret = DotNative((ImPlot3DPoint*)pself, rhs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Cross")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CrossNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DPoint*, ImPlot3DPoint*, ImPlot3DPoint, void>)funcTable[126])(pOut, self, rhs);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImPlot3DPoint, void>)funcTable[126])((nint)pOut, (nint)self, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Cross")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DPoint Cross([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			ImPlot3DPoint ret;
			CrossNative(&ret, self, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Cross")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Cross([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			CrossNative(pOut, self, rhs);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Cross")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Cross([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			fixed (ImPlot3DPoint* ppOut = &pOut)
			{
				CrossNative((ImPlot3DPoint*)ppOut, self, rhs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Cross")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DPoint Cross([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				ImPlot3DPoint ret;
				CrossNative(&ret, (ImPlot3DPoint*)pself, rhs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Cross")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Cross([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				CrossNative(pOut, (ImPlot3DPoint*)pself, rhs);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Cross")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Cross([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint rhs)
		{
			fixed (ImPlot3DPoint* ppOut = &pOut)
			{
				fixed (ImPlot3DPoint* pself = &self)
				{
					CrossNative((ImPlot3DPoint*)ppOut, (ImPlot3DPoint*)pself, rhs);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Length")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float LengthNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DPoint*, float>)funcTable[127])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[127])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Length")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Length([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self)
		{
			float ret = LengthNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Length")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Length([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				float ret = LengthNative((ImPlot3DPoint*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_LengthSquared")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float LengthSquaredNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DPoint*, float>)funcTable[128])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[128])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_LengthSquared")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float LengthSquared([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self)
		{
			float ret = LengthSquaredNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_LengthSquared")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float LengthSquared([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				float ret = LengthSquaredNative((ImPlot3DPoint*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalize")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NormalizeNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DPoint*, void>)funcTable[129])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[129])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalize([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self)
		{
			NormalizeNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalize")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalize([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				NormalizeNative((ImPlot3DPoint*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NormalizedNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DPoint*, ImPlot3DPoint*, void>)funcTable[130])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[130])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DPoint Normalized([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self)
		{
			ImPlot3DPoint ret;
			NormalizedNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalized([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self)
		{
			NormalizedNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalized([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self)
		{
			fixed (ImPlot3DPoint* ppOut = &pOut)
			{
				NormalizedNative((ImPlot3DPoint*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DPoint Normalized([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				ImPlot3DPoint ret;
				NormalizedNative(&ret, (ImPlot3DPoint*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalized([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				NormalizedNative(pOut, (ImPlot3DPoint*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalized([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self)
		{
			fixed (ImPlot3DPoint* ppOut = &pOut)
			{
				fixed (ImPlot3DPoint* pself = &self)
				{
					NormalizedNative((ImPlot3DPoint*)ppOut, (ImPlot3DPoint*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_IsNaN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsNaNNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DPoint*, byte>)funcTable[131])(self);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[131])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_IsNaN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsNaN([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr self)
		{
			byte ret = IsNaNNative(self);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DPoint_IsNaN")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool IsNaN([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint self)
		{
			fixed (ImPlot3DPoint* pself = &self)
			{
				byte ret = IsNaNNative((ImPlot3DPoint*)pself);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ImPlot3DBox_Nil")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DBox*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DBox* ImPlot3DBoxNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DBox*>)funcTable[132])();
			#else
			return (ImPlot3DBox*)((delegate* unmanaged[Cdecl]<nint>)funcTable[132])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ImPlot3DBox_Nil")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DBox*")]
		public static ImPlot3DBoxPtr ImPlot3DBox()
		{
			ImPlot3DBoxPtr ret = ImPlot3DBoxNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBox* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DBox*, void>)funcTable[133])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[133])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBoxPtr self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ref ImPlot3DBox self)
		{
			fixed (ImPlot3DBox* pself = &self)
			{
				DestroyNative((ImPlot3DBox*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ImPlot3DBox_Plot3DPoInt")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DBox*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DBox* ImPlot3DBoxNative([NativeName(NativeNameType.Param, "min")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint min, [NativeName(NativeNameType.Param, "max")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DPoint, ImPlot3DPoint, ImPlot3DBox*>)funcTable[134])(min, max);
			#else
			return (ImPlot3DBox*)((delegate* unmanaged[Cdecl]<ImPlot3DPoint, ImPlot3DPoint, nint>)funcTable[134])(min, max);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ImPlot3DBox_Plot3DPoInt")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DBox*")]
		public static ImPlot3DBoxPtr ImPlot3DBox([NativeName(NativeNameType.Param, "min")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint min, [NativeName(NativeNameType.Param, "max")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint max)
		{
			ImPlot3DBoxPtr ret = ImPlot3DBoxNative(min, max);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ExpandNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBox* self, [NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DBox*, ImPlot3DPoint, void>)funcTable[135])(self, point);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlot3DPoint, void>)funcTable[135])((nint)self, point);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Expand([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBoxPtr self, [NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			ExpandNative(self, point);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Expand([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ref ImPlot3DBox self, [NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			fixed (ImPlot3DBox* pself = &self)
			{
				ExpandNative((ImPlot3DBox*)pself, point);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ContainsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBox* self, [NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DBox*, ImPlot3DPoint, byte>)funcTable[136])(self, point);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImPlot3DPoint, byte>)funcTable[136])((nint)self, point);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Contains([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBoxPtr self, [NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			byte ret = ContainsNative(self, point);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Contains([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ref ImPlot3DBox self, [NativeName(NativeNameType.Param, "point")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint point)
		{
			fixed (ImPlot3DBox* pself = &self)
			{
				byte ret = ContainsNative((ImPlot3DBox*)pself, point);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ClipLineSegmentNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBox* self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPoint* p1Clipped)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DBox*, ImPlot3DPoint, ImPlot3DPoint, ImPlot3DPoint*, ImPlot3DPoint*, byte>)funcTable[137])(self, p0, p1, p0Clipped, p1Clipped);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, ImPlot3DPoint, ImPlot3DPoint, nint, nint, byte>)funcTable[137])((nint)self, p0, p1, (nint)p0Clipped, (nint)p1Clipped);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ClipLineSegment([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBoxPtr self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p1Clipped)
		{
			byte ret = ClipLineSegmentNative(self, p0, p1, p0Clipped, p1Clipped);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ClipLineSegment([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ref ImPlot3DBox self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p1Clipped)
		{
			fixed (ImPlot3DBox* pself = &self)
			{
				byte ret = ClipLineSegmentNative((ImPlot3DBox*)pself, p0, p1, p0Clipped, p1Clipped);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ClipLineSegment([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBoxPtr self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p1Clipped)
		{
			fixed (ImPlot3DPoint* pp0Clipped = &p0Clipped)
			{
				byte ret = ClipLineSegmentNative(self, p0, p1, (ImPlot3DPoint*)pp0Clipped, p1Clipped);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ClipLineSegment([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ref ImPlot3DBox self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p1Clipped)
		{
			fixed (ImPlot3DBox* pself = &self)
			{
				fixed (ImPlot3DPoint* pp0Clipped = &p0Clipped)
				{
					byte ret = ClipLineSegmentNative((ImPlot3DBox*)pself, p0, p1, (ImPlot3DPoint*)pp0Clipped, p1Clipped);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ClipLineSegment([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBoxPtr self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p1Clipped)
		{
			fixed (ImPlot3DPoint* pp1Clipped = &p1Clipped)
			{
				byte ret = ClipLineSegmentNative(self, p0, p1, p0Clipped, (ImPlot3DPoint*)pp1Clipped);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ClipLineSegment([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ref ImPlot3DBox self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ImPlot3DPointPtr p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p1Clipped)
		{
			fixed (ImPlot3DBox* pself = &self)
			{
				fixed (ImPlot3DPoint* pp1Clipped = &p1Clipped)
				{
					byte ret = ClipLineSegmentNative((ImPlot3DBox*)pself, p0, p1, p0Clipped, (ImPlot3DPoint*)pp1Clipped);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ClipLineSegment([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ImPlot3DBoxPtr self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p1Clipped)
		{
			fixed (ImPlot3DPoint* pp0Clipped = &p0Clipped)
			{
				fixed (ImPlot3DPoint* pp1Clipped = &p1Clipped)
				{
					byte ret = ClipLineSegmentNative(self, p0, p1, (ImPlot3DPoint*)pp0Clipped, (ImPlot3DPoint*)pp1Clipped);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DBox_ClipLineSegment")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool ClipLineSegment([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DBox*")] ref ImPlot3DBox self, [NativeName(NativeNameType.Param, "p0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p0, [NativeName(NativeNameType.Param, "p1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint p1, [NativeName(NativeNameType.Param, "p0_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p0Clipped, [NativeName(NativeNameType.Param, "p1_clipped")] [NativeName(NativeNameType.Type, "ImPlot3DPoint*")] ref ImPlot3DPoint p1Clipped)
		{
			fixed (ImPlot3DBox* pself = &self)
			{
				fixed (ImPlot3DPoint* pp0Clipped = &p0Clipped)
				{
					fixed (ImPlot3DPoint* pp1Clipped = &p1Clipped)
					{
						byte ret = ClipLineSegmentNative((ImPlot3DBox*)pself, p0, p1, (ImPlot3DPoint*)pp0Clipped, (ImPlot3DPoint*)pp1Clipped);
						return ret != 0;
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_ImPlot3DRange_Nil")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DRange*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DRange* ImPlot3DRangeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DRange*>)funcTable[138])();
			#else
			return (ImPlot3DRange*)((delegate* unmanaged[Cdecl]<nint>)funcTable[138])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_ImPlot3DRange_Nil")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DRange*")]
		public static ImPlot3DRangePtr ImPlot3DRange()
		{
			ImPlot3DRangePtr ret = ImPlot3DRangeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ImPlot3DRange* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DRange*, void>)funcTable[139])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[139])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ImPlot3DRangePtr self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ref ImPlot3DRange self)
		{
			fixed (ImPlot3DRange* pself = &self)
			{
				DestroyNative((ImPlot3DRange*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_ImPlot3DRange_Float")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DRange*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DRange* ImPlot3DRangeNative([NativeName(NativeNameType.Param, "min")] [NativeName(NativeNameType.Type, "float")] float min, [NativeName(NativeNameType.Param, "max")] [NativeName(NativeNameType.Type, "float")] float max)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, ImPlot3DRange*>)funcTable[140])(min, max);
			#else
			return (ImPlot3DRange*)((delegate* unmanaged[Cdecl]<float, float, nint>)funcTable[140])(min, max);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_ImPlot3DRange_Float")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DRange*")]
		public static ImPlot3DRangePtr ImPlot3DRange([NativeName(NativeNameType.Param, "min")] [NativeName(NativeNameType.Type, "float")] float min, [NativeName(NativeNameType.Param, "max")] [NativeName(NativeNameType.Type, "float")] float max)
		{
			ImPlot3DRangePtr ret = ImPlot3DRangeNative(min, max);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ExpandNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ImPlot3DRange* self, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DRange*, float, void>)funcTable[141])(self, value);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, void>)funcTable[141])((nint)self, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Expand([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ImPlot3DRangePtr self, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			ExpandNative(self, value);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Expand")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Expand([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ref ImPlot3DRange self, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			fixed (ImPlot3DRange* pself = &self)
			{
				ExpandNative((ImPlot3DRange*)pself, value);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ContainsNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ImPlot3DRange* self, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DRange*, float, byte>)funcTable[142])(self, value);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, float, byte>)funcTable[142])((nint)self, value);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Contains([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ImPlot3DRangePtr self, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			byte ret = ContainsNative(self, value);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Contains")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool Contains([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ref ImPlot3DRange self, [NativeName(NativeNameType.Param, "value")] [NativeName(NativeNameType.Type, "float")] float value)
		{
			fixed (ImPlot3DRange* pself = &self)
			{
				byte ret = ContainsNative((ImPlot3DRange*)pself, value);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Size")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float SizeNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ImPlot3DRange* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DRange*, float>)funcTable[143])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[143])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Size")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Size([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ImPlot3DRangePtr self)
		{
			float ret = SizeNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DRange_Size")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Size([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DRange*")] ref ImPlot3DRange self)
		{
			fixed (ImPlot3DRange* pself = &self)
			{
				float ret = SizeNative((ImPlot3DRange*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_ImPlot3DQuat_Nil")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DQuat* ImPlot3DQuatNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DQuat*>)funcTable[144])();
			#else
			return (ImPlot3DQuat*)((delegate* unmanaged[Cdecl]<nint>)funcTable[144])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_ImPlot3DQuat_Nil")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		public static ImPlot3DQuatPtr ImPlot3DQuat()
		{
			ImPlot3DQuatPtr ret = ImPlot3DQuatNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, void>)funcTable[145])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[145])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				DestroyNative((ImPlot3DQuat*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_ImPlot3DQuat_FloatFloat")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DQuat* ImPlot3DQuatNative([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "_z")] [NativeName(NativeNameType.Type, "float")] float z, [NativeName(NativeNameType.Param, "_w")] [NativeName(NativeNameType.Type, "float")] float w)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, float, float, float, ImPlot3DQuat*>)funcTable[146])(x, y, z, w);
			#else
			return (ImPlot3DQuat*)((delegate* unmanaged[Cdecl]<float, float, float, float, nint>)funcTable[146])(x, y, z, w);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_ImPlot3DQuat_FloatFloat")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		public static ImPlot3DQuatPtr ImPlot3DQuat([NativeName(NativeNameType.Param, "_x")] [NativeName(NativeNameType.Type, "float")] float x, [NativeName(NativeNameType.Param, "_y")] [NativeName(NativeNameType.Type, "float")] float y, [NativeName(NativeNameType.Param, "_z")] [NativeName(NativeNameType.Type, "float")] float z, [NativeName(NativeNameType.Param, "_w")] [NativeName(NativeNameType.Type, "float")] float w)
		{
			ImPlot3DQuatPtr ret = ImPlot3DQuatNative(x, y, z, w);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_ImPlot3DQuat_FloatPlot3DPoInt")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DQuat* ImPlot3DQuatNative([NativeName(NativeNameType.Param, "_angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "_axis")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint axis)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<float, ImPlot3DPoint, ImPlot3DQuat*>)funcTable[147])(angle, axis);
			#else
			return (ImPlot3DQuat*)((delegate* unmanaged[Cdecl]<float, ImPlot3DPoint, nint>)funcTable[147])(angle, axis);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_ImPlot3DQuat_FloatPlot3DPoInt")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		public static ImPlot3DQuatPtr ImPlot3DQuat([NativeName(NativeNameType.Param, "_angle")] [NativeName(NativeNameType.Type, "float")] float angle, [NativeName(NativeNameType.Param, "_axis")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint axis)
		{
			ImPlot3DQuatPtr ret = ImPlot3DQuatNative(angle, axis);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromTwoVectors")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FromTwoVectorsNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* pOut, [NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v0, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, ImPlot3DPoint, ImPlot3DPoint, void>)funcTable[148])(pOut, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlot3DPoint, ImPlot3DPoint, void>)funcTable[148])((nint)pOut, v0, v1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromTwoVectors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat FromTwoVectors([NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v0, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v1)
		{
			ImPlot3DQuat ret;
			FromTwoVectorsNative(&ret, v0, v1);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromTwoVectors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FromTwoVectors([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v0, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v1)
		{
			FromTwoVectorsNative(pOut, v0, v1);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromTwoVectors")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FromTwoVectors([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "v0")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v0, [NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const ImPlot3DPoint")] ImPlot3DPoint v1)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				FromTwoVectorsNative((ImPlot3DQuat*)ppOut, v0, v1);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromElAz")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FromElAzNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* pOut, [NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, float, float, void>)funcTable[149])(pOut, elevation, azimuth);
			#else
			((delegate* unmanaged[Cdecl]<nint, float, float, void>)funcTable[149])((nint)pOut, elevation, azimuth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromElAz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat FromElAz([NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			ImPlot3DQuat ret;
			FromElAzNative(&ret, elevation, azimuth);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromElAz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FromElAz([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			FromElAzNative(pOut, elevation, azimuth);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_FromElAz")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void FromElAz([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "elevation")] [NativeName(NativeNameType.Type, "float")] float elevation, [NativeName(NativeNameType.Param, "azimuth")] [NativeName(NativeNameType.Type, "float")] float azimuth)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				FromElAzNative((ImPlot3DQuat*)ppOut, elevation, azimuth);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Length")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float LengthNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, float>)funcTable[150])(self);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, float>)funcTable[150])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Length")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Length([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			float ret = LengthNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Length")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Length([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				float ret = LengthNative((ImPlot3DQuat*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NormalizedNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, ImPlot3DQuat*, void>)funcTable[151])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[151])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat Normalized([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			ImPlot3DQuat ret;
			NormalizedNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalized([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			NormalizedNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalized([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				NormalizedNative((ImPlot3DQuat*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat Normalized([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				ImPlot3DQuat ret;
				NormalizedNative(&ret, (ImPlot3DQuat*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalized([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				NormalizedNative(pOut, (ImPlot3DQuat*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalized")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Normalized([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				fixed (ImPlot3DQuat* pself = &self)
				{
					NormalizedNative((ImPlot3DQuat*)ppOut, (ImPlot3DQuat*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConjugateNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, ImPlot3DQuat*, void>)funcTable[152])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[152])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat Conjugate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			ImPlot3DQuat ret;
			ConjugateNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Conjugate([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			ConjugateNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Conjugate([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				ConjugateNative((ImPlot3DQuat*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat Conjugate([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				ImPlot3DQuat ret;
				ConjugateNative(&ret, (ImPlot3DQuat*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Conjugate([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				ConjugateNative(pOut, (ImPlot3DQuat*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Conjugate")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Conjugate([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				fixed (ImPlot3DQuat* pself = &self)
				{
					ConjugateNative((ImPlot3DQuat*)ppOut, (ImPlot3DQuat*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InverseNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, ImPlot3DQuat*, void>)funcTable[153])(pOut, self);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[153])((nint)pOut, (nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat Inverse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			ImPlot3DQuat ret;
			InverseNative(&ret, self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Inverse([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			InverseNative(pOut, self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Inverse([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				InverseNative((ImPlot3DQuat*)ppOut, self);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat Inverse([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				ImPlot3DQuat ret;
				InverseNative(&ret, (ImPlot3DQuat*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Inverse([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				InverseNative(pOut, (ImPlot3DQuat*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Inverse")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Inverse([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				fixed (ImPlot3DQuat* pself = &self)
				{
					InverseNative((ImPlot3DQuat*)ppOut, (ImPlot3DQuat*)pself);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalize")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DQuat* NormalizeNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, ImPlot3DQuat*>)funcTable[154])(self);
			#else
			return (ImPlot3DQuat*)((delegate* unmanaged[Cdecl]<nint, nint>)funcTable[154])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalize")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		public static ImPlot3DQuatPtr Normalize([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self)
		{
			ImPlot3DQuatPtr ret = NormalizeNative(self);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Normalize")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DQuat*")]
		public static ImPlot3DQuatPtr Normalize([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				ImPlot3DQuatPtr ret = NormalizeNative((ImPlot3DQuat*)pself);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Slerp")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SlerpNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* pOut, [NativeName(NativeNameType.Param, "q1")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q1, [NativeName(NativeNameType.Param, "q2")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q2, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, ImPlot3DQuat, ImPlot3DQuat, float, void>)funcTable[155])(pOut, q1, q2, t);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlot3DQuat, ImPlot3DQuat, float, void>)funcTable[155])((nint)pOut, q1, q2, t);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Slerp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static ImPlot3DQuat Slerp([NativeName(NativeNameType.Param, "q1")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q1, [NativeName(NativeNameType.Param, "q2")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q2, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			ImPlot3DQuat ret;
			SlerpNative(&ret, q1, q2, t);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Slerp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Slerp([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr pOut, [NativeName(NativeNameType.Param, "q1")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q1, [NativeName(NativeNameType.Param, "q2")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q2, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			SlerpNative(pOut, q1, q2, t);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Slerp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Slerp([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat pOut, [NativeName(NativeNameType.Param, "q1")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q1, [NativeName(NativeNameType.Param, "q2")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat q2, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "float")] float t)
		{
			fixed (ImPlot3DQuat* ppOut = &pOut)
			{
				SlerpNative((ImPlot3DQuat*)ppOut, q1, q2, t);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Dot")]
		[return: NativeName(NativeNameType.Type, "float")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static float DotNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuat* self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat rhs)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DQuat*, ImPlot3DQuat, float>)funcTable[156])(self, rhs);
			#else
			return (float)((delegate* unmanaged[Cdecl]<nint, ImPlot3DQuat, float>)funcTable[156])((nint)self, rhs);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Dot")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Dot([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ImPlot3DQuatPtr self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat rhs)
		{
			float ret = DotNative(self, rhs);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DQuat_Dot")]
		[return: NativeName(NativeNameType.Type, "float")]
		public static float Dot([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DQuat*")] ref ImPlot3DQuat self, [NativeName(NativeNameType.Param, "rhs")] [NativeName(NativeNameType.Type, "const ImPlot3DQuat")] ImPlot3DQuat rhs)
		{
			fixed (ImPlot3DQuat* pself = &self)
			{
				float ret = DotNative((ImPlot3DQuat*)pself, rhs);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_GetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetColorNative([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] Vector4* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ImPlot3DStyle* self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Vector4*, ImPlot3DStyle*, ImPlot3DCol, void>)funcTable[157])(pOut, self, idx);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImPlot3DCol, void>)funcTable[157])((nint)pOut, (nint)self, idx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_GetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector4 GetColor([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ImPlot3DStylePtr self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx)
		{
			Vector4 ret;
			GetColorNative(&ret, self, idx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_GetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetColor([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] Vector4* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ImPlot3DStylePtr self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx)
		{
			GetColorNative(pOut, self, idx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_GetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetColor([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] ref Vector4 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ImPlot3DStylePtr self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				GetColorNative((Vector4*)ppOut, self, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_GetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static Vector4 GetColor([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ref ImPlot3DStyle self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx)
		{
			fixed (ImPlot3DStyle* pself = &self)
			{
				Vector4 ret;
				GetColorNative(&ret, (ImPlot3DStyle*)pself, idx);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_GetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetColor([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] Vector4* pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ref ImPlot3DStyle self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx)
		{
			fixed (ImPlot3DStyle* pself = &self)
			{
				GetColorNative(pOut, (ImPlot3DStyle*)pself, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_GetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void GetColor([NativeName(NativeNameType.Param, "pOut")] [NativeName(NativeNameType.Type, "ImVec4*")] ref Vector4 pOut, [NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ref ImPlot3DStyle self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx)
		{
			fixed (Vector4* ppOut = &pOut)
			{
				fixed (ImPlot3DStyle* pself = &self)
				{
					GetColorNative((Vector4*)ppOut, (ImPlot3DStyle*)pself, idx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_SetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetColorNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ImPlot3DStyle* self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DStyle*, ImPlot3DCol, Vector4, void>)funcTable[158])(self, idx, col);
			#else
			((delegate* unmanaged[Cdecl]<nint, ImPlot3DCol, Vector4, void>)funcTable[158])((nint)self, idx, col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_SetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetColor([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ImPlot3DStylePtr self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col)
		{
			SetColorNative(self, idx, col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_SetColor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetColor([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ref ImPlot3DStyle self, [NativeName(NativeNameType.Param, "idx")] [NativeName(NativeNameType.Type, "ImPlot3DCol")] ImPlot3DCol idx, [NativeName(NativeNameType.Param, "col")] [NativeName(NativeNameType.Type, "const ImVec4")] Vector4 col)
		{
			fixed (ImPlot3DStyle* pself = &self)
			{
				SetColorNative((ImPlot3DStyle*)pself, idx, col);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_ImPlot3DStyle_Nil")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DStyle*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DStyle* ImPlot3DStyleNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DStyle*>)funcTable[159])();
			#else
			return (ImPlot3DStyle*)((delegate* unmanaged[Cdecl]<nint>)funcTable[159])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_ImPlot3DStyle_Nil")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DStyle*")]
		public static ImPlot3DStylePtr ImPlot3DStyle()
		{
			ImPlot3DStylePtr ret = ImPlot3DStyleNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyNative([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ImPlot3DStyle* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DStyle*, void>)funcTable[160])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[160])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ImPlot3DStylePtr self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_destroy")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Destroy([NativeName(NativeNameType.Param, "self")] [NativeName(NativeNameType.Type, "ImPlot3DStyle*")] ref ImPlot3DStyle self)
		{
			fixed (ImPlot3DStyle* pself = &self)
			{
				DestroyNative((ImPlot3DStyle*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_ImPlot3DStyle_Plot3DStyle")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DStyle*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DStyle* ImPlot3DStyleNative([NativeName(NativeNameType.Param, "other")] [NativeName(NativeNameType.Type, "const ImPlot3DStyle")] ImPlot3DStyle other)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DStyle, ImPlot3DStyle*>)funcTable[161])(other);
			#else
			return (ImPlot3DStyle*)((delegate* unmanaged[Cdecl]<ImPlot3DStyle, nint>)funcTable[161])(other);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3DStyle_ImPlot3DStyle_Plot3DStyle")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DStyle*")]
		public static ImPlot3DStylePtr ImPlot3DStyle([NativeName(NativeNameType.Param, "other")] [NativeName(NativeNameType.Type, "const ImPlot3DStyle")] ImPlot3DStyle other)
		{
			ImPlot3DStylePtr ret = ImPlot3DStyleNative(other);
			return ret;
		}

	}
}
