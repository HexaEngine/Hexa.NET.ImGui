// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.ImGui;

namespace Hexa.NET.ImPlot3D
{
	public unsafe partial class ImPlot3D
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_CreateContext")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DContext*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DContext* CreateContextNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DContext*>)funcTable[4])();
			#else
			return (ImPlot3DContext*)((delegate* unmanaged[Cdecl]<nint>)funcTable[4])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_CreateContext")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DContext*")]
		public static ImPlot3DContextPtr CreateContext()
		{
			ImPlot3DContextPtr ret = CreateContextNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_DestroyContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyContextNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImPlot3DContext*")] ImPlot3DContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DContext*, void>)funcTable[5])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[5])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_DestroyContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyContext([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImPlot3DContext*")] ImPlot3DContextPtr ctx)
		{
			DestroyContextNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_DestroyContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyContext()
		{
			DestroyContextNative((ImPlot3DContext*)(default));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_DestroyContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void DestroyContext([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImPlot3DContext*")] ref ImPlot3DContext ctx)
		{
			fixed (ImPlot3DContext* pctx = &ctx)
			{
				DestroyContextNative((ImPlot3DContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_GetCurrentContext")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DContext*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImPlot3DContext* GetCurrentContextNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImPlot3DContext*>)funcTable[6])();
			#else
			return (ImPlot3DContext*)((delegate* unmanaged[Cdecl]<nint>)funcTable[6])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_GetCurrentContext")]
		[return: NativeName(NativeNameType.Type, "ImPlot3DContext*")]
		public static ImPlot3DContextPtr GetCurrentContext()
		{
			ImPlot3DContextPtr ret = GetCurrentContextNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetCurrentContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetCurrentContextNative([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImPlot3DContext*")] ImPlot3DContext* ctx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImPlot3DContext*, void>)funcTable[7])(ctx);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[7])((nint)ctx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetCurrentContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentContext([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImPlot3DContext*")] ImPlot3DContextPtr ctx)
		{
			SetCurrentContextNative(ctx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetCurrentContext")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetCurrentContext([NativeName(NativeNameType.Param, "ctx")] [NativeName(NativeNameType.Type, "ImPlot3DContext*")] ref ImPlot3DContext ctx)
		{
			fixed (ImPlot3DContext* pctx = &ctx)
			{
				SetCurrentContextNative((ImPlot3DContext*)pctx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte BeginPlotNative([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] byte* titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, Vector2, ImPlot3DFlags, byte>)funcTable[8])(titleId, size, flags);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, Vector2, ImPlot3DFlags, byte>)funcTable[8])((nint)titleId, size, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] byte* titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			byte ret = BeginPlotNative(titleId, size, flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] byte* titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			byte ret = BeginPlotNative(titleId, size, (ImPlot3DFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] byte* titleId)
		{
			byte ret = BeginPlotNative(titleId, (Vector2)(new Vector2(-1,0)), (ImPlot3DFlags)(0));
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] byte* titleId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			byte ret = BeginPlotNative(titleId, (Vector2)(new Vector2(-1,0)), flags);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			fixed (byte* ptitleId = &titleId)
			{
				byte ret = BeginPlotNative((byte*)ptitleId, size, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			fixed (byte* ptitleId = &titleId)
			{
				byte ret = BeginPlotNative((byte*)ptitleId, size, (ImPlot3DFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte titleId)
		{
			fixed (byte* ptitleId = &titleId)
			{
				byte ret = BeginPlotNative((byte*)ptitleId, (Vector2)(new Vector2(-1,0)), (ImPlot3DFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] ref byte titleId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			fixed (byte* ptitleId = &titleId)
			{
				byte ret = BeginPlotNative((byte*)ptitleId, (Vector2)(new Vector2(-1,0)), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			fixed (byte* ptitleId = titleId)
			{
				byte ret = BeginPlotNative((byte*)ptitleId, size, flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			fixed (byte* ptitleId = titleId)
			{
				byte ret = BeginPlotNative((byte*)ptitleId, size, (ImPlot3DFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> titleId)
		{
			fixed (byte* ptitleId = titleId)
			{
				byte ret = BeginPlotNative((byte*)ptitleId, (Vector2)(new Vector2(-1,0)), (ImPlot3DFlags)(0));
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> titleId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			fixed (byte* ptitleId = titleId)
			{
				byte ret = BeginPlotNative((byte*)ptitleId, (Vector2)(new Vector2(-1,0)), flags);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] string titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (titleId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(titleId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(titleId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPlotNative(pStr0, size, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] string titleId, [NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "const ImVec2")] Vector2 size)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (titleId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(titleId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(titleId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPlotNative(pStr0, size, (ImPlot3DFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] string titleId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (titleId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(titleId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(titleId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPlotNative(pStr0, (Vector2)(new Vector2(-1,0)), (ImPlot3DFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_BeginPlot")]
		[return: NativeName(NativeNameType.Type, "bool")]
		public static bool BeginPlot([NativeName(NativeNameType.Param, "title_id")] [NativeName(NativeNameType.Type, "const char*")] string titleId, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DFlags")] ImPlot3DFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (titleId != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(titleId);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(titleId, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = BeginPlotNative(pStr0, (Vector2)(new Vector2(-1,0)), flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// Only call if BeginPlot() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_EndPlot")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndPlotNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[9])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[9])();
			#endif
		}

		/// <summary>
		/// Only call if BeginPlot() returns true!<br/>
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_EndPlot")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void EndPlot()
		{
			EndPlotNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxisNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis3D, byte*, ImPlot3DAxisFlags, void>)funcTable[10])(axis, label, flags);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis3D, nint, ImPlot3DAxisFlags, void>)funcTable[10])(axis, (nint)label, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags flags)
		{
			SetupAxisNative(axis, label, flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] byte* label)
		{
			SetupAxisNative(axis, label, (ImPlot3DAxisFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis)
		{
			SetupAxisNative(axis, (byte*)(default), (ImPlot3DAxisFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags flags)
		{
			SetupAxisNative(axis, (byte*)(default), flags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags flags)
		{
			fixed (byte* plabel = &label)
			{
				SetupAxisNative(axis, (byte*)plabel, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				SetupAxisNative(axis, (byte*)plabel, (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags flags)
		{
			fixed (byte* plabel = label)
			{
				SetupAxisNative(axis, (byte*)plabel, flags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				SetupAxisNative(axis, (byte*)plabel, (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label, [NativeName(NativeNameType.Param, "flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags flags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxisNative(axis, pStr0, flags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxis")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxis([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "label")] [NativeName(NativeNameType.Type, "const char*")] string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxisNative(axis, pStr0, (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxisLimitsNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis3D, double, double, ImPlot3DCond, void>)funcTable[11])(axis, vMin, vMax, cond);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis3D, double, double, ImPlot3DCond, void>)funcTable[11])(axis, vMin, vMax, cond);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisLimits([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "cond")] [NativeName(NativeNameType.Type, "ImPlot3DCond")] ImPlot3DCond cond)
		{
			SetupAxisLimitsNative(axis, vMin, vMax, cond);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisLimits")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisLimits([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax)
		{
			SetupAxisLimitsNative(axis, vMin, vMax, (ImPlot3DCond)(ImPlot3DCond.Once));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxisFormatNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "formatter")] [NativeName(NativeNameType.Type, "ImPlot3DFormatter")] ImPlot3DFormatter formatter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis3D, delegate*<float, byte*, int, void*, int>, void*, void>)funcTable[12])(axis, (delegate*<float, byte*, int, void*, int>)Utils.GetFunctionPointerForDelegate(formatter), data);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis3D, nint, nint, void>)funcTable[12])(axis, (nint)Utils.GetFunctionPointerForDelegate(formatter), (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisFormat([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "formatter")] [NativeName(NativeNameType.Type, "ImPlot3DFormatter")] ImPlot3DFormatter formatter, [NativeName(NativeNameType.Param, "data")] [NativeName(NativeNameType.Type, "void*")] void* data)
		{
			SetupAxisFormatNative(axis, formatter, data);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisFormat")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisFormat([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "formatter")] [NativeName(NativeNameType.Type, "ImPlot3DFormatter")] ImPlot3DFormatter formatter)
		{
			SetupAxisFormatNative(axis, formatter, (void*)(default));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxisTicksNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] double* values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** labels, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] byte keepDefault)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis3D, double*, int, byte**, byte, void>)funcTable[13])(axis, values, nTicks, labels, keepDefault);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis3D, nint, int, nint, byte, void>)funcTable[13])(axis, (nint)values, nTicks, (nint)labels, keepDefault);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] double* values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** labels, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			SetupAxisTicksNative(axis, values, nTicks, labels, keepDefault ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] double* values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** labels)
		{
			SetupAxisTicksNative(axis, values, nTicks, labels, (byte)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] double* values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks)
		{
			SetupAxisTicksNative(axis, values, nTicks, (byte**)(default), (byte)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] double* values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			SetupAxisTicksNative(axis, values, nTicks, (byte**)(default), keepDefault ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] ref double values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** labels, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			fixed (double* pvalues = &values)
			{
				SetupAxisTicksNative(axis, (double*)pvalues, nTicks, labels, keepDefault ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] ref double values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** labels)
		{
			fixed (double* pvalues = &values)
			{
				SetupAxisTicksNative(axis, (double*)pvalues, nTicks, labels, (byte)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] ref double values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks)
		{
			fixed (double* pvalues = &values)
			{
				SetupAxisTicksNative(axis, (double*)pvalues, nTicks, (byte**)(default), (byte)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] ref double values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			fixed (double* pvalues = &values)
			{
				SetupAxisTicksNative(axis, (double*)pvalues, nTicks, (byte**)(default), keepDefault ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] double* values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] labels, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labels);
			if (labels != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labels.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labels[i]);
			}
			SetupAxisTicksNative(axis, values, nTicks, pStrArray0, keepDefault ? (byte)1 : (byte)0);
			for (int i = 0; i < labels.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] double* values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] labels)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labels);
			if (labels != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labels.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labels[i]);
			}
			SetupAxisTicksNative(axis, values, nTicks, pStrArray0, (byte)(0));
			for (int i = 0; i < labels.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] ref double values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] labels, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			fixed (double* pvalues = &values)
			{
				byte** pStrArray0 = null;
				int pStrArray0Size = Utils.GetByteCountArray(labels);
				if (labels != null)
				{
					if (pStrArray0Size > Utils.MaxStackallocSize)
					{
						pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
					}
					else
					{
						byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
						pStrArray0 = (byte**)pStrArray0Stack;
					}
				}
				for (int i = 0; i < labels.Length; i++)
				{
					pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labels[i]);
				}
				SetupAxisTicksNative(axis, (double*)pvalues, nTicks, pStrArray0, keepDefault ? (byte)1 : (byte)0);
				for (int i = 0; i < labels.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_doublePtr")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "values")] [NativeName(NativeNameType.Type, "const double*")] ref double values, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] labels)
		{
			fixed (double* pvalues = &values)
			{
				byte** pStrArray0 = null;
				int pStrArray0Size = Utils.GetByteCountArray(labels);
				if (labels != null)
				{
					if (pStrArray0Size > Utils.MaxStackallocSize)
					{
						pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
					}
					else
					{
						byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
						pStrArray0 = (byte**)pStrArray0Stack;
					}
				}
				for (int i = 0; i < labels.Length; i++)
				{
					pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labels[i]);
				}
				SetupAxisTicksNative(axis, (double*)pvalues, nTicks, pStrArray0, (byte)(0));
				for (int i = 0; i < labels.Length; i++)
				{
					Utils.Free(pStrArray0[i]);
				}
				if (pStrArray0Size >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStrArray0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_double")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxisTicksNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** labels, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] byte keepDefault)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis3D, double, double, int, byte**, byte, void>)funcTable[14])(axis, vMin, vMax, nTicks, labels, keepDefault);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis3D, double, double, int, nint, byte, void>)funcTable[14])(axis, vMin, vMax, nTicks, (nint)labels, keepDefault);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_double")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** labels, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			SetupAxisTicksNative(axis, vMin, vMax, nTicks, labels, keepDefault ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_double")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] byte** labels)
		{
			SetupAxisTicksNative(axis, vMin, vMax, nTicks, labels, (byte)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_double")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks)
		{
			SetupAxisTicksNative(axis, vMin, vMax, nTicks, (byte**)(default), (byte)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_double")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			SetupAxisTicksNative(axis, vMin, vMax, nTicks, (byte**)(default), keepDefault ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_double")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] labels, [NativeName(NativeNameType.Param, "keep_default")] [NativeName(NativeNameType.Type, "bool")] bool keepDefault)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labels);
			if (labels != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labels.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labels[i]);
			}
			SetupAxisTicksNative(axis, vMin, vMax, nTicks, pStrArray0, keepDefault ? (byte)1 : (byte)0);
			for (int i = 0; i < labels.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisTicks_double")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisTicks([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax, [NativeName(NativeNameType.Param, "n_ticks")] [NativeName(NativeNameType.Type, "int")] int nTicks, [NativeName(NativeNameType.Param, "labels")] [NativeName(NativeNameType.Type, "const const char*[-1]")] string[] labels)
		{
			byte** pStrArray0 = null;
			int pStrArray0Size = Utils.GetByteCountArray(labels);
			if (labels != null)
			{
				if (pStrArray0Size > Utils.MaxStackallocSize)
				{
					pStrArray0 = (byte**)Utils.Alloc<byte>(pStrArray0Size);
				}
				else
				{
					byte* pStrArray0Stack = stackalloc byte[pStrArray0Size];
					pStrArray0 = (byte**)pStrArray0Stack;
				}
			}
			for (int i = 0; i < labels.Length; i++)
			{
				pStrArray0[i] = (byte*)Utils.StringToUTF8Ptr(labels[i]);
			}
			SetupAxisTicksNative(axis, vMin, vMax, nTicks, pStrArray0, (byte)(0));
			for (int i = 0; i < labels.Length; i++)
			{
				Utils.Free(pStrArray0[i]);
			}
			if (pStrArray0Size >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStrArray0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisLimitsConstraints")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxisLimitsConstraintsNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis3D, double, double, void>)funcTable[15])(axis, vMin, vMax);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis3D, double, double, void>)funcTable[15])(axis, vMin, vMax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisLimitsConstraints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisLimitsConstraints([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "v_min")] [NativeName(NativeNameType.Type, "double")] double vMin, [NativeName(NativeNameType.Param, "v_max")] [NativeName(NativeNameType.Type, "double")] double vMax)
		{
			SetupAxisLimitsConstraintsNative(axis, vMin, vMax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisZoomConstraints")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxisZoomConstraintsNative([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "z_min")] [NativeName(NativeNameType.Type, "double")] double zMin, [NativeName(NativeNameType.Param, "z_max")] [NativeName(NativeNameType.Type, "double")] double zMax)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImAxis3D, double, double, void>)funcTable[16])(axis, zMin, zMax);
			#else
			((delegate* unmanaged[Cdecl]<ImAxis3D, double, double, void>)funcTable[16])(axis, zMin, zMax);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxisZoomConstraints")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxisZoomConstraints([NativeName(NativeNameType.Param, "axis")] [NativeName(NativeNameType.Type, "ImAxis3D")] ImAxis3D axis, [NativeName(NativeNameType.Param, "z_min")] [NativeName(NativeNameType.Type, "double")] double zMin, [NativeName(NativeNameType.Param, "z_max")] [NativeName(NativeNameType.Type, "double")] double zMax)
		{
			SetupAxisZoomConstraintsNative(axis, zMin, zMax);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetupAxesNative([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, byte*, ImPlot3DAxisFlags, ImPlot3DAxisFlags, ImPlot3DAxisFlags, void>)funcTable[17])(xLabel, yLabel, zLabel, xFlags, yFlags, zFlags);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, ImPlot3DAxisFlags, ImPlot3DAxisFlags, ImPlot3DAxisFlags, void>)funcTable[17])((nint)xLabel, (nint)yLabel, (nint)zLabel, xFlags, yFlags, zFlags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			SetupAxesNative(xLabel, yLabel, zLabel, xFlags, yFlags, zFlags);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			SetupAxesNative(xLabel, yLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			SetupAxesNative(xLabel, yLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			SetupAxesNative(xLabel, yLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				SetupAxesNative((byte*)pxLabel, yLabel, zLabel, xFlags, yFlags, zFlags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				SetupAxesNative((byte*)pxLabel, yLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				SetupAxesNative((byte*)pxLabel, yLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				SetupAxesNative((byte*)pxLabel, yLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				SetupAxesNative((byte*)pxLabel, yLabel, zLabel, xFlags, yFlags, zFlags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				SetupAxesNative((byte*)pxLabel, yLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				SetupAxesNative((byte*)pxLabel, yLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				SetupAxesNative((byte*)pxLabel, yLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(pStr0, yLabel, zLabel, xFlags, yFlags, zFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(pStr0, yLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(pStr0, yLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(pStr0, yLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				SetupAxesNative(xLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, zFlags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				SetupAxesNative(xLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				SetupAxesNative(xLabel, (byte*)pyLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				SetupAxesNative(xLabel, (byte*)pyLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				SetupAxesNative(xLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, zFlags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				SetupAxesNative(xLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				SetupAxesNative(xLabel, (byte*)pyLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pyLabel = yLabel)
			{
				SetupAxesNative(xLabel, (byte*)pyLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(xLabel, pStr0, zLabel, xFlags, yFlags, zFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(xLabel, pStr0, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(xLabel, pStr0, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(xLabel, pStr0, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(pStr0, pStr1, zLabel, xFlags, yFlags, zFlags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(pStr0, pStr1, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(pStr0, pStr1, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (yLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(yLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(pStr0, pStr1, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, zLabel, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, zLabel, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (yLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(yLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, pStr0, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				SetupAxesNative(pStr0, (byte*)pyLabel, zLabel, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				SetupAxesNative(pStr0, (byte*)pyLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				SetupAxesNative(pStr0, (byte*)pyLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = &yLabel)
			{
				SetupAxesNative(pStr0, (byte*)pyLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				SetupAxesNative(pStr0, (byte*)pyLabel, zLabel, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				SetupAxesNative(pStr0, (byte*)pyLabel, zLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				SetupAxesNative(pStr0, (byte*)pyLabel, zLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] byte* zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pyLabel = yLabel)
			{
				SetupAxesNative(pStr0, (byte*)pyLabel, zLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(xLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(xLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(xLabel, yLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(xLabel, yLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(xLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(xLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(xLabel, yLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(xLabel, yLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (zLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(xLabel, yLabel, pStr0, xFlags, yFlags, zFlags);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (zLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(xLabel, yLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (zLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(xLabel, yLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (zLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SetupAxesNative(xLabel, yLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (zLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(pStr0, yLabel, pStr1, xFlags, yFlags, zFlags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (zLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(pStr0, yLabel, pStr1, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (zLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(pStr0, yLabel, pStr1, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (zLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(pStr0, yLabel, pStr1, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, yLabel, pStr0, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, yLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, yLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, yLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative((byte*)pxLabel, yLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, yLabel, pStr0, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, yLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, yLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pxLabel = xLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative((byte*)pxLabel, yLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(pStr0, yLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(pStr0, yLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(pStr0, yLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(pStr0, yLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(pStr0, yLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(pStr0, yLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(pStr0, yLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] string xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] byte* yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (xLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(xLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(xLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(pStr0, yLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (zLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(xLabel, pStr0, pStr1, xFlags, yFlags, zFlags);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (zLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(xLabel, pStr0, pStr1, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (zLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(xLabel, pStr0, pStr1, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (zLabel != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(zLabel);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(zLabel, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			SetupAxesNative(xLabel, pStr0, pStr1, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				fixed (byte* pzLabel = zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative(xLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative(xLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative(xLabel, (byte*)pyLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pyLabel = &yLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative(xLabel, (byte*)pyLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pyLabel = yLabel)
			{
				fixed (byte* pzLabel = &zLabel)
				{
					SetupAxesNative(xLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative(xLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative(xLabel, (byte*)pyLabel, pStr0, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pyLabel = yLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative(xLabel, (byte*)pyLabel, pStr0, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] string zLabel)
		{
			fixed (byte* pyLabel = yLabel)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (zLabel != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(zLabel);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(zLabel, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				SetupAxesNative(xLabel, (byte*)pyLabel, pStr0, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(xLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(xLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(xLabel, pStr0, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = &zLabel)
			{
				SetupAxesNative(xLabel, pStr0, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(xLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, zFlags);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(xLabel, pStr0, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(xLabel, pStr0, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] byte* xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] string yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (yLabel != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(yLabel);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(yLabel, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pzLabel = zLabel)
			{
				SetupAxesNative(xLabel, pStr0, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ref byte zLabel)
		{
			fixed (byte* pxLabel = &xLabel)
			{
				fixed (byte* pyLabel = &yLabel)
				{
					fixed (byte* pzLabel = &zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0), (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags, [NativeName(NativeNameType.Param, "z_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags zFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, zFlags);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[NativeName(NativeNameType.Func, "ImPlot3D_SetupAxes")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SetupAxes([NativeName(NativeNameType.Param, "x_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> xLabel, [NativeName(NativeNameType.Param, "y_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> yLabel, [NativeName(NativeNameType.Param, "z_label")] [NativeName(NativeNameType.Type, "const char*")] ReadOnlySpan<byte> zLabel, [NativeName(NativeNameType.Param, "x_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags xFlags, [NativeName(NativeNameType.Param, "y_flags")] [NativeName(NativeNameType.Type, "ImPlot3DAxisFlags")] ImPlot3DAxisFlags yFlags)
		{
			fixed (byte* pxLabel = xLabel)
			{
				fixed (byte* pyLabel = yLabel)
				{
					fixed (byte* pzLabel = zLabel)
					{
						SetupAxesNative((byte*)pxLabel, (byte*)pyLabel, (byte*)pzLabel, xFlags, yFlags, (ImPlot3DAxisFlags)(0));
					}
				}
			}
		}
	}
}
