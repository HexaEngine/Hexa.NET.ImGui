// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Packed rectangle lookup entry (we need an indirection to allow removingreordering rectangles)<br/>
	/// User are returned ImFontAtlasRectId values which are meant to be persistent.<br/>
	/// We handle this with an indirection. While Rects[] may be in theory shuffled, compacted etc., RectsIndex[] cannot it is keyed by ImFontAtlasRectId.<br/>
	/// RectsIndex[] is used both as an index into Rects[] and an index into itself. This is basically a free-list. See ImFontAtlasBuildAllocRectIndexEntry() code.<br/>
	/// Having this also makes it easier to e.g. sort rectangles during repack.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImFontAtlasRectEntry
	{
		public int RawBits0;
		public uint RawBits1;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontAtlasRectEntry(int targetIndex = default, uint generation = default, uint isUsed = default)
		{
			TargetIndex = targetIndex;
			Generation = generation;
			IsUsed = isUsed;
		}


		public int TargetIndex { get => Bitfield.Get(RawBits0, 0, 20); set => Bitfield.Set(ref RawBits0, value, 0, 20); }

		public uint Generation { get => Bitfield.Get(RawBits1, 0, 10); set => Bitfield.Set(ref RawBits1, value, 0, 10); }

		public uint IsUsed { get => Bitfield.Get(RawBits1, 10, 1); set => Bitfield.Set(ref RawBits1, value, 10, 1); }

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImFontAtlasRectEntryPtr : IEquatable<ImFontAtlasRectEntryPtr>
	{
		public ImFontAtlasRectEntryPtr(ImFontAtlasRectEntry* handle) { Handle = handle; }

		public ImFontAtlasRectEntry* Handle;

		public bool IsNull => Handle == null;

		public static ImFontAtlasRectEntryPtr Null => new ImFontAtlasRectEntryPtr(null);

		public ImFontAtlasRectEntry this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImFontAtlasRectEntryPtr(ImFontAtlasRectEntry* handle) => new ImFontAtlasRectEntryPtr(handle);

		public static implicit operator ImFontAtlasRectEntry*(ImFontAtlasRectEntryPtr handle) => handle.Handle;

		public static bool operator ==(ImFontAtlasRectEntryPtr left, ImFontAtlasRectEntryPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImFontAtlasRectEntryPtr left, ImFontAtlasRectEntryPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImFontAtlasRectEntryPtr left, ImFontAtlasRectEntry* right) => left.Handle == right;

		public static bool operator !=(ImFontAtlasRectEntryPtr left, ImFontAtlasRectEntry* right) => left.Handle != right;

		public bool Equals(ImFontAtlasRectEntryPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImFontAtlasRectEntryPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImFontAtlasRectEntryPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public int TargetIndex { get => Handle->TargetIndex; set => Handle->TargetIndex = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint Generation { get => Handle->Generation; set => Handle->Generation = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint IsUsed { get => Handle->IsUsed; set => Handle->IsUsed = value; }
	}

}
