// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiContext
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte Initialized;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiIO IO;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPlatformIO PlatformIO;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiStyle Style;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiConfigFlags ConfigFlagsCurrFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiConfigFlags ConfigFlagsLastFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImFontAtlasPtr> FontAtlases;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFont* Font;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontBaked* FontBaked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FontSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FontSizeBase;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FontBakedScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FontRasterizerDensity;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CurrentDpiScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImDrawListSharedData DrawListSharedData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double Time;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCountEnded;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCountPlatformEnded;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FrameCountRendered;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint WithinEndChildID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WithinFrameScope;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WithinFrameScopeWithImplicitWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte GcCompactAll;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte TestEngineHookItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* TestEngine;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ContextName_0;
		public byte ContextName_1;
		public byte ContextName_2;
		public byte ContextName_3;
		public byte ContextName_4;
		public byte ContextName_5;
		public byte ContextName_6;
		public byte ContextName_7;
		public byte ContextName_8;
		public byte ContextName_9;
		public byte ContextName_10;
		public byte ContextName_11;
		public byte ContextName_12;
		public byte ContextName_13;
		public byte ContextName_14;
		public byte ContextName_15;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiInputEvent> InputEventsQueue;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiInputEvent> InputEventsTrail;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseSource InputEventsNextMouseSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint InputEventsNextEventId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowPtr> Windows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowPtr> WindowsFocusOrder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowPtr> WindowsTempSortBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiWindowStackData> CurrentWindowStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiStorage WindowsById;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WindowsActiveCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float WindowsBorderHoverPadding;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DebugBreakInWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* CurrentWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* HoveredWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* HoveredWindowUnderMovingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* HoveredWindowBeforeClear;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* MovingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* WheelingWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WheelingWindowRefMousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WheelingWindowStartFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WheelingWindowScrolledFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float WheelingWindowReleaseTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WheelingWindowWheelRemainder;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 WheelingAxisAvg;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DebugDrawIdConflictsId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DebugHookIdInfoId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HoveredId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HoveredIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int HoveredIdPreviousFrameItemCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float HoveredIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float HoveredIdNotActiveTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HoveredIdAllowOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte HoveredIdIsDisabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ItemUnclipByLog;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ActiveIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdIsJustActivated;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdAllowOverlap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdNoClearOnFocusLoss;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdHasBeenPressedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdHasBeenEditedBefore;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdHasBeenEditedThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdFromShortcut;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveIdDisabledId;

		public int RawBits0;
		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ActiveIdClickOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* ActiveIdWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiInputSource ActiveIdSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDeactivatedItemData DeactivatedItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDataTypeStorage ActiveIdValueOnActivation;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint LastActiveId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LastActiveIdTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double LastKeyModsChangeTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double LastKeyModsChangeFromNoneTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double LastKeyboardKeyPressTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImBitArrayForNamedKeys KeysMayBeCharInput;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiKeyOwnerData KeysOwnerData_0;
		public ImGuiKeyOwnerData KeysOwnerData_1;
		public ImGuiKeyOwnerData KeysOwnerData_2;
		public ImGuiKeyOwnerData KeysOwnerData_3;
		public ImGuiKeyOwnerData KeysOwnerData_4;
		public ImGuiKeyOwnerData KeysOwnerData_5;
		public ImGuiKeyOwnerData KeysOwnerData_6;
		public ImGuiKeyOwnerData KeysOwnerData_7;
		public ImGuiKeyOwnerData KeysOwnerData_8;
		public ImGuiKeyOwnerData KeysOwnerData_9;
		public ImGuiKeyOwnerData KeysOwnerData_10;
		public ImGuiKeyOwnerData KeysOwnerData_11;
		public ImGuiKeyOwnerData KeysOwnerData_12;
		public ImGuiKeyOwnerData KeysOwnerData_13;
		public ImGuiKeyOwnerData KeysOwnerData_14;
		public ImGuiKeyOwnerData KeysOwnerData_15;
		public ImGuiKeyOwnerData KeysOwnerData_16;
		public ImGuiKeyOwnerData KeysOwnerData_17;
		public ImGuiKeyOwnerData KeysOwnerData_18;
		public ImGuiKeyOwnerData KeysOwnerData_19;
		public ImGuiKeyOwnerData KeysOwnerData_20;
		public ImGuiKeyOwnerData KeysOwnerData_21;
		public ImGuiKeyOwnerData KeysOwnerData_22;
		public ImGuiKeyOwnerData KeysOwnerData_23;
		public ImGuiKeyOwnerData KeysOwnerData_24;
		public ImGuiKeyOwnerData KeysOwnerData_25;
		public ImGuiKeyOwnerData KeysOwnerData_26;
		public ImGuiKeyOwnerData KeysOwnerData_27;
		public ImGuiKeyOwnerData KeysOwnerData_28;
		public ImGuiKeyOwnerData KeysOwnerData_29;
		public ImGuiKeyOwnerData KeysOwnerData_30;
		public ImGuiKeyOwnerData KeysOwnerData_31;
		public ImGuiKeyOwnerData KeysOwnerData_32;
		public ImGuiKeyOwnerData KeysOwnerData_33;
		public ImGuiKeyOwnerData KeysOwnerData_34;
		public ImGuiKeyOwnerData KeysOwnerData_35;
		public ImGuiKeyOwnerData KeysOwnerData_36;
		public ImGuiKeyOwnerData KeysOwnerData_37;
		public ImGuiKeyOwnerData KeysOwnerData_38;
		public ImGuiKeyOwnerData KeysOwnerData_39;
		public ImGuiKeyOwnerData KeysOwnerData_40;
		public ImGuiKeyOwnerData KeysOwnerData_41;
		public ImGuiKeyOwnerData KeysOwnerData_42;
		public ImGuiKeyOwnerData KeysOwnerData_43;
		public ImGuiKeyOwnerData KeysOwnerData_44;
		public ImGuiKeyOwnerData KeysOwnerData_45;
		public ImGuiKeyOwnerData KeysOwnerData_46;
		public ImGuiKeyOwnerData KeysOwnerData_47;
		public ImGuiKeyOwnerData KeysOwnerData_48;
		public ImGuiKeyOwnerData KeysOwnerData_49;
		public ImGuiKeyOwnerData KeysOwnerData_50;
		public ImGuiKeyOwnerData KeysOwnerData_51;
		public ImGuiKeyOwnerData KeysOwnerData_52;
		public ImGuiKeyOwnerData KeysOwnerData_53;
		public ImGuiKeyOwnerData KeysOwnerData_54;
		public ImGuiKeyOwnerData KeysOwnerData_55;
		public ImGuiKeyOwnerData KeysOwnerData_56;
		public ImGuiKeyOwnerData KeysOwnerData_57;
		public ImGuiKeyOwnerData KeysOwnerData_58;
		public ImGuiKeyOwnerData KeysOwnerData_59;
		public ImGuiKeyOwnerData KeysOwnerData_60;
		public ImGuiKeyOwnerData KeysOwnerData_61;
		public ImGuiKeyOwnerData KeysOwnerData_62;
		public ImGuiKeyOwnerData KeysOwnerData_63;
		public ImGuiKeyOwnerData KeysOwnerData_64;
		public ImGuiKeyOwnerData KeysOwnerData_65;
		public ImGuiKeyOwnerData KeysOwnerData_66;
		public ImGuiKeyOwnerData KeysOwnerData_67;
		public ImGuiKeyOwnerData KeysOwnerData_68;
		public ImGuiKeyOwnerData KeysOwnerData_69;
		public ImGuiKeyOwnerData KeysOwnerData_70;
		public ImGuiKeyOwnerData KeysOwnerData_71;
		public ImGuiKeyOwnerData KeysOwnerData_72;
		public ImGuiKeyOwnerData KeysOwnerData_73;
		public ImGuiKeyOwnerData KeysOwnerData_74;
		public ImGuiKeyOwnerData KeysOwnerData_75;
		public ImGuiKeyOwnerData KeysOwnerData_76;
		public ImGuiKeyOwnerData KeysOwnerData_77;
		public ImGuiKeyOwnerData KeysOwnerData_78;
		public ImGuiKeyOwnerData KeysOwnerData_79;
		public ImGuiKeyOwnerData KeysOwnerData_80;
		public ImGuiKeyOwnerData KeysOwnerData_81;
		public ImGuiKeyOwnerData KeysOwnerData_82;
		public ImGuiKeyOwnerData KeysOwnerData_83;
		public ImGuiKeyOwnerData KeysOwnerData_84;
		public ImGuiKeyOwnerData KeysOwnerData_85;
		public ImGuiKeyOwnerData KeysOwnerData_86;
		public ImGuiKeyOwnerData KeysOwnerData_87;
		public ImGuiKeyOwnerData KeysOwnerData_88;
		public ImGuiKeyOwnerData KeysOwnerData_89;
		public ImGuiKeyOwnerData KeysOwnerData_90;
		public ImGuiKeyOwnerData KeysOwnerData_91;
		public ImGuiKeyOwnerData KeysOwnerData_92;
		public ImGuiKeyOwnerData KeysOwnerData_93;
		public ImGuiKeyOwnerData KeysOwnerData_94;
		public ImGuiKeyOwnerData KeysOwnerData_95;
		public ImGuiKeyOwnerData KeysOwnerData_96;
		public ImGuiKeyOwnerData KeysOwnerData_97;
		public ImGuiKeyOwnerData KeysOwnerData_98;
		public ImGuiKeyOwnerData KeysOwnerData_99;
		public ImGuiKeyOwnerData KeysOwnerData_100;
		public ImGuiKeyOwnerData KeysOwnerData_101;
		public ImGuiKeyOwnerData KeysOwnerData_102;
		public ImGuiKeyOwnerData KeysOwnerData_103;
		public ImGuiKeyOwnerData KeysOwnerData_104;
		public ImGuiKeyOwnerData KeysOwnerData_105;
		public ImGuiKeyOwnerData KeysOwnerData_106;
		public ImGuiKeyOwnerData KeysOwnerData_107;
		public ImGuiKeyOwnerData KeysOwnerData_108;
		public ImGuiKeyOwnerData KeysOwnerData_109;
		public ImGuiKeyOwnerData KeysOwnerData_110;
		public ImGuiKeyOwnerData KeysOwnerData_111;
		public ImGuiKeyOwnerData KeysOwnerData_112;
		public ImGuiKeyOwnerData KeysOwnerData_113;
		public ImGuiKeyOwnerData KeysOwnerData_114;
		public ImGuiKeyOwnerData KeysOwnerData_115;
		public ImGuiKeyOwnerData KeysOwnerData_116;
		public ImGuiKeyOwnerData KeysOwnerData_117;
		public ImGuiKeyOwnerData KeysOwnerData_118;
		public ImGuiKeyOwnerData KeysOwnerData_119;
		public ImGuiKeyOwnerData KeysOwnerData_120;
		public ImGuiKeyOwnerData KeysOwnerData_121;
		public ImGuiKeyOwnerData KeysOwnerData_122;
		public ImGuiKeyOwnerData KeysOwnerData_123;
		public ImGuiKeyOwnerData KeysOwnerData_124;
		public ImGuiKeyOwnerData KeysOwnerData_125;
		public ImGuiKeyOwnerData KeysOwnerData_126;
		public ImGuiKeyOwnerData KeysOwnerData_127;
		public ImGuiKeyOwnerData KeysOwnerData_128;
		public ImGuiKeyOwnerData KeysOwnerData_129;
		public ImGuiKeyOwnerData KeysOwnerData_130;
		public ImGuiKeyOwnerData KeysOwnerData_131;
		public ImGuiKeyOwnerData KeysOwnerData_132;
		public ImGuiKeyOwnerData KeysOwnerData_133;
		public ImGuiKeyOwnerData KeysOwnerData_134;
		public ImGuiKeyOwnerData KeysOwnerData_135;
		public ImGuiKeyOwnerData KeysOwnerData_136;
		public ImGuiKeyOwnerData KeysOwnerData_137;
		public ImGuiKeyOwnerData KeysOwnerData_138;
		public ImGuiKeyOwnerData KeysOwnerData_139;
		public ImGuiKeyOwnerData KeysOwnerData_140;
		public ImGuiKeyOwnerData KeysOwnerData_141;
		public ImGuiKeyOwnerData KeysOwnerData_142;
		public ImGuiKeyOwnerData KeysOwnerData_143;
		public ImGuiKeyOwnerData KeysOwnerData_144;
		public ImGuiKeyOwnerData KeysOwnerData_145;
		public ImGuiKeyOwnerData KeysOwnerData_146;
		public ImGuiKeyOwnerData KeysOwnerData_147;
		public ImGuiKeyOwnerData KeysOwnerData_148;
		public ImGuiKeyOwnerData KeysOwnerData_149;
		public ImGuiKeyOwnerData KeysOwnerData_150;
		public ImGuiKeyOwnerData KeysOwnerData_151;
		public ImGuiKeyOwnerData KeysOwnerData_152;
		public ImGuiKeyOwnerData KeysOwnerData_153;
		public ImGuiKeyOwnerData KeysOwnerData_154;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiKeyRoutingTable KeysRoutingTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ActiveIdUsingNavDirMask;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ActiveIdUsingAllKeyboardKeys;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DebugBreakInShortcutRouting;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint CurrentFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiItemFlags CurrentItemFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DebugLocateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNextItemData NextItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiLastItemData LastItemData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNextWindowData NextWindowData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DebugShowGroupRects;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiCol DebugFlashStyleColorIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiColorMod> ColorStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiStyleMod> StyleVarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImFontStackData> FontStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiFocusScopeData> FocusScopeStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiItemFlags> ItemFlagsStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiGroupData> GroupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiPopupData> OpenPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiPopupData> BeginPopupStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiTreeNodeStackData> TreeNodeStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiViewportPPtr> Viewports;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP* CurrentViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP* MouseViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiViewportP* MouseLastHoveredViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint PlatformLastFocusedViewportId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPlatformMonitor FallbackMonitor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect PlatformMonitorsFullWorkRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ViewportCreatedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int PlatformWindowsCreatedCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ViewportFocusedStampCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavCursorVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavHighlightItemUnderNav;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavMousePosDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavIdIsAlive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavLayer NavLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavActivateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavActivateDownId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavActivatePressedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiActivateFlags NavActivateFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiFocusScopeData> NavFocusRoute;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavHighlightActivatedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float NavHighlightActivatedTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavNextActivateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiActivateFlags NavNextActivateFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiInputSource NavInputSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public long NavLastValidSelectionUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte NavCursorHideFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavAnyRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavInitRequest;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavInitRequestFromMove;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavInitResult;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavMoveSubmitted;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavMoveScoringItems;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavMoveForwardToNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavMoveFlags NavMoveFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiScrollFlags NavMoveScrollFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NavMoveKeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDir NavMoveDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDir NavMoveDirForDebug;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDir NavMoveClipDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect NavScoringRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect NavScoringNoClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NavScoringDebugCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NavTabbingDir;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NavTabbingCounter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavMoveResultLocal;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavMoveResultLocalVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavMoveResultOther;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiNavItemData NavTabbingResultFirst;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavJustMovedFromFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavJustMovedToId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint NavJustMovedToFocusScopeId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int NavJustMovedToKeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavJustMovedToIsTabbing;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavJustMovedToHasSelectionData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigNavWindowingWithGamepad;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ConfigNavWindowingKeyNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ConfigNavWindowingKeyPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavWindowingTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavWindowingTargetAnim;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* NavWindowingListWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float NavWindowingTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float NavWindowingHighlightAlpha;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiInputSource NavWindowingInputSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavWindowingToggleLayer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiKey NavWindowingToggleKey;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 NavWindowingAccumDeltaPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 NavWindowingAccumDeltaSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DimBgRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragDropActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragDropWithinSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragDropWithinTarget;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDragDropFlags DragDropSourceFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DragDropSourceFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DragDropMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPayload DragDropPayload;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect DragDropTargetRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect DragDropTargetClipRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DragDropTargetId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDragDropFlags DragDropAcceptFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DragDropAcceptIdCurrRectSurface;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DragDropAcceptIdCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DragDropAcceptIdPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DragDropAcceptFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DragDropHoldJustPressedId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<byte> DragDropPayloadBufHeap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragDropPayloadBufLocal_0;
		public byte DragDropPayloadBufLocal_1;
		public byte DragDropPayloadBufLocal_2;
		public byte DragDropPayloadBufLocal_3;
		public byte DragDropPayloadBufLocal_4;
		public byte DragDropPayloadBufLocal_5;
		public byte DragDropPayloadBufLocal_6;
		public byte DragDropPayloadBufLocal_7;
		public byte DragDropPayloadBufLocal_8;
		public byte DragDropPayloadBufLocal_9;
		public byte DragDropPayloadBufLocal_10;
		public byte DragDropPayloadBufLocal_11;
		public byte DragDropPayloadBufLocal_12;
		public byte DragDropPayloadBufLocal_13;
		public byte DragDropPayloadBufLocal_14;
		public byte DragDropPayloadBufLocal_15;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ClipperTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiListClipperData> ClipperTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTable* CurrentTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DebugBreakInTable;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int TablesTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiTableTempData> TablesTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImGuiTable Tables;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<float> TablesLastTimeActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImDrawChannel> DrawChannelsTempMergeBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTabBar* CurrentTabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImGuiTabBar TabBars;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiPtrOrIndex> CurrentTabBarStack;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiShrinkWidthItem> ShrinkWidthBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiBoxSelectState BoxSelectState;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiMultiSelectTempData* CurrentMultiSelect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MultiSelectTempDataStacked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiMultiSelectTempData> MultiSelectTempData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImPoolImGuiMultiSelectState MultiSelectStorage;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HoverItemDelayId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HoverItemDelayIdPreviousFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float HoverItemDelayTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float HoverItemDelayClearTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HoverItemUnlockedStationaryId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HoverWindowUnlockedStationaryId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseCursor MouseCursor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseStationaryTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MouseLastValidPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiInputTextState InputTextState;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextIndex InputTextLineIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiInputTextDeactivatedState InputTextDeactivatedState;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImFontBaked InputTextPasswordFontBackupBaked;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImFontFlags InputTextPasswordFontBackupFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint TempInputId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDataTypeStorage DataTypeZeroValue;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int BeginMenuDepth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int BeginComboDepth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiColorEditFlags ColorEditOptions;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ColorEditCurrentID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ColorEditSavedID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ColorEditSavedHue;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ColorEditSavedSat;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ColorEditSavedColor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector4 ColorPickerRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiComboPreviewData ComboPreviewData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImRect WindowResizeBorderExpectedRect;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WindowResizeRelativeMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short ScrollbarSeekMode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ScrollbarClickDeltaToGrabCenter;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float SliderGrabClickOffset;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float SliderCurrentAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SliderCurrentAccumDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DragCurrentAccumDirty;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DragCurrentAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DragSpeedDefaultRatio;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DisabledAlphaBackup;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short DisabledStackSize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public short TooltipOverrideCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* TooltipPreviousWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<byte> ClipboardHandlerData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<uint> MenusIdSubmittedThisFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTypingSelectState TypingSelectState;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPlatformImeData PlatformImeData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiPlatformImeData PlatformImeDataPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImTextureDataPtr> UserTextures;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDockContext DockContext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* DockNodeWindowMenuHandler;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte SettingsLoaded;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float SettingsDirtyTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer SettingsIniData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiSettingsHandler> SettingsHandlers;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImChunkStreamImGuiWindowSettings SettingsWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImChunkStreamImGuiTableSettings SettingsTables;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiContextHook> Hooks;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint HookIdNext;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* LocalizationTable_0;
		public unsafe byte* LocalizationTable_1;
		public unsafe byte* LocalizationTable_2;
		public unsafe byte* LocalizationTable_3;
		public unsafe byte* LocalizationTable_4;
		public unsafe byte* LocalizationTable_5;
		public unsafe byte* LocalizationTable_6;
		public unsafe byte* LocalizationTable_7;
		public unsafe byte* LocalizationTable_8;
		public unsafe byte* LocalizationTable_9;
		public unsafe byte* LocalizationTable_10;
		public unsafe byte* LocalizationTable_11;
		public unsafe byte* LocalizationTable_12;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte LogEnabled;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiLogFlags LogFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiWindow* LogWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImFileHandle LogFile;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer LogBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* LogNextPrefix;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* LogNextSuffix;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float LogLinePosY;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte LogLineFirstItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LogDepthRef;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LogDepthToExpand;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int LogDepthToExpandDefault;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* ErrorCallback;
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* ErrorCallbackUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 ErrorTooltipLockedPos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ErrorFirst;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int ErrorCountCurrentFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiErrorRecoveryState StackSizesInNewFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiErrorRecoveryState* StackSizesInBeginForCurrentWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DebugDrawIdConflictsCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDebugLogFlags DebugLogFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer DebugLogBuf;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextIndex DebugLogIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DebugLogSkippedErrors;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDebugLogFlags DebugLogAutoDisableFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DebugLogAutoDisableFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DebugLocateFrames;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DebugBreakInLocateId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DebugBreakKeyChord;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte DebugBeginReturnValueCullDepth;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DebugItemPickerActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte DebugItemPickerMouseButton;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint DebugItemPickerBreakId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DebugFlashStyleColorTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector4 DebugFlashStyleColorBackup;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMetricsConfig DebugMetricsConfig;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiIDStackTool DebugIDStackTool;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiDebugAllocInfo DebugAllocInfo;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiDockNode* DebugHoveredDockNode;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FramerateSecPerFrame_0;
		public float FramerateSecPerFrame_1;
		public float FramerateSecPerFrame_2;
		public float FramerateSecPerFrame_3;
		public float FramerateSecPerFrame_4;
		public float FramerateSecPerFrame_5;
		public float FramerateSecPerFrame_6;
		public float FramerateSecPerFrame_7;
		public float FramerateSecPerFrame_8;
		public float FramerateSecPerFrame_9;
		public float FramerateSecPerFrame_10;
		public float FramerateSecPerFrame_11;
		public float FramerateSecPerFrame_12;
		public float FramerateSecPerFrame_13;
		public float FramerateSecPerFrame_14;
		public float FramerateSecPerFrame_15;
		public float FramerateSecPerFrame_16;
		public float FramerateSecPerFrame_17;
		public float FramerateSecPerFrame_18;
		public float FramerateSecPerFrame_19;
		public float FramerateSecPerFrame_20;
		public float FramerateSecPerFrame_21;
		public float FramerateSecPerFrame_22;
		public float FramerateSecPerFrame_23;
		public float FramerateSecPerFrame_24;
		public float FramerateSecPerFrame_25;
		public float FramerateSecPerFrame_26;
		public float FramerateSecPerFrame_27;
		public float FramerateSecPerFrame_28;
		public float FramerateSecPerFrame_29;
		public float FramerateSecPerFrame_30;
		public float FramerateSecPerFrame_31;
		public float FramerateSecPerFrame_32;
		public float FramerateSecPerFrame_33;
		public float FramerateSecPerFrame_34;
		public float FramerateSecPerFrame_35;
		public float FramerateSecPerFrame_36;
		public float FramerateSecPerFrame_37;
		public float FramerateSecPerFrame_38;
		public float FramerateSecPerFrame_39;
		public float FramerateSecPerFrame_40;
		public float FramerateSecPerFrame_41;
		public float FramerateSecPerFrame_42;
		public float FramerateSecPerFrame_43;
		public float FramerateSecPerFrame_44;
		public float FramerateSecPerFrame_45;
		public float FramerateSecPerFrame_46;
		public float FramerateSecPerFrame_47;
		public float FramerateSecPerFrame_48;
		public float FramerateSecPerFrame_49;
		public float FramerateSecPerFrame_50;
		public float FramerateSecPerFrame_51;
		public float FramerateSecPerFrame_52;
		public float FramerateSecPerFrame_53;
		public float FramerateSecPerFrame_54;
		public float FramerateSecPerFrame_55;
		public float FramerateSecPerFrame_56;
		public float FramerateSecPerFrame_57;
		public float FramerateSecPerFrame_58;
		public float FramerateSecPerFrame_59;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FramerateSecPerFrameIdx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int FramerateSecPerFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float FramerateSecPerFrameAccum;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WantCaptureMouseNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WantCaptureKeyboardNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int WantTextInputNextFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<byte> TempBuffer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte TempKeychordName_0;
		public byte TempKeychordName_1;
		public byte TempKeychordName_2;
		public byte TempKeychordName_3;
		public byte TempKeychordName_4;
		public byte TempKeychordName_5;
		public byte TempKeychordName_6;
		public byte TempKeychordName_7;
		public byte TempKeychordName_8;
		public byte TempKeychordName_9;
		public byte TempKeychordName_10;
		public byte TempKeychordName_11;
		public byte TempKeychordName_12;
		public byte TempKeychordName_13;
		public byte TempKeychordName_14;
		public byte TempKeychordName_15;
		public byte TempKeychordName_16;
		public byte TempKeychordName_17;
		public byte TempKeychordName_18;
		public byte TempKeychordName_19;
		public byte TempKeychordName_20;
		public byte TempKeychordName_21;
		public byte TempKeychordName_22;
		public byte TempKeychordName_23;
		public byte TempKeychordName_24;
		public byte TempKeychordName_25;
		public byte TempKeychordName_26;
		public byte TempKeychordName_27;
		public byte TempKeychordName_28;
		public byte TempKeychordName_29;
		public byte TempKeychordName_30;
		public byte TempKeychordName_31;
		public byte TempKeychordName_32;
		public byte TempKeychordName_33;
		public byte TempKeychordName_34;
		public byte TempKeychordName_35;
		public byte TempKeychordName_36;
		public byte TempKeychordName_37;
		public byte TempKeychordName_38;
		public byte TempKeychordName_39;
		public byte TempKeychordName_40;
		public byte TempKeychordName_41;
		public byte TempKeychordName_42;
		public byte TempKeychordName_43;
		public byte TempKeychordName_44;
		public byte TempKeychordName_45;
		public byte TempKeychordName_46;
		public byte TempKeychordName_47;
		public byte TempKeychordName_48;
		public byte TempKeychordName_49;
		public byte TempKeychordName_50;
		public byte TempKeychordName_51;
		public byte TempKeychordName_52;
		public byte TempKeychordName_53;
		public byte TempKeychordName_54;
		public byte TempKeychordName_55;
		public byte TempKeychordName_56;
		public byte TempKeychordName_57;
		public byte TempKeychordName_58;
		public byte TempKeychordName_59;
		public byte TempKeychordName_60;
		public byte TempKeychordName_61;
		public byte TempKeychordName_62;
		public byte TempKeychordName_63;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContext(bool initialized = default, ImGuiIO io = default, ImGuiPlatformIO platformIo = default, ImGuiStyle style = default, ImGuiConfigFlags configFlagsCurrFrame = default, ImGuiConfigFlags configFlagsLastFrame = default, ImVector<ImFontAtlasPtr> fontAtlases = default, ImFontPtr font = default, ImFontBakedPtr fontBaked = default, float fontSize = default, float fontSizeBase = default, float fontBakedScale = default, float fontRasterizerDensity = default, float currentDpiScale = default, ImDrawListSharedData drawListSharedData = default, double time = default, int frameCount = default, int frameCountEnded = default, int frameCountPlatformEnded = default, int frameCountRendered = default, uint withinEndChildId = default, bool withinFrameScope = default, bool withinFrameScopeWithImplicitWindow = default, bool gcCompactAll = default, bool testEngineHookItems = default, void* testEngine = default, byte* contextName = default, ImVector<ImGuiInputEvent> inputEventsQueue = default, ImVector<ImGuiInputEvent> inputEventsTrail = default, ImGuiMouseSource inputEventsNextMouseSource = default, uint inputEventsNextEventId = default, ImVector<ImGuiWindowPtr> windows = default, ImVector<ImGuiWindowPtr> windowsFocusOrder = default, ImVector<ImGuiWindowPtr> windowsTempSortBuffer = default, ImVector<ImGuiWindowStackData> currentWindowStack = default, ImGuiStorage windowsById = default, int windowsActiveCount = default, float windowsBorderHoverPadding = default, uint debugBreakInWindow = default, ImGuiWindow* currentWindow = default, ImGuiWindow* hoveredWindow = default, ImGuiWindow* hoveredWindowUnderMovingWindow = default, ImGuiWindow* hoveredWindowBeforeClear = default, ImGuiWindow* movingWindow = default, ImGuiWindow* wheelingWindow = default, Vector2 wheelingWindowRefMousePos = default, int wheelingWindowStartFrame = default, int wheelingWindowScrolledFrame = default, float wheelingWindowReleaseTimer = default, Vector2 wheelingWindowWheelRemainder = default, Vector2 wheelingAxisAvg = default, uint debugDrawIdConflictsId = default, uint debugHookIdInfoId = default, uint hoveredId = default, uint hoveredIdPreviousFrame = default, int hoveredIdPreviousFrameItemCount = default, float hoveredIdTimer = default, float hoveredIdNotActiveTimer = default, bool hoveredIdAllowOverlap = default, bool hoveredIdIsDisabled = default, bool itemUnclipByLog = default, uint activeId = default, uint activeIdIsAlive = default, float activeIdTimer = default, bool activeIdIsJustActivated = default, bool activeIdAllowOverlap = default, bool activeIdNoClearOnFocusLoss = default, bool activeIdHasBeenPressedBefore = default, bool activeIdHasBeenEditedBefore = default, bool activeIdHasBeenEditedThisFrame = default, bool activeIdFromShortcut = default, uint activeIdDisabledId = default, int activeIdMouseButton = default, Vector2 activeIdClickOffset = default, ImGuiWindow* activeIdWindow = default, ImGuiInputSource activeIdSource = default, uint activeIdPreviousFrame = default, ImGuiDeactivatedItemData deactivatedItemData = default, ImGuiDataTypeStorage activeIdValueOnActivation = default, uint lastActiveId = default, float lastActiveIdTimer = default, double lastKeyModsChangeTime = default, double lastKeyModsChangeFromNoneTime = default, double lastKeyboardKeyPressTime = default, ImBitArrayForNamedKeys keysMayBeCharInput = default, ImGuiKeyOwnerData* keysOwnerData = default, ImGuiKeyRoutingTable keysRoutingTable = default, uint activeIdUsingNavDirMask = default, bool activeIdUsingAllKeyboardKeys = default, int debugBreakInShortcutRouting = default, uint currentFocusScopeId = default, ImGuiItemFlags currentItemFlags = default, uint debugLocateId = default, ImGuiNextItemData nextItemData = default, ImGuiLastItemData lastItemData = default, ImGuiNextWindowData nextWindowData = default, bool debugShowGroupRects = default, ImGuiCol debugFlashStyleColorIdx = default, ImVector<ImGuiColorMod> colorStack = default, ImVector<ImGuiStyleMod> styleVarStack = default, ImVector<ImFontStackData> fontStack = default, ImVector<ImGuiFocusScopeData> focusScopeStack = default, ImVector<ImGuiItemFlags> itemFlagsStack = default, ImVector<ImGuiGroupData> groupStack = default, ImVector<ImGuiPopupData> openPopupStack = default, ImVector<ImGuiPopupData> beginPopupStack = default, ImVector<ImGuiTreeNodeStackData> treeNodeStack = default, ImVector<ImGuiViewportPPtr> viewports = default, ImGuiViewportP* currentViewport = default, ImGuiViewportP* mouseViewport = default, ImGuiViewportP* mouseLastHoveredViewport = default, uint platformLastFocusedViewportId = default, ImGuiPlatformMonitor fallbackMonitor = default, ImRect platformMonitorsFullWorkRect = default, int viewportCreatedCount = default, int platformWindowsCreatedCount = default, int viewportFocusedStampCount = default, bool navCursorVisible = default, bool navHighlightItemUnderNav = default, bool navMousePosDirty = default, bool navIdIsAlive = default, uint navId = default, ImGuiWindow* navWindow = default, uint navFocusScopeId = default, ImGuiNavLayer navLayer = default, uint navActivateId = default, uint navActivateDownId = default, uint navActivatePressedId = default, ImGuiActivateFlags navActivateFlags = default, ImVector<ImGuiFocusScopeData> navFocusRoute = default, uint navHighlightActivatedId = default, float navHighlightActivatedTimer = default, uint navNextActivateId = default, ImGuiActivateFlags navNextActivateFlags = default, ImGuiInputSource navInputSource = default, long navLastValidSelectionUserData = default, sbyte navCursorHideFrames = default, bool navAnyRequest = default, bool navInitRequest = default, bool navInitRequestFromMove = default, ImGuiNavItemData navInitResult = default, bool navMoveSubmitted = default, bool navMoveScoringItems = default, bool navMoveForwardToNextFrame = default, ImGuiNavMoveFlags navMoveFlags = default, ImGuiScrollFlags navMoveScrollFlags = default, int navMoveKeyMods = default, ImGuiDir navMoveDir = default, ImGuiDir navMoveDirForDebug = default, ImGuiDir navMoveClipDir = default, ImRect navScoringRect = default, ImRect navScoringNoClipRect = default, int navScoringDebugCount = default, int navTabbingDir = default, int navTabbingCounter = default, ImGuiNavItemData navMoveResultLocal = default, ImGuiNavItemData navMoveResultLocalVisible = default, ImGuiNavItemData navMoveResultOther = default, ImGuiNavItemData navTabbingResultFirst = default, uint navJustMovedFromFocusScopeId = default, uint navJustMovedToId = default, uint navJustMovedToFocusScopeId = default, int navJustMovedToKeyMods = default, bool navJustMovedToIsTabbing = default, bool navJustMovedToHasSelectionData = default, bool configNavWindowingWithGamepad = default, int configNavWindowingKeyNext = default, int configNavWindowingKeyPrev = default, ImGuiWindow* navWindowingTarget = default, ImGuiWindow* navWindowingTargetAnim = default, ImGuiWindow* navWindowingListWindow = default, float navWindowingTimer = default, float navWindowingHighlightAlpha = default, ImGuiInputSource navWindowingInputSource = default, bool navWindowingToggleLayer = default, ImGuiKey navWindowingToggleKey = default, Vector2 navWindowingAccumDeltaPos = default, Vector2 navWindowingAccumDeltaSize = default, float dimBgRatio = default, bool dragDropActive = default, bool dragDropWithinSource = default, bool dragDropWithinTarget = default, ImGuiDragDropFlags dragDropSourceFlags = default, int dragDropSourceFrameCount = default, int dragDropMouseButton = default, ImGuiPayload dragDropPayload = default, ImRect dragDropTargetRect = default, ImRect dragDropTargetClipRect = default, uint dragDropTargetId = default, ImGuiDragDropFlags dragDropAcceptFlags = default, float dragDropAcceptIdCurrRectSurface = default, uint dragDropAcceptIdCurr = default, uint dragDropAcceptIdPrev = default, int dragDropAcceptFrameCount = default, uint dragDropHoldJustPressedId = default, ImVector<byte> dragDropPayloadBufHeap = default, byte* dragDropPayloadBufLocal = default, int clipperTempDataStacked = default, ImVector<ImGuiListClipperData> clipperTempData = default, ImGuiTable* currentTable = default, uint debugBreakInTable = default, int tablesTempDataStacked = default, ImVector<ImGuiTableTempData> tablesTempData = default, ImPoolImGuiTable tables = default, ImVector<float> tablesLastTimeActive = default, ImVector<ImDrawChannel> drawChannelsTempMergeBuffer = default, ImGuiTabBar* currentTabBar = default, ImPoolImGuiTabBar tabBars = default, ImVector<ImGuiPtrOrIndex> currentTabBarStack = default, ImVector<ImGuiShrinkWidthItem> shrinkWidthBuffer = default, ImGuiBoxSelectState boxSelectState = default, ImGuiMultiSelectTempData* currentMultiSelect = default, int multiSelectTempDataStacked = default, ImVector<ImGuiMultiSelectTempData> multiSelectTempData = default, ImPoolImGuiMultiSelectState multiSelectStorage = default, uint hoverItemDelayId = default, uint hoverItemDelayIdPreviousFrame = default, float hoverItemDelayTimer = default, float hoverItemDelayClearTimer = default, uint hoverItemUnlockedStationaryId = default, uint hoverWindowUnlockedStationaryId = default, ImGuiMouseCursor mouseCursor = default, float mouseStationaryTimer = default, Vector2 mouseLastValidPos = default, ImGuiInputTextState inputTextState = default, ImGuiTextIndex inputTextLineIndex = default, ImGuiInputTextDeactivatedState inputTextDeactivatedState = default, ImFontBaked inputTextPasswordFontBackupBaked = default, ImFontFlags inputTextPasswordFontBackupFlags = default, uint tempInputId = default, ImGuiDataTypeStorage dataTypeZeroValue = default, int beginMenuDepth = default, int beginComboDepth = default, ImGuiColorEditFlags colorEditOptions = default, uint colorEditCurrentId = default, uint colorEditSavedId = default, float colorEditSavedHue = default, float colorEditSavedSat = default, uint colorEditSavedColor = default, Vector4 colorPickerRef = default, ImGuiComboPreviewData comboPreviewData = default, ImRect windowResizeBorderExpectedRect = default, bool windowResizeRelativeMode = default, short scrollbarSeekMode = default, float scrollbarClickDeltaToGrabCenter = default, float sliderGrabClickOffset = default, float sliderCurrentAccum = default, bool sliderCurrentAccumDirty = default, bool dragCurrentAccumDirty = default, float dragCurrentAccum = default, float dragSpeedDefaultRatio = default, float disabledAlphaBackup = default, short disabledStackSize = default, short tooltipOverrideCount = default, ImGuiWindow* tooltipPreviousWindow = default, ImVector<byte> clipboardHandlerData = default, ImVector<uint> menusIdSubmittedThisFrame = default, ImGuiTypingSelectState typingSelectState = default, ImGuiPlatformImeData platformImeData = default, ImGuiPlatformImeData platformImeDataPrev = default, ImVector<ImTextureDataPtr> userTextures = default, ImGuiDockContext dockContext = default, delegate*<ImGuiContext*, ImGuiDockNode*, ImGuiTabBar*, void> dockNodeWindowMenuHandler = default, bool settingsLoaded = default, float settingsDirtyTimer = default, ImGuiTextBuffer settingsIniData = default, ImVector<ImGuiSettingsHandler> settingsHandlers = default, ImChunkStreamImGuiWindowSettings settingsWindows = default, ImChunkStreamImGuiTableSettings settingsTables = default, ImVector<ImGuiContextHook> hooks = default, uint hookIdNext = default, byte** localizationTable = default, bool logEnabled = default, ImGuiLogFlags logFlags = default, ImGuiWindow* logWindow = default, ImFileHandle logFile = default, ImGuiTextBuffer logBuffer = default, byte* logNextPrefix = default, byte* logNextSuffix = default, float logLinePosY = default, bool logLineFirstItem = default, int logDepthRef = default, int logDepthToExpand = default, int logDepthToExpandDefault = default, ImGuiErrorCallback errorCallback = default, void* errorCallbackUserData = default, Vector2 errorTooltipLockedPos = default, bool errorFirst = default, int errorCountCurrentFrame = default, ImGuiErrorRecoveryState stackSizesInNewFrame = default, ImGuiErrorRecoveryState* stackSizesInBeginForCurrentWindow = default, int debugDrawIdConflictsCount = default, ImGuiDebugLogFlags debugLogFlags = default, ImGuiTextBuffer debugLogBuf = default, ImGuiTextIndex debugLogIndex = default, int debugLogSkippedErrors = default, ImGuiDebugLogFlags debugLogAutoDisableFlags = default, byte debugLogAutoDisableFrames = default, byte debugLocateFrames = default, bool debugBreakInLocateId = default, int debugBreakKeyChord = default, sbyte debugBeginReturnValueCullDepth = default, bool debugItemPickerActive = default, byte debugItemPickerMouseButton = default, uint debugItemPickerBreakId = default, float debugFlashStyleColorTime = default, Vector4 debugFlashStyleColorBackup = default, ImGuiMetricsConfig debugMetricsConfig = default, ImGuiIDStackTool debugIdStackTool = default, ImGuiDebugAllocInfo debugAllocInfo = default, ImGuiDockNode* debugHoveredDockNode = default, float* framerateSecPerFrame = default, int framerateSecPerFrameIdx = default, int framerateSecPerFrameCount = default, float framerateSecPerFrameAccum = default, int wantCaptureMouseNextFrame = default, int wantCaptureKeyboardNextFrame = default, int wantTextInputNextFrame = default, ImVector<byte> tempBuffer = default, byte* tempKeychordName = default)
		{
			Initialized = initialized ? (byte)1 : (byte)0;
			IO = io;
			PlatformIO = platformIo;
			Style = style;
			ConfigFlagsCurrFrame = configFlagsCurrFrame;
			ConfigFlagsLastFrame = configFlagsLastFrame;
			FontAtlases = fontAtlases;
			Font = font;
			FontBaked = fontBaked;
			FontSize = fontSize;
			FontSizeBase = fontSizeBase;
			FontBakedScale = fontBakedScale;
			FontRasterizerDensity = fontRasterizerDensity;
			CurrentDpiScale = currentDpiScale;
			DrawListSharedData = drawListSharedData;
			Time = time;
			FrameCount = frameCount;
			FrameCountEnded = frameCountEnded;
			FrameCountPlatformEnded = frameCountPlatformEnded;
			FrameCountRendered = frameCountRendered;
			WithinEndChildID = withinEndChildId;
			WithinFrameScope = withinFrameScope ? (byte)1 : (byte)0;
			WithinFrameScopeWithImplicitWindow = withinFrameScopeWithImplicitWindow ? (byte)1 : (byte)0;
			GcCompactAll = gcCompactAll ? (byte)1 : (byte)0;
			TestEngineHookItems = testEngineHookItems ? (byte)1 : (byte)0;
			TestEngine = testEngine;
			if (contextName != default(byte*))
			{
				ContextName_0 = contextName[0];
				ContextName_1 = contextName[1];
				ContextName_2 = contextName[2];
				ContextName_3 = contextName[3];
				ContextName_4 = contextName[4];
				ContextName_5 = contextName[5];
				ContextName_6 = contextName[6];
				ContextName_7 = contextName[7];
				ContextName_8 = contextName[8];
				ContextName_9 = contextName[9];
				ContextName_10 = contextName[10];
				ContextName_11 = contextName[11];
				ContextName_12 = contextName[12];
				ContextName_13 = contextName[13];
				ContextName_14 = contextName[14];
				ContextName_15 = contextName[15];
			}
			InputEventsQueue = inputEventsQueue;
			InputEventsTrail = inputEventsTrail;
			InputEventsNextMouseSource = inputEventsNextMouseSource;
			InputEventsNextEventId = inputEventsNextEventId;
			Windows = windows;
			WindowsFocusOrder = windowsFocusOrder;
			WindowsTempSortBuffer = windowsTempSortBuffer;
			CurrentWindowStack = currentWindowStack;
			WindowsById = windowsById;
			WindowsActiveCount = windowsActiveCount;
			WindowsBorderHoverPadding = windowsBorderHoverPadding;
			DebugBreakInWindow = debugBreakInWindow;
			CurrentWindow = currentWindow;
			HoveredWindow = hoveredWindow;
			HoveredWindowUnderMovingWindow = hoveredWindowUnderMovingWindow;
			HoveredWindowBeforeClear = hoveredWindowBeforeClear;
			MovingWindow = movingWindow;
			WheelingWindow = wheelingWindow;
			WheelingWindowRefMousePos = wheelingWindowRefMousePos;
			WheelingWindowStartFrame = wheelingWindowStartFrame;
			WheelingWindowScrolledFrame = wheelingWindowScrolledFrame;
			WheelingWindowReleaseTimer = wheelingWindowReleaseTimer;
			WheelingWindowWheelRemainder = wheelingWindowWheelRemainder;
			WheelingAxisAvg = wheelingAxisAvg;
			DebugDrawIdConflictsId = debugDrawIdConflictsId;
			DebugHookIdInfoId = debugHookIdInfoId;
			HoveredId = hoveredId;
			HoveredIdPreviousFrame = hoveredIdPreviousFrame;
			HoveredIdPreviousFrameItemCount = hoveredIdPreviousFrameItemCount;
			HoveredIdTimer = hoveredIdTimer;
			HoveredIdNotActiveTimer = hoveredIdNotActiveTimer;
			HoveredIdAllowOverlap = hoveredIdAllowOverlap ? (byte)1 : (byte)0;
			HoveredIdIsDisabled = hoveredIdIsDisabled ? (byte)1 : (byte)0;
			ItemUnclipByLog = itemUnclipByLog ? (byte)1 : (byte)0;
			ActiveId = activeId;
			ActiveIdIsAlive = activeIdIsAlive;
			ActiveIdTimer = activeIdTimer;
			ActiveIdIsJustActivated = activeIdIsJustActivated ? (byte)1 : (byte)0;
			ActiveIdAllowOverlap = activeIdAllowOverlap ? (byte)1 : (byte)0;
			ActiveIdNoClearOnFocusLoss = activeIdNoClearOnFocusLoss ? (byte)1 : (byte)0;
			ActiveIdHasBeenPressedBefore = activeIdHasBeenPressedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedBefore = activeIdHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedThisFrame = activeIdHasBeenEditedThisFrame ? (byte)1 : (byte)0;
			ActiveIdFromShortcut = activeIdFromShortcut ? (byte)1 : (byte)0;
			ActiveIdDisabledId = activeIdDisabledId;
			ActiveIdMouseButton = activeIdMouseButton;
			ActiveIdClickOffset = activeIdClickOffset;
			ActiveIdWindow = activeIdWindow;
			ActiveIdSource = activeIdSource;
			ActiveIdPreviousFrame = activeIdPreviousFrame;
			DeactivatedItemData = deactivatedItemData;
			ActiveIdValueOnActivation = activeIdValueOnActivation;
			LastActiveId = lastActiveId;
			LastActiveIdTimer = lastActiveIdTimer;
			LastKeyModsChangeTime = lastKeyModsChangeTime;
			LastKeyModsChangeFromNoneTime = lastKeyModsChangeFromNoneTime;
			LastKeyboardKeyPressTime = lastKeyboardKeyPressTime;
			KeysMayBeCharInput = keysMayBeCharInput;
			if (keysOwnerData != default(ImGuiKeyOwnerData*))
			{
				KeysOwnerData_0 = keysOwnerData[0];
				KeysOwnerData_1 = keysOwnerData[1];
				KeysOwnerData_2 = keysOwnerData[2];
				KeysOwnerData_3 = keysOwnerData[3];
				KeysOwnerData_4 = keysOwnerData[4];
				KeysOwnerData_5 = keysOwnerData[5];
				KeysOwnerData_6 = keysOwnerData[6];
				KeysOwnerData_7 = keysOwnerData[7];
				KeysOwnerData_8 = keysOwnerData[8];
				KeysOwnerData_9 = keysOwnerData[9];
				KeysOwnerData_10 = keysOwnerData[10];
				KeysOwnerData_11 = keysOwnerData[11];
				KeysOwnerData_12 = keysOwnerData[12];
				KeysOwnerData_13 = keysOwnerData[13];
				KeysOwnerData_14 = keysOwnerData[14];
				KeysOwnerData_15 = keysOwnerData[15];
				KeysOwnerData_16 = keysOwnerData[16];
				KeysOwnerData_17 = keysOwnerData[17];
				KeysOwnerData_18 = keysOwnerData[18];
				KeysOwnerData_19 = keysOwnerData[19];
				KeysOwnerData_20 = keysOwnerData[20];
				KeysOwnerData_21 = keysOwnerData[21];
				KeysOwnerData_22 = keysOwnerData[22];
				KeysOwnerData_23 = keysOwnerData[23];
				KeysOwnerData_24 = keysOwnerData[24];
				KeysOwnerData_25 = keysOwnerData[25];
				KeysOwnerData_26 = keysOwnerData[26];
				KeysOwnerData_27 = keysOwnerData[27];
				KeysOwnerData_28 = keysOwnerData[28];
				KeysOwnerData_29 = keysOwnerData[29];
				KeysOwnerData_30 = keysOwnerData[30];
				KeysOwnerData_31 = keysOwnerData[31];
				KeysOwnerData_32 = keysOwnerData[32];
				KeysOwnerData_33 = keysOwnerData[33];
				KeysOwnerData_34 = keysOwnerData[34];
				KeysOwnerData_35 = keysOwnerData[35];
				KeysOwnerData_36 = keysOwnerData[36];
				KeysOwnerData_37 = keysOwnerData[37];
				KeysOwnerData_38 = keysOwnerData[38];
				KeysOwnerData_39 = keysOwnerData[39];
				KeysOwnerData_40 = keysOwnerData[40];
				KeysOwnerData_41 = keysOwnerData[41];
				KeysOwnerData_42 = keysOwnerData[42];
				KeysOwnerData_43 = keysOwnerData[43];
				KeysOwnerData_44 = keysOwnerData[44];
				KeysOwnerData_45 = keysOwnerData[45];
				KeysOwnerData_46 = keysOwnerData[46];
				KeysOwnerData_47 = keysOwnerData[47];
				KeysOwnerData_48 = keysOwnerData[48];
				KeysOwnerData_49 = keysOwnerData[49];
				KeysOwnerData_50 = keysOwnerData[50];
				KeysOwnerData_51 = keysOwnerData[51];
				KeysOwnerData_52 = keysOwnerData[52];
				KeysOwnerData_53 = keysOwnerData[53];
				KeysOwnerData_54 = keysOwnerData[54];
				KeysOwnerData_55 = keysOwnerData[55];
				KeysOwnerData_56 = keysOwnerData[56];
				KeysOwnerData_57 = keysOwnerData[57];
				KeysOwnerData_58 = keysOwnerData[58];
				KeysOwnerData_59 = keysOwnerData[59];
				KeysOwnerData_60 = keysOwnerData[60];
				KeysOwnerData_61 = keysOwnerData[61];
				KeysOwnerData_62 = keysOwnerData[62];
				KeysOwnerData_63 = keysOwnerData[63];
				KeysOwnerData_64 = keysOwnerData[64];
				KeysOwnerData_65 = keysOwnerData[65];
				KeysOwnerData_66 = keysOwnerData[66];
				KeysOwnerData_67 = keysOwnerData[67];
				KeysOwnerData_68 = keysOwnerData[68];
				KeysOwnerData_69 = keysOwnerData[69];
				KeysOwnerData_70 = keysOwnerData[70];
				KeysOwnerData_71 = keysOwnerData[71];
				KeysOwnerData_72 = keysOwnerData[72];
				KeysOwnerData_73 = keysOwnerData[73];
				KeysOwnerData_74 = keysOwnerData[74];
				KeysOwnerData_75 = keysOwnerData[75];
				KeysOwnerData_76 = keysOwnerData[76];
				KeysOwnerData_77 = keysOwnerData[77];
				KeysOwnerData_78 = keysOwnerData[78];
				KeysOwnerData_79 = keysOwnerData[79];
				KeysOwnerData_80 = keysOwnerData[80];
				KeysOwnerData_81 = keysOwnerData[81];
				KeysOwnerData_82 = keysOwnerData[82];
				KeysOwnerData_83 = keysOwnerData[83];
				KeysOwnerData_84 = keysOwnerData[84];
				KeysOwnerData_85 = keysOwnerData[85];
				KeysOwnerData_86 = keysOwnerData[86];
				KeysOwnerData_87 = keysOwnerData[87];
				KeysOwnerData_88 = keysOwnerData[88];
				KeysOwnerData_89 = keysOwnerData[89];
				KeysOwnerData_90 = keysOwnerData[90];
				KeysOwnerData_91 = keysOwnerData[91];
				KeysOwnerData_92 = keysOwnerData[92];
				KeysOwnerData_93 = keysOwnerData[93];
				KeysOwnerData_94 = keysOwnerData[94];
				KeysOwnerData_95 = keysOwnerData[95];
				KeysOwnerData_96 = keysOwnerData[96];
				KeysOwnerData_97 = keysOwnerData[97];
				KeysOwnerData_98 = keysOwnerData[98];
				KeysOwnerData_99 = keysOwnerData[99];
				KeysOwnerData_100 = keysOwnerData[100];
				KeysOwnerData_101 = keysOwnerData[101];
				KeysOwnerData_102 = keysOwnerData[102];
				KeysOwnerData_103 = keysOwnerData[103];
				KeysOwnerData_104 = keysOwnerData[104];
				KeysOwnerData_105 = keysOwnerData[105];
				KeysOwnerData_106 = keysOwnerData[106];
				KeysOwnerData_107 = keysOwnerData[107];
				KeysOwnerData_108 = keysOwnerData[108];
				KeysOwnerData_109 = keysOwnerData[109];
				KeysOwnerData_110 = keysOwnerData[110];
				KeysOwnerData_111 = keysOwnerData[111];
				KeysOwnerData_112 = keysOwnerData[112];
				KeysOwnerData_113 = keysOwnerData[113];
				KeysOwnerData_114 = keysOwnerData[114];
				KeysOwnerData_115 = keysOwnerData[115];
				KeysOwnerData_116 = keysOwnerData[116];
				KeysOwnerData_117 = keysOwnerData[117];
				KeysOwnerData_118 = keysOwnerData[118];
				KeysOwnerData_119 = keysOwnerData[119];
				KeysOwnerData_120 = keysOwnerData[120];
				KeysOwnerData_121 = keysOwnerData[121];
				KeysOwnerData_122 = keysOwnerData[122];
				KeysOwnerData_123 = keysOwnerData[123];
				KeysOwnerData_124 = keysOwnerData[124];
				KeysOwnerData_125 = keysOwnerData[125];
				KeysOwnerData_126 = keysOwnerData[126];
				KeysOwnerData_127 = keysOwnerData[127];
				KeysOwnerData_128 = keysOwnerData[128];
				KeysOwnerData_129 = keysOwnerData[129];
				KeysOwnerData_130 = keysOwnerData[130];
				KeysOwnerData_131 = keysOwnerData[131];
				KeysOwnerData_132 = keysOwnerData[132];
				KeysOwnerData_133 = keysOwnerData[133];
				KeysOwnerData_134 = keysOwnerData[134];
				KeysOwnerData_135 = keysOwnerData[135];
				KeysOwnerData_136 = keysOwnerData[136];
				KeysOwnerData_137 = keysOwnerData[137];
				KeysOwnerData_138 = keysOwnerData[138];
				KeysOwnerData_139 = keysOwnerData[139];
				KeysOwnerData_140 = keysOwnerData[140];
				KeysOwnerData_141 = keysOwnerData[141];
				KeysOwnerData_142 = keysOwnerData[142];
				KeysOwnerData_143 = keysOwnerData[143];
				KeysOwnerData_144 = keysOwnerData[144];
				KeysOwnerData_145 = keysOwnerData[145];
				KeysOwnerData_146 = keysOwnerData[146];
				KeysOwnerData_147 = keysOwnerData[147];
				KeysOwnerData_148 = keysOwnerData[148];
				KeysOwnerData_149 = keysOwnerData[149];
				KeysOwnerData_150 = keysOwnerData[150];
				KeysOwnerData_151 = keysOwnerData[151];
				KeysOwnerData_152 = keysOwnerData[152];
				KeysOwnerData_153 = keysOwnerData[153];
				KeysOwnerData_154 = keysOwnerData[154];
			}
			KeysRoutingTable = keysRoutingTable;
			ActiveIdUsingNavDirMask = activeIdUsingNavDirMask;
			ActiveIdUsingAllKeyboardKeys = activeIdUsingAllKeyboardKeys ? (byte)1 : (byte)0;
			DebugBreakInShortcutRouting = debugBreakInShortcutRouting;
			CurrentFocusScopeId = currentFocusScopeId;
			CurrentItemFlags = currentItemFlags;
			DebugLocateId = debugLocateId;
			NextItemData = nextItemData;
			LastItemData = lastItemData;
			NextWindowData = nextWindowData;
			DebugShowGroupRects = debugShowGroupRects ? (byte)1 : (byte)0;
			DebugFlashStyleColorIdx = debugFlashStyleColorIdx;
			ColorStack = colorStack;
			StyleVarStack = styleVarStack;
			FontStack = fontStack;
			FocusScopeStack = focusScopeStack;
			ItemFlagsStack = itemFlagsStack;
			GroupStack = groupStack;
			OpenPopupStack = openPopupStack;
			BeginPopupStack = beginPopupStack;
			TreeNodeStack = treeNodeStack;
			Viewports = viewports;
			CurrentViewport = currentViewport;
			MouseViewport = mouseViewport;
			MouseLastHoveredViewport = mouseLastHoveredViewport;
			PlatformLastFocusedViewportId = platformLastFocusedViewportId;
			FallbackMonitor = fallbackMonitor;
			PlatformMonitorsFullWorkRect = platformMonitorsFullWorkRect;
			ViewportCreatedCount = viewportCreatedCount;
			PlatformWindowsCreatedCount = platformWindowsCreatedCount;
			ViewportFocusedStampCount = viewportFocusedStampCount;
			NavCursorVisible = navCursorVisible ? (byte)1 : (byte)0;
			NavHighlightItemUnderNav = navHighlightItemUnderNav ? (byte)1 : (byte)0;
			NavMousePosDirty = navMousePosDirty ? (byte)1 : (byte)0;
			NavIdIsAlive = navIdIsAlive ? (byte)1 : (byte)0;
			NavId = navId;
			NavWindow = navWindow;
			NavFocusScopeId = navFocusScopeId;
			NavLayer = navLayer;
			NavActivateId = navActivateId;
			NavActivateDownId = navActivateDownId;
			NavActivatePressedId = navActivatePressedId;
			NavActivateFlags = navActivateFlags;
			NavFocusRoute = navFocusRoute;
			NavHighlightActivatedId = navHighlightActivatedId;
			NavHighlightActivatedTimer = navHighlightActivatedTimer;
			NavNextActivateId = navNextActivateId;
			NavNextActivateFlags = navNextActivateFlags;
			NavInputSource = navInputSource;
			NavLastValidSelectionUserData = navLastValidSelectionUserData;
			NavCursorHideFrames = navCursorHideFrames;
			NavAnyRequest = navAnyRequest ? (byte)1 : (byte)0;
			NavInitRequest = navInitRequest ? (byte)1 : (byte)0;
			NavInitRequestFromMove = navInitRequestFromMove ? (byte)1 : (byte)0;
			NavInitResult = navInitResult;
			NavMoveSubmitted = navMoveSubmitted ? (byte)1 : (byte)0;
			NavMoveScoringItems = navMoveScoringItems ? (byte)1 : (byte)0;
			NavMoveForwardToNextFrame = navMoveForwardToNextFrame ? (byte)1 : (byte)0;
			NavMoveFlags = navMoveFlags;
			NavMoveScrollFlags = navMoveScrollFlags;
			NavMoveKeyMods = navMoveKeyMods;
			NavMoveDir = navMoveDir;
			NavMoveDirForDebug = navMoveDirForDebug;
			NavMoveClipDir = navMoveClipDir;
			NavScoringRect = navScoringRect;
			NavScoringNoClipRect = navScoringNoClipRect;
			NavScoringDebugCount = navScoringDebugCount;
			NavTabbingDir = navTabbingDir;
			NavTabbingCounter = navTabbingCounter;
			NavMoveResultLocal = navMoveResultLocal;
			NavMoveResultLocalVisible = navMoveResultLocalVisible;
			NavMoveResultOther = navMoveResultOther;
			NavTabbingResultFirst = navTabbingResultFirst;
			NavJustMovedFromFocusScopeId = navJustMovedFromFocusScopeId;
			NavJustMovedToId = navJustMovedToId;
			NavJustMovedToFocusScopeId = navJustMovedToFocusScopeId;
			NavJustMovedToKeyMods = navJustMovedToKeyMods;
			NavJustMovedToIsTabbing = navJustMovedToIsTabbing ? (byte)1 : (byte)0;
			NavJustMovedToHasSelectionData = navJustMovedToHasSelectionData ? (byte)1 : (byte)0;
			ConfigNavWindowingWithGamepad = configNavWindowingWithGamepad ? (byte)1 : (byte)0;
			ConfigNavWindowingKeyNext = configNavWindowingKeyNext;
			ConfigNavWindowingKeyPrev = configNavWindowingKeyPrev;
			NavWindowingTarget = navWindowingTarget;
			NavWindowingTargetAnim = navWindowingTargetAnim;
			NavWindowingListWindow = navWindowingListWindow;
			NavWindowingTimer = navWindowingTimer;
			NavWindowingHighlightAlpha = navWindowingHighlightAlpha;
			NavWindowingInputSource = navWindowingInputSource;
			NavWindowingToggleLayer = navWindowingToggleLayer ? (byte)1 : (byte)0;
			NavWindowingToggleKey = navWindowingToggleKey;
			NavWindowingAccumDeltaPos = navWindowingAccumDeltaPos;
			NavWindowingAccumDeltaSize = navWindowingAccumDeltaSize;
			DimBgRatio = dimBgRatio;
			DragDropActive = dragDropActive ? (byte)1 : (byte)0;
			DragDropWithinSource = dragDropWithinSource ? (byte)1 : (byte)0;
			DragDropWithinTarget = dragDropWithinTarget ? (byte)1 : (byte)0;
			DragDropSourceFlags = dragDropSourceFlags;
			DragDropSourceFrameCount = dragDropSourceFrameCount;
			DragDropMouseButton = dragDropMouseButton;
			DragDropPayload = dragDropPayload;
			DragDropTargetRect = dragDropTargetRect;
			DragDropTargetClipRect = dragDropTargetClipRect;
			DragDropTargetId = dragDropTargetId;
			DragDropAcceptFlags = dragDropAcceptFlags;
			DragDropAcceptIdCurrRectSurface = dragDropAcceptIdCurrRectSurface;
			DragDropAcceptIdCurr = dragDropAcceptIdCurr;
			DragDropAcceptIdPrev = dragDropAcceptIdPrev;
			DragDropAcceptFrameCount = dragDropAcceptFrameCount;
			DragDropHoldJustPressedId = dragDropHoldJustPressedId;
			DragDropPayloadBufHeap = dragDropPayloadBufHeap;
			if (dragDropPayloadBufLocal != default(byte*))
			{
				DragDropPayloadBufLocal_0 = dragDropPayloadBufLocal[0];
				DragDropPayloadBufLocal_1 = dragDropPayloadBufLocal[1];
				DragDropPayloadBufLocal_2 = dragDropPayloadBufLocal[2];
				DragDropPayloadBufLocal_3 = dragDropPayloadBufLocal[3];
				DragDropPayloadBufLocal_4 = dragDropPayloadBufLocal[4];
				DragDropPayloadBufLocal_5 = dragDropPayloadBufLocal[5];
				DragDropPayloadBufLocal_6 = dragDropPayloadBufLocal[6];
				DragDropPayloadBufLocal_7 = dragDropPayloadBufLocal[7];
				DragDropPayloadBufLocal_8 = dragDropPayloadBufLocal[8];
				DragDropPayloadBufLocal_9 = dragDropPayloadBufLocal[9];
				DragDropPayloadBufLocal_10 = dragDropPayloadBufLocal[10];
				DragDropPayloadBufLocal_11 = dragDropPayloadBufLocal[11];
				DragDropPayloadBufLocal_12 = dragDropPayloadBufLocal[12];
				DragDropPayloadBufLocal_13 = dragDropPayloadBufLocal[13];
				DragDropPayloadBufLocal_14 = dragDropPayloadBufLocal[14];
				DragDropPayloadBufLocal_15 = dragDropPayloadBufLocal[15];
			}
			ClipperTempDataStacked = clipperTempDataStacked;
			ClipperTempData = clipperTempData;
			CurrentTable = currentTable;
			DebugBreakInTable = debugBreakInTable;
			TablesTempDataStacked = tablesTempDataStacked;
			TablesTempData = tablesTempData;
			Tables = tables;
			TablesLastTimeActive = tablesLastTimeActive;
			DrawChannelsTempMergeBuffer = drawChannelsTempMergeBuffer;
			CurrentTabBar = currentTabBar;
			TabBars = tabBars;
			CurrentTabBarStack = currentTabBarStack;
			ShrinkWidthBuffer = shrinkWidthBuffer;
			BoxSelectState = boxSelectState;
			CurrentMultiSelect = currentMultiSelect;
			MultiSelectTempDataStacked = multiSelectTempDataStacked;
			MultiSelectTempData = multiSelectTempData;
			MultiSelectStorage = multiSelectStorage;
			HoverItemDelayId = hoverItemDelayId;
			HoverItemDelayIdPreviousFrame = hoverItemDelayIdPreviousFrame;
			HoverItemDelayTimer = hoverItemDelayTimer;
			HoverItemDelayClearTimer = hoverItemDelayClearTimer;
			HoverItemUnlockedStationaryId = hoverItemUnlockedStationaryId;
			HoverWindowUnlockedStationaryId = hoverWindowUnlockedStationaryId;
			MouseCursor = mouseCursor;
			MouseStationaryTimer = mouseStationaryTimer;
			MouseLastValidPos = mouseLastValidPos;
			InputTextState = inputTextState;
			InputTextLineIndex = inputTextLineIndex;
			InputTextDeactivatedState = inputTextDeactivatedState;
			InputTextPasswordFontBackupBaked = inputTextPasswordFontBackupBaked;
			InputTextPasswordFontBackupFlags = inputTextPasswordFontBackupFlags;
			TempInputId = tempInputId;
			DataTypeZeroValue = dataTypeZeroValue;
			BeginMenuDepth = beginMenuDepth;
			BeginComboDepth = beginComboDepth;
			ColorEditOptions = colorEditOptions;
			ColorEditCurrentID = colorEditCurrentId;
			ColorEditSavedID = colorEditSavedId;
			ColorEditSavedHue = colorEditSavedHue;
			ColorEditSavedSat = colorEditSavedSat;
			ColorEditSavedColor = colorEditSavedColor;
			ColorPickerRef = colorPickerRef;
			ComboPreviewData = comboPreviewData;
			WindowResizeBorderExpectedRect = windowResizeBorderExpectedRect;
			WindowResizeRelativeMode = windowResizeRelativeMode ? (byte)1 : (byte)0;
			ScrollbarSeekMode = scrollbarSeekMode;
			ScrollbarClickDeltaToGrabCenter = scrollbarClickDeltaToGrabCenter;
			SliderGrabClickOffset = sliderGrabClickOffset;
			SliderCurrentAccum = sliderCurrentAccum;
			SliderCurrentAccumDirty = sliderCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccumDirty = dragCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccum = dragCurrentAccum;
			DragSpeedDefaultRatio = dragSpeedDefaultRatio;
			DisabledAlphaBackup = disabledAlphaBackup;
			DisabledStackSize = disabledStackSize;
			TooltipOverrideCount = tooltipOverrideCount;
			TooltipPreviousWindow = tooltipPreviousWindow;
			ClipboardHandlerData = clipboardHandlerData;
			MenusIdSubmittedThisFrame = menusIdSubmittedThisFrame;
			TypingSelectState = typingSelectState;
			PlatformImeData = platformImeData;
			PlatformImeDataPrev = platformImeDataPrev;
			UserTextures = userTextures;
			DockContext = dockContext;
			DockNodeWindowMenuHandler = (void*)dockNodeWindowMenuHandler;
			SettingsLoaded = settingsLoaded ? (byte)1 : (byte)0;
			SettingsDirtyTimer = settingsDirtyTimer;
			SettingsIniData = settingsIniData;
			SettingsHandlers = settingsHandlers;
			SettingsWindows = settingsWindows;
			SettingsTables = settingsTables;
			Hooks = hooks;
			HookIdNext = hookIdNext;
			if (localizationTable != default(byte**))
			{
				LocalizationTable_0 = localizationTable[0];
				LocalizationTable_1 = localizationTable[1];
				LocalizationTable_2 = localizationTable[2];
				LocalizationTable_3 = localizationTable[3];
				LocalizationTable_4 = localizationTable[4];
				LocalizationTable_5 = localizationTable[5];
				LocalizationTable_6 = localizationTable[6];
				LocalizationTable_7 = localizationTable[7];
				LocalizationTable_8 = localizationTable[8];
				LocalizationTable_9 = localizationTable[9];
				LocalizationTable_10 = localizationTable[10];
				LocalizationTable_11 = localizationTable[11];
				LocalizationTable_12 = localizationTable[12];
			}
			LogEnabled = logEnabled ? (byte)1 : (byte)0;
			LogFlags = logFlags;
			LogWindow = logWindow;
			LogFile = logFile;
			LogBuffer = logBuffer;
			LogNextPrefix = logNextPrefix;
			LogNextSuffix = logNextSuffix;
			LogLinePosY = logLinePosY;
			LogLineFirstItem = logLineFirstItem ? (byte)1 : (byte)0;
			LogDepthRef = logDepthRef;
			LogDepthToExpand = logDepthToExpand;
			LogDepthToExpandDefault = logDepthToExpandDefault;
			ErrorCallback = (void*)Marshal.GetFunctionPointerForDelegate(errorCallback);
			ErrorCallbackUserData = errorCallbackUserData;
			ErrorTooltipLockedPos = errorTooltipLockedPos;
			ErrorFirst = errorFirst ? (byte)1 : (byte)0;
			ErrorCountCurrentFrame = errorCountCurrentFrame;
			StackSizesInNewFrame = stackSizesInNewFrame;
			StackSizesInBeginForCurrentWindow = stackSizesInBeginForCurrentWindow;
			DebugDrawIdConflictsCount = debugDrawIdConflictsCount;
			DebugLogFlags = debugLogFlags;
			DebugLogBuf = debugLogBuf;
			DebugLogIndex = debugLogIndex;
			DebugLogSkippedErrors = debugLogSkippedErrors;
			DebugLogAutoDisableFlags = debugLogAutoDisableFlags;
			DebugLogAutoDisableFrames = debugLogAutoDisableFrames;
			DebugLocateFrames = debugLocateFrames;
			DebugBreakInLocateId = debugBreakInLocateId ? (byte)1 : (byte)0;
			DebugBreakKeyChord = debugBreakKeyChord;
			DebugBeginReturnValueCullDepth = debugBeginReturnValueCullDepth;
			DebugItemPickerActive = debugItemPickerActive ? (byte)1 : (byte)0;
			DebugItemPickerMouseButton = debugItemPickerMouseButton;
			DebugItemPickerBreakId = debugItemPickerBreakId;
			DebugFlashStyleColorTime = debugFlashStyleColorTime;
			DebugFlashStyleColorBackup = debugFlashStyleColorBackup;
			DebugMetricsConfig = debugMetricsConfig;
			DebugIDStackTool = debugIdStackTool;
			DebugAllocInfo = debugAllocInfo;
			DebugHoveredDockNode = debugHoveredDockNode;
			if (framerateSecPerFrame != default(float*))
			{
				FramerateSecPerFrame_0 = framerateSecPerFrame[0];
				FramerateSecPerFrame_1 = framerateSecPerFrame[1];
				FramerateSecPerFrame_2 = framerateSecPerFrame[2];
				FramerateSecPerFrame_3 = framerateSecPerFrame[3];
				FramerateSecPerFrame_4 = framerateSecPerFrame[4];
				FramerateSecPerFrame_5 = framerateSecPerFrame[5];
				FramerateSecPerFrame_6 = framerateSecPerFrame[6];
				FramerateSecPerFrame_7 = framerateSecPerFrame[7];
				FramerateSecPerFrame_8 = framerateSecPerFrame[8];
				FramerateSecPerFrame_9 = framerateSecPerFrame[9];
				FramerateSecPerFrame_10 = framerateSecPerFrame[10];
				FramerateSecPerFrame_11 = framerateSecPerFrame[11];
				FramerateSecPerFrame_12 = framerateSecPerFrame[12];
				FramerateSecPerFrame_13 = framerateSecPerFrame[13];
				FramerateSecPerFrame_14 = framerateSecPerFrame[14];
				FramerateSecPerFrame_15 = framerateSecPerFrame[15];
				FramerateSecPerFrame_16 = framerateSecPerFrame[16];
				FramerateSecPerFrame_17 = framerateSecPerFrame[17];
				FramerateSecPerFrame_18 = framerateSecPerFrame[18];
				FramerateSecPerFrame_19 = framerateSecPerFrame[19];
				FramerateSecPerFrame_20 = framerateSecPerFrame[20];
				FramerateSecPerFrame_21 = framerateSecPerFrame[21];
				FramerateSecPerFrame_22 = framerateSecPerFrame[22];
				FramerateSecPerFrame_23 = framerateSecPerFrame[23];
				FramerateSecPerFrame_24 = framerateSecPerFrame[24];
				FramerateSecPerFrame_25 = framerateSecPerFrame[25];
				FramerateSecPerFrame_26 = framerateSecPerFrame[26];
				FramerateSecPerFrame_27 = framerateSecPerFrame[27];
				FramerateSecPerFrame_28 = framerateSecPerFrame[28];
				FramerateSecPerFrame_29 = framerateSecPerFrame[29];
				FramerateSecPerFrame_30 = framerateSecPerFrame[30];
				FramerateSecPerFrame_31 = framerateSecPerFrame[31];
				FramerateSecPerFrame_32 = framerateSecPerFrame[32];
				FramerateSecPerFrame_33 = framerateSecPerFrame[33];
				FramerateSecPerFrame_34 = framerateSecPerFrame[34];
				FramerateSecPerFrame_35 = framerateSecPerFrame[35];
				FramerateSecPerFrame_36 = framerateSecPerFrame[36];
				FramerateSecPerFrame_37 = framerateSecPerFrame[37];
				FramerateSecPerFrame_38 = framerateSecPerFrame[38];
				FramerateSecPerFrame_39 = framerateSecPerFrame[39];
				FramerateSecPerFrame_40 = framerateSecPerFrame[40];
				FramerateSecPerFrame_41 = framerateSecPerFrame[41];
				FramerateSecPerFrame_42 = framerateSecPerFrame[42];
				FramerateSecPerFrame_43 = framerateSecPerFrame[43];
				FramerateSecPerFrame_44 = framerateSecPerFrame[44];
				FramerateSecPerFrame_45 = framerateSecPerFrame[45];
				FramerateSecPerFrame_46 = framerateSecPerFrame[46];
				FramerateSecPerFrame_47 = framerateSecPerFrame[47];
				FramerateSecPerFrame_48 = framerateSecPerFrame[48];
				FramerateSecPerFrame_49 = framerateSecPerFrame[49];
				FramerateSecPerFrame_50 = framerateSecPerFrame[50];
				FramerateSecPerFrame_51 = framerateSecPerFrame[51];
				FramerateSecPerFrame_52 = framerateSecPerFrame[52];
				FramerateSecPerFrame_53 = framerateSecPerFrame[53];
				FramerateSecPerFrame_54 = framerateSecPerFrame[54];
				FramerateSecPerFrame_55 = framerateSecPerFrame[55];
				FramerateSecPerFrame_56 = framerateSecPerFrame[56];
				FramerateSecPerFrame_57 = framerateSecPerFrame[57];
				FramerateSecPerFrame_58 = framerateSecPerFrame[58];
				FramerateSecPerFrame_59 = framerateSecPerFrame[59];
			}
			FramerateSecPerFrameIdx = framerateSecPerFrameIdx;
			FramerateSecPerFrameCount = framerateSecPerFrameCount;
			FramerateSecPerFrameAccum = framerateSecPerFrameAccum;
			WantCaptureMouseNextFrame = wantCaptureMouseNextFrame;
			WantCaptureKeyboardNextFrame = wantCaptureKeyboardNextFrame;
			WantTextInputNextFrame = wantTextInputNextFrame;
			TempBuffer = tempBuffer;
			if (tempKeychordName != default(byte*))
			{
				TempKeychordName_0 = tempKeychordName[0];
				TempKeychordName_1 = tempKeychordName[1];
				TempKeychordName_2 = tempKeychordName[2];
				TempKeychordName_3 = tempKeychordName[3];
				TempKeychordName_4 = tempKeychordName[4];
				TempKeychordName_5 = tempKeychordName[5];
				TempKeychordName_6 = tempKeychordName[6];
				TempKeychordName_7 = tempKeychordName[7];
				TempKeychordName_8 = tempKeychordName[8];
				TempKeychordName_9 = tempKeychordName[9];
				TempKeychordName_10 = tempKeychordName[10];
				TempKeychordName_11 = tempKeychordName[11];
				TempKeychordName_12 = tempKeychordName[12];
				TempKeychordName_13 = tempKeychordName[13];
				TempKeychordName_14 = tempKeychordName[14];
				TempKeychordName_15 = tempKeychordName[15];
				TempKeychordName_16 = tempKeychordName[16];
				TempKeychordName_17 = tempKeychordName[17];
				TempKeychordName_18 = tempKeychordName[18];
				TempKeychordName_19 = tempKeychordName[19];
				TempKeychordName_20 = tempKeychordName[20];
				TempKeychordName_21 = tempKeychordName[21];
				TempKeychordName_22 = tempKeychordName[22];
				TempKeychordName_23 = tempKeychordName[23];
				TempKeychordName_24 = tempKeychordName[24];
				TempKeychordName_25 = tempKeychordName[25];
				TempKeychordName_26 = tempKeychordName[26];
				TempKeychordName_27 = tempKeychordName[27];
				TempKeychordName_28 = tempKeychordName[28];
				TempKeychordName_29 = tempKeychordName[29];
				TempKeychordName_30 = tempKeychordName[30];
				TempKeychordName_31 = tempKeychordName[31];
				TempKeychordName_32 = tempKeychordName[32];
				TempKeychordName_33 = tempKeychordName[33];
				TempKeychordName_34 = tempKeychordName[34];
				TempKeychordName_35 = tempKeychordName[35];
				TempKeychordName_36 = tempKeychordName[36];
				TempKeychordName_37 = tempKeychordName[37];
				TempKeychordName_38 = tempKeychordName[38];
				TempKeychordName_39 = tempKeychordName[39];
				TempKeychordName_40 = tempKeychordName[40];
				TempKeychordName_41 = tempKeychordName[41];
				TempKeychordName_42 = tempKeychordName[42];
				TempKeychordName_43 = tempKeychordName[43];
				TempKeychordName_44 = tempKeychordName[44];
				TempKeychordName_45 = tempKeychordName[45];
				TempKeychordName_46 = tempKeychordName[46];
				TempKeychordName_47 = tempKeychordName[47];
				TempKeychordName_48 = tempKeychordName[48];
				TempKeychordName_49 = tempKeychordName[49];
				TempKeychordName_50 = tempKeychordName[50];
				TempKeychordName_51 = tempKeychordName[51];
				TempKeychordName_52 = tempKeychordName[52];
				TempKeychordName_53 = tempKeychordName[53];
				TempKeychordName_54 = tempKeychordName[54];
				TempKeychordName_55 = tempKeychordName[55];
				TempKeychordName_56 = tempKeychordName[56];
				TempKeychordName_57 = tempKeychordName[57];
				TempKeychordName_58 = tempKeychordName[58];
				TempKeychordName_59 = tempKeychordName[59];
				TempKeychordName_60 = tempKeychordName[60];
				TempKeychordName_61 = tempKeychordName[61];
				TempKeychordName_62 = tempKeychordName[62];
				TempKeychordName_63 = tempKeychordName[63];
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContext(bool initialized = default, ImGuiIO io = default, ImGuiPlatformIO platformIo = default, ImGuiStyle style = default, ImGuiConfigFlags configFlagsCurrFrame = default, ImGuiConfigFlags configFlagsLastFrame = default, ImVector<ImFontAtlasPtr> fontAtlases = default, ImFontPtr font = default, ImFontBakedPtr fontBaked = default, float fontSize = default, float fontSizeBase = default, float fontBakedScale = default, float fontRasterizerDensity = default, float currentDpiScale = default, ImDrawListSharedData drawListSharedData = default, double time = default, int frameCount = default, int frameCountEnded = default, int frameCountPlatformEnded = default, int frameCountRendered = default, uint withinEndChildId = default, bool withinFrameScope = default, bool withinFrameScopeWithImplicitWindow = default, bool gcCompactAll = default, bool testEngineHookItems = default, void* testEngine = default, Span<byte> contextName = default, ImVector<ImGuiInputEvent> inputEventsQueue = default, ImVector<ImGuiInputEvent> inputEventsTrail = default, ImGuiMouseSource inputEventsNextMouseSource = default, uint inputEventsNextEventId = default, ImVector<ImGuiWindowPtr> windows = default, ImVector<ImGuiWindowPtr> windowsFocusOrder = default, ImVector<ImGuiWindowPtr> windowsTempSortBuffer = default, ImVector<ImGuiWindowStackData> currentWindowStack = default, ImGuiStorage windowsById = default, int windowsActiveCount = default, float windowsBorderHoverPadding = default, uint debugBreakInWindow = default, ImGuiWindow* currentWindow = default, ImGuiWindow* hoveredWindow = default, ImGuiWindow* hoveredWindowUnderMovingWindow = default, ImGuiWindow* hoveredWindowBeforeClear = default, ImGuiWindow* movingWindow = default, ImGuiWindow* wheelingWindow = default, Vector2 wheelingWindowRefMousePos = default, int wheelingWindowStartFrame = default, int wheelingWindowScrolledFrame = default, float wheelingWindowReleaseTimer = default, Vector2 wheelingWindowWheelRemainder = default, Vector2 wheelingAxisAvg = default, uint debugDrawIdConflictsId = default, uint debugHookIdInfoId = default, uint hoveredId = default, uint hoveredIdPreviousFrame = default, int hoveredIdPreviousFrameItemCount = default, float hoveredIdTimer = default, float hoveredIdNotActiveTimer = default, bool hoveredIdAllowOverlap = default, bool hoveredIdIsDisabled = default, bool itemUnclipByLog = default, uint activeId = default, uint activeIdIsAlive = default, float activeIdTimer = default, bool activeIdIsJustActivated = default, bool activeIdAllowOverlap = default, bool activeIdNoClearOnFocusLoss = default, bool activeIdHasBeenPressedBefore = default, bool activeIdHasBeenEditedBefore = default, bool activeIdHasBeenEditedThisFrame = default, bool activeIdFromShortcut = default, uint activeIdDisabledId = default, int activeIdMouseButton = default, Vector2 activeIdClickOffset = default, ImGuiWindow* activeIdWindow = default, ImGuiInputSource activeIdSource = default, uint activeIdPreviousFrame = default, ImGuiDeactivatedItemData deactivatedItemData = default, ImGuiDataTypeStorage activeIdValueOnActivation = default, uint lastActiveId = default, float lastActiveIdTimer = default, double lastKeyModsChangeTime = default, double lastKeyModsChangeFromNoneTime = default, double lastKeyboardKeyPressTime = default, ImBitArrayForNamedKeys keysMayBeCharInput = default, Span<ImGuiKeyOwnerData> keysOwnerData = default, ImGuiKeyRoutingTable keysRoutingTable = default, uint activeIdUsingNavDirMask = default, bool activeIdUsingAllKeyboardKeys = default, int debugBreakInShortcutRouting = default, uint currentFocusScopeId = default, ImGuiItemFlags currentItemFlags = default, uint debugLocateId = default, ImGuiNextItemData nextItemData = default, ImGuiLastItemData lastItemData = default, ImGuiNextWindowData nextWindowData = default, bool debugShowGroupRects = default, ImGuiCol debugFlashStyleColorIdx = default, ImVector<ImGuiColorMod> colorStack = default, ImVector<ImGuiStyleMod> styleVarStack = default, ImVector<ImFontStackData> fontStack = default, ImVector<ImGuiFocusScopeData> focusScopeStack = default, ImVector<ImGuiItemFlags> itemFlagsStack = default, ImVector<ImGuiGroupData> groupStack = default, ImVector<ImGuiPopupData> openPopupStack = default, ImVector<ImGuiPopupData> beginPopupStack = default, ImVector<ImGuiTreeNodeStackData> treeNodeStack = default, ImVector<ImGuiViewportPPtr> viewports = default, ImGuiViewportP* currentViewport = default, ImGuiViewportP* mouseViewport = default, ImGuiViewportP* mouseLastHoveredViewport = default, uint platformLastFocusedViewportId = default, ImGuiPlatformMonitor fallbackMonitor = default, ImRect platformMonitorsFullWorkRect = default, int viewportCreatedCount = default, int platformWindowsCreatedCount = default, int viewportFocusedStampCount = default, bool navCursorVisible = default, bool navHighlightItemUnderNav = default, bool navMousePosDirty = default, bool navIdIsAlive = default, uint navId = default, ImGuiWindow* navWindow = default, uint navFocusScopeId = default, ImGuiNavLayer navLayer = default, uint navActivateId = default, uint navActivateDownId = default, uint navActivatePressedId = default, ImGuiActivateFlags navActivateFlags = default, ImVector<ImGuiFocusScopeData> navFocusRoute = default, uint navHighlightActivatedId = default, float navHighlightActivatedTimer = default, uint navNextActivateId = default, ImGuiActivateFlags navNextActivateFlags = default, ImGuiInputSource navInputSource = default, long navLastValidSelectionUserData = default, sbyte navCursorHideFrames = default, bool navAnyRequest = default, bool navInitRequest = default, bool navInitRequestFromMove = default, ImGuiNavItemData navInitResult = default, bool navMoveSubmitted = default, bool navMoveScoringItems = default, bool navMoveForwardToNextFrame = default, ImGuiNavMoveFlags navMoveFlags = default, ImGuiScrollFlags navMoveScrollFlags = default, int navMoveKeyMods = default, ImGuiDir navMoveDir = default, ImGuiDir navMoveDirForDebug = default, ImGuiDir navMoveClipDir = default, ImRect navScoringRect = default, ImRect navScoringNoClipRect = default, int navScoringDebugCount = default, int navTabbingDir = default, int navTabbingCounter = default, ImGuiNavItemData navMoveResultLocal = default, ImGuiNavItemData navMoveResultLocalVisible = default, ImGuiNavItemData navMoveResultOther = default, ImGuiNavItemData navTabbingResultFirst = default, uint navJustMovedFromFocusScopeId = default, uint navJustMovedToId = default, uint navJustMovedToFocusScopeId = default, int navJustMovedToKeyMods = default, bool navJustMovedToIsTabbing = default, bool navJustMovedToHasSelectionData = default, bool configNavWindowingWithGamepad = default, int configNavWindowingKeyNext = default, int configNavWindowingKeyPrev = default, ImGuiWindow* navWindowingTarget = default, ImGuiWindow* navWindowingTargetAnim = default, ImGuiWindow* navWindowingListWindow = default, float navWindowingTimer = default, float navWindowingHighlightAlpha = default, ImGuiInputSource navWindowingInputSource = default, bool navWindowingToggleLayer = default, ImGuiKey navWindowingToggleKey = default, Vector2 navWindowingAccumDeltaPos = default, Vector2 navWindowingAccumDeltaSize = default, float dimBgRatio = default, bool dragDropActive = default, bool dragDropWithinSource = default, bool dragDropWithinTarget = default, ImGuiDragDropFlags dragDropSourceFlags = default, int dragDropSourceFrameCount = default, int dragDropMouseButton = default, ImGuiPayload dragDropPayload = default, ImRect dragDropTargetRect = default, ImRect dragDropTargetClipRect = default, uint dragDropTargetId = default, ImGuiDragDropFlags dragDropAcceptFlags = default, float dragDropAcceptIdCurrRectSurface = default, uint dragDropAcceptIdCurr = default, uint dragDropAcceptIdPrev = default, int dragDropAcceptFrameCount = default, uint dragDropHoldJustPressedId = default, ImVector<byte> dragDropPayloadBufHeap = default, Span<byte> dragDropPayloadBufLocal = default, int clipperTempDataStacked = default, ImVector<ImGuiListClipperData> clipperTempData = default, ImGuiTable* currentTable = default, uint debugBreakInTable = default, int tablesTempDataStacked = default, ImVector<ImGuiTableTempData> tablesTempData = default, ImPoolImGuiTable tables = default, ImVector<float> tablesLastTimeActive = default, ImVector<ImDrawChannel> drawChannelsTempMergeBuffer = default, ImGuiTabBar* currentTabBar = default, ImPoolImGuiTabBar tabBars = default, ImVector<ImGuiPtrOrIndex> currentTabBarStack = default, ImVector<ImGuiShrinkWidthItem> shrinkWidthBuffer = default, ImGuiBoxSelectState boxSelectState = default, ImGuiMultiSelectTempData* currentMultiSelect = default, int multiSelectTempDataStacked = default, ImVector<ImGuiMultiSelectTempData> multiSelectTempData = default, ImPoolImGuiMultiSelectState multiSelectStorage = default, uint hoverItemDelayId = default, uint hoverItemDelayIdPreviousFrame = default, float hoverItemDelayTimer = default, float hoverItemDelayClearTimer = default, uint hoverItemUnlockedStationaryId = default, uint hoverWindowUnlockedStationaryId = default, ImGuiMouseCursor mouseCursor = default, float mouseStationaryTimer = default, Vector2 mouseLastValidPos = default, ImGuiInputTextState inputTextState = default, ImGuiTextIndex inputTextLineIndex = default, ImGuiInputTextDeactivatedState inputTextDeactivatedState = default, ImFontBaked inputTextPasswordFontBackupBaked = default, ImFontFlags inputTextPasswordFontBackupFlags = default, uint tempInputId = default, ImGuiDataTypeStorage dataTypeZeroValue = default, int beginMenuDepth = default, int beginComboDepth = default, ImGuiColorEditFlags colorEditOptions = default, uint colorEditCurrentId = default, uint colorEditSavedId = default, float colorEditSavedHue = default, float colorEditSavedSat = default, uint colorEditSavedColor = default, Vector4 colorPickerRef = default, ImGuiComboPreviewData comboPreviewData = default, ImRect windowResizeBorderExpectedRect = default, bool windowResizeRelativeMode = default, short scrollbarSeekMode = default, float scrollbarClickDeltaToGrabCenter = default, float sliderGrabClickOffset = default, float sliderCurrentAccum = default, bool sliderCurrentAccumDirty = default, bool dragCurrentAccumDirty = default, float dragCurrentAccum = default, float dragSpeedDefaultRatio = default, float disabledAlphaBackup = default, short disabledStackSize = default, short tooltipOverrideCount = default, ImGuiWindow* tooltipPreviousWindow = default, ImVector<byte> clipboardHandlerData = default, ImVector<uint> menusIdSubmittedThisFrame = default, ImGuiTypingSelectState typingSelectState = default, ImGuiPlatformImeData platformImeData = default, ImGuiPlatformImeData platformImeDataPrev = default, ImVector<ImTextureDataPtr> userTextures = default, ImGuiDockContext dockContext = default, delegate*<ImGuiContext*, ImGuiDockNode*, ImGuiTabBar*, void> dockNodeWindowMenuHandler = default, bool settingsLoaded = default, float settingsDirtyTimer = default, ImGuiTextBuffer settingsIniData = default, ImVector<ImGuiSettingsHandler> settingsHandlers = default, ImChunkStreamImGuiWindowSettings settingsWindows = default, ImChunkStreamImGuiTableSettings settingsTables = default, ImVector<ImGuiContextHook> hooks = default, uint hookIdNext = default, Span<Pointer<byte>> localizationTable = default, bool logEnabled = default, ImGuiLogFlags logFlags = default, ImGuiWindow* logWindow = default, ImFileHandle logFile = default, ImGuiTextBuffer logBuffer = default, byte* logNextPrefix = default, byte* logNextSuffix = default, float logLinePosY = default, bool logLineFirstItem = default, int logDepthRef = default, int logDepthToExpand = default, int logDepthToExpandDefault = default, ImGuiErrorCallback errorCallback = default, void* errorCallbackUserData = default, Vector2 errorTooltipLockedPos = default, bool errorFirst = default, int errorCountCurrentFrame = default, ImGuiErrorRecoveryState stackSizesInNewFrame = default, ImGuiErrorRecoveryState* stackSizesInBeginForCurrentWindow = default, int debugDrawIdConflictsCount = default, ImGuiDebugLogFlags debugLogFlags = default, ImGuiTextBuffer debugLogBuf = default, ImGuiTextIndex debugLogIndex = default, int debugLogSkippedErrors = default, ImGuiDebugLogFlags debugLogAutoDisableFlags = default, byte debugLogAutoDisableFrames = default, byte debugLocateFrames = default, bool debugBreakInLocateId = default, int debugBreakKeyChord = default, sbyte debugBeginReturnValueCullDepth = default, bool debugItemPickerActive = default, byte debugItemPickerMouseButton = default, uint debugItemPickerBreakId = default, float debugFlashStyleColorTime = default, Vector4 debugFlashStyleColorBackup = default, ImGuiMetricsConfig debugMetricsConfig = default, ImGuiIDStackTool debugIdStackTool = default, ImGuiDebugAllocInfo debugAllocInfo = default, ImGuiDockNode* debugHoveredDockNode = default, Span<float> framerateSecPerFrame = default, int framerateSecPerFrameIdx = default, int framerateSecPerFrameCount = default, float framerateSecPerFrameAccum = default, int wantCaptureMouseNextFrame = default, int wantCaptureKeyboardNextFrame = default, int wantTextInputNextFrame = default, ImVector<byte> tempBuffer = default, Span<byte> tempKeychordName = default)
		{
			Initialized = initialized ? (byte)1 : (byte)0;
			IO = io;
			PlatformIO = platformIo;
			Style = style;
			ConfigFlagsCurrFrame = configFlagsCurrFrame;
			ConfigFlagsLastFrame = configFlagsLastFrame;
			FontAtlases = fontAtlases;
			Font = font;
			FontBaked = fontBaked;
			FontSize = fontSize;
			FontSizeBase = fontSizeBase;
			FontBakedScale = fontBakedScale;
			FontRasterizerDensity = fontRasterizerDensity;
			CurrentDpiScale = currentDpiScale;
			DrawListSharedData = drawListSharedData;
			Time = time;
			FrameCount = frameCount;
			FrameCountEnded = frameCountEnded;
			FrameCountPlatformEnded = frameCountPlatformEnded;
			FrameCountRendered = frameCountRendered;
			WithinEndChildID = withinEndChildId;
			WithinFrameScope = withinFrameScope ? (byte)1 : (byte)0;
			WithinFrameScopeWithImplicitWindow = withinFrameScopeWithImplicitWindow ? (byte)1 : (byte)0;
			GcCompactAll = gcCompactAll ? (byte)1 : (byte)0;
			TestEngineHookItems = testEngineHookItems ? (byte)1 : (byte)0;
			TestEngine = testEngine;
			if (contextName != default(Span<byte>))
			{
				ContextName_0 = contextName[0];
				ContextName_1 = contextName[1];
				ContextName_2 = contextName[2];
				ContextName_3 = contextName[3];
				ContextName_4 = contextName[4];
				ContextName_5 = contextName[5];
				ContextName_6 = contextName[6];
				ContextName_7 = contextName[7];
				ContextName_8 = contextName[8];
				ContextName_9 = contextName[9];
				ContextName_10 = contextName[10];
				ContextName_11 = contextName[11];
				ContextName_12 = contextName[12];
				ContextName_13 = contextName[13];
				ContextName_14 = contextName[14];
				ContextName_15 = contextName[15];
			}
			InputEventsQueue = inputEventsQueue;
			InputEventsTrail = inputEventsTrail;
			InputEventsNextMouseSource = inputEventsNextMouseSource;
			InputEventsNextEventId = inputEventsNextEventId;
			Windows = windows;
			WindowsFocusOrder = windowsFocusOrder;
			WindowsTempSortBuffer = windowsTempSortBuffer;
			CurrentWindowStack = currentWindowStack;
			WindowsById = windowsById;
			WindowsActiveCount = windowsActiveCount;
			WindowsBorderHoverPadding = windowsBorderHoverPadding;
			DebugBreakInWindow = debugBreakInWindow;
			CurrentWindow = currentWindow;
			HoveredWindow = hoveredWindow;
			HoveredWindowUnderMovingWindow = hoveredWindowUnderMovingWindow;
			HoveredWindowBeforeClear = hoveredWindowBeforeClear;
			MovingWindow = movingWindow;
			WheelingWindow = wheelingWindow;
			WheelingWindowRefMousePos = wheelingWindowRefMousePos;
			WheelingWindowStartFrame = wheelingWindowStartFrame;
			WheelingWindowScrolledFrame = wheelingWindowScrolledFrame;
			WheelingWindowReleaseTimer = wheelingWindowReleaseTimer;
			WheelingWindowWheelRemainder = wheelingWindowWheelRemainder;
			WheelingAxisAvg = wheelingAxisAvg;
			DebugDrawIdConflictsId = debugDrawIdConflictsId;
			DebugHookIdInfoId = debugHookIdInfoId;
			HoveredId = hoveredId;
			HoveredIdPreviousFrame = hoveredIdPreviousFrame;
			HoveredIdPreviousFrameItemCount = hoveredIdPreviousFrameItemCount;
			HoveredIdTimer = hoveredIdTimer;
			HoveredIdNotActiveTimer = hoveredIdNotActiveTimer;
			HoveredIdAllowOverlap = hoveredIdAllowOverlap ? (byte)1 : (byte)0;
			HoveredIdIsDisabled = hoveredIdIsDisabled ? (byte)1 : (byte)0;
			ItemUnclipByLog = itemUnclipByLog ? (byte)1 : (byte)0;
			ActiveId = activeId;
			ActiveIdIsAlive = activeIdIsAlive;
			ActiveIdTimer = activeIdTimer;
			ActiveIdIsJustActivated = activeIdIsJustActivated ? (byte)1 : (byte)0;
			ActiveIdAllowOverlap = activeIdAllowOverlap ? (byte)1 : (byte)0;
			ActiveIdNoClearOnFocusLoss = activeIdNoClearOnFocusLoss ? (byte)1 : (byte)0;
			ActiveIdHasBeenPressedBefore = activeIdHasBeenPressedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedBefore = activeIdHasBeenEditedBefore ? (byte)1 : (byte)0;
			ActiveIdHasBeenEditedThisFrame = activeIdHasBeenEditedThisFrame ? (byte)1 : (byte)0;
			ActiveIdFromShortcut = activeIdFromShortcut ? (byte)1 : (byte)0;
			ActiveIdDisabledId = activeIdDisabledId;
			ActiveIdMouseButton = activeIdMouseButton;
			ActiveIdClickOffset = activeIdClickOffset;
			ActiveIdWindow = activeIdWindow;
			ActiveIdSource = activeIdSource;
			ActiveIdPreviousFrame = activeIdPreviousFrame;
			DeactivatedItemData = deactivatedItemData;
			ActiveIdValueOnActivation = activeIdValueOnActivation;
			LastActiveId = lastActiveId;
			LastActiveIdTimer = lastActiveIdTimer;
			LastKeyModsChangeTime = lastKeyModsChangeTime;
			LastKeyModsChangeFromNoneTime = lastKeyModsChangeFromNoneTime;
			LastKeyboardKeyPressTime = lastKeyboardKeyPressTime;
			KeysMayBeCharInput = keysMayBeCharInput;
			if (keysOwnerData != default(Span<ImGuiKeyOwnerData>))
			{
				KeysOwnerData_0 = keysOwnerData[0];
				KeysOwnerData_1 = keysOwnerData[1];
				KeysOwnerData_2 = keysOwnerData[2];
				KeysOwnerData_3 = keysOwnerData[3];
				KeysOwnerData_4 = keysOwnerData[4];
				KeysOwnerData_5 = keysOwnerData[5];
				KeysOwnerData_6 = keysOwnerData[6];
				KeysOwnerData_7 = keysOwnerData[7];
				KeysOwnerData_8 = keysOwnerData[8];
				KeysOwnerData_9 = keysOwnerData[9];
				KeysOwnerData_10 = keysOwnerData[10];
				KeysOwnerData_11 = keysOwnerData[11];
				KeysOwnerData_12 = keysOwnerData[12];
				KeysOwnerData_13 = keysOwnerData[13];
				KeysOwnerData_14 = keysOwnerData[14];
				KeysOwnerData_15 = keysOwnerData[15];
				KeysOwnerData_16 = keysOwnerData[16];
				KeysOwnerData_17 = keysOwnerData[17];
				KeysOwnerData_18 = keysOwnerData[18];
				KeysOwnerData_19 = keysOwnerData[19];
				KeysOwnerData_20 = keysOwnerData[20];
				KeysOwnerData_21 = keysOwnerData[21];
				KeysOwnerData_22 = keysOwnerData[22];
				KeysOwnerData_23 = keysOwnerData[23];
				KeysOwnerData_24 = keysOwnerData[24];
				KeysOwnerData_25 = keysOwnerData[25];
				KeysOwnerData_26 = keysOwnerData[26];
				KeysOwnerData_27 = keysOwnerData[27];
				KeysOwnerData_28 = keysOwnerData[28];
				KeysOwnerData_29 = keysOwnerData[29];
				KeysOwnerData_30 = keysOwnerData[30];
				KeysOwnerData_31 = keysOwnerData[31];
				KeysOwnerData_32 = keysOwnerData[32];
				KeysOwnerData_33 = keysOwnerData[33];
				KeysOwnerData_34 = keysOwnerData[34];
				KeysOwnerData_35 = keysOwnerData[35];
				KeysOwnerData_36 = keysOwnerData[36];
				KeysOwnerData_37 = keysOwnerData[37];
				KeysOwnerData_38 = keysOwnerData[38];
				KeysOwnerData_39 = keysOwnerData[39];
				KeysOwnerData_40 = keysOwnerData[40];
				KeysOwnerData_41 = keysOwnerData[41];
				KeysOwnerData_42 = keysOwnerData[42];
				KeysOwnerData_43 = keysOwnerData[43];
				KeysOwnerData_44 = keysOwnerData[44];
				KeysOwnerData_45 = keysOwnerData[45];
				KeysOwnerData_46 = keysOwnerData[46];
				KeysOwnerData_47 = keysOwnerData[47];
				KeysOwnerData_48 = keysOwnerData[48];
				KeysOwnerData_49 = keysOwnerData[49];
				KeysOwnerData_50 = keysOwnerData[50];
				KeysOwnerData_51 = keysOwnerData[51];
				KeysOwnerData_52 = keysOwnerData[52];
				KeysOwnerData_53 = keysOwnerData[53];
				KeysOwnerData_54 = keysOwnerData[54];
				KeysOwnerData_55 = keysOwnerData[55];
				KeysOwnerData_56 = keysOwnerData[56];
				KeysOwnerData_57 = keysOwnerData[57];
				KeysOwnerData_58 = keysOwnerData[58];
				KeysOwnerData_59 = keysOwnerData[59];
				KeysOwnerData_60 = keysOwnerData[60];
				KeysOwnerData_61 = keysOwnerData[61];
				KeysOwnerData_62 = keysOwnerData[62];
				KeysOwnerData_63 = keysOwnerData[63];
				KeysOwnerData_64 = keysOwnerData[64];
				KeysOwnerData_65 = keysOwnerData[65];
				KeysOwnerData_66 = keysOwnerData[66];
				KeysOwnerData_67 = keysOwnerData[67];
				KeysOwnerData_68 = keysOwnerData[68];
				KeysOwnerData_69 = keysOwnerData[69];
				KeysOwnerData_70 = keysOwnerData[70];
				KeysOwnerData_71 = keysOwnerData[71];
				KeysOwnerData_72 = keysOwnerData[72];
				KeysOwnerData_73 = keysOwnerData[73];
				KeysOwnerData_74 = keysOwnerData[74];
				KeysOwnerData_75 = keysOwnerData[75];
				KeysOwnerData_76 = keysOwnerData[76];
				KeysOwnerData_77 = keysOwnerData[77];
				KeysOwnerData_78 = keysOwnerData[78];
				KeysOwnerData_79 = keysOwnerData[79];
				KeysOwnerData_80 = keysOwnerData[80];
				KeysOwnerData_81 = keysOwnerData[81];
				KeysOwnerData_82 = keysOwnerData[82];
				KeysOwnerData_83 = keysOwnerData[83];
				KeysOwnerData_84 = keysOwnerData[84];
				KeysOwnerData_85 = keysOwnerData[85];
				KeysOwnerData_86 = keysOwnerData[86];
				KeysOwnerData_87 = keysOwnerData[87];
				KeysOwnerData_88 = keysOwnerData[88];
				KeysOwnerData_89 = keysOwnerData[89];
				KeysOwnerData_90 = keysOwnerData[90];
				KeysOwnerData_91 = keysOwnerData[91];
				KeysOwnerData_92 = keysOwnerData[92];
				KeysOwnerData_93 = keysOwnerData[93];
				KeysOwnerData_94 = keysOwnerData[94];
				KeysOwnerData_95 = keysOwnerData[95];
				KeysOwnerData_96 = keysOwnerData[96];
				KeysOwnerData_97 = keysOwnerData[97];
				KeysOwnerData_98 = keysOwnerData[98];
				KeysOwnerData_99 = keysOwnerData[99];
				KeysOwnerData_100 = keysOwnerData[100];
				KeysOwnerData_101 = keysOwnerData[101];
				KeysOwnerData_102 = keysOwnerData[102];
				KeysOwnerData_103 = keysOwnerData[103];
				KeysOwnerData_104 = keysOwnerData[104];
				KeysOwnerData_105 = keysOwnerData[105];
				KeysOwnerData_106 = keysOwnerData[106];
				KeysOwnerData_107 = keysOwnerData[107];
				KeysOwnerData_108 = keysOwnerData[108];
				KeysOwnerData_109 = keysOwnerData[109];
				KeysOwnerData_110 = keysOwnerData[110];
				KeysOwnerData_111 = keysOwnerData[111];
				KeysOwnerData_112 = keysOwnerData[112];
				KeysOwnerData_113 = keysOwnerData[113];
				KeysOwnerData_114 = keysOwnerData[114];
				KeysOwnerData_115 = keysOwnerData[115];
				KeysOwnerData_116 = keysOwnerData[116];
				KeysOwnerData_117 = keysOwnerData[117];
				KeysOwnerData_118 = keysOwnerData[118];
				KeysOwnerData_119 = keysOwnerData[119];
				KeysOwnerData_120 = keysOwnerData[120];
				KeysOwnerData_121 = keysOwnerData[121];
				KeysOwnerData_122 = keysOwnerData[122];
				KeysOwnerData_123 = keysOwnerData[123];
				KeysOwnerData_124 = keysOwnerData[124];
				KeysOwnerData_125 = keysOwnerData[125];
				KeysOwnerData_126 = keysOwnerData[126];
				KeysOwnerData_127 = keysOwnerData[127];
				KeysOwnerData_128 = keysOwnerData[128];
				KeysOwnerData_129 = keysOwnerData[129];
				KeysOwnerData_130 = keysOwnerData[130];
				KeysOwnerData_131 = keysOwnerData[131];
				KeysOwnerData_132 = keysOwnerData[132];
				KeysOwnerData_133 = keysOwnerData[133];
				KeysOwnerData_134 = keysOwnerData[134];
				KeysOwnerData_135 = keysOwnerData[135];
				KeysOwnerData_136 = keysOwnerData[136];
				KeysOwnerData_137 = keysOwnerData[137];
				KeysOwnerData_138 = keysOwnerData[138];
				KeysOwnerData_139 = keysOwnerData[139];
				KeysOwnerData_140 = keysOwnerData[140];
				KeysOwnerData_141 = keysOwnerData[141];
				KeysOwnerData_142 = keysOwnerData[142];
				KeysOwnerData_143 = keysOwnerData[143];
				KeysOwnerData_144 = keysOwnerData[144];
				KeysOwnerData_145 = keysOwnerData[145];
				KeysOwnerData_146 = keysOwnerData[146];
				KeysOwnerData_147 = keysOwnerData[147];
				KeysOwnerData_148 = keysOwnerData[148];
				KeysOwnerData_149 = keysOwnerData[149];
				KeysOwnerData_150 = keysOwnerData[150];
				KeysOwnerData_151 = keysOwnerData[151];
				KeysOwnerData_152 = keysOwnerData[152];
				KeysOwnerData_153 = keysOwnerData[153];
				KeysOwnerData_154 = keysOwnerData[154];
			}
			KeysRoutingTable = keysRoutingTable;
			ActiveIdUsingNavDirMask = activeIdUsingNavDirMask;
			ActiveIdUsingAllKeyboardKeys = activeIdUsingAllKeyboardKeys ? (byte)1 : (byte)0;
			DebugBreakInShortcutRouting = debugBreakInShortcutRouting;
			CurrentFocusScopeId = currentFocusScopeId;
			CurrentItemFlags = currentItemFlags;
			DebugLocateId = debugLocateId;
			NextItemData = nextItemData;
			LastItemData = lastItemData;
			NextWindowData = nextWindowData;
			DebugShowGroupRects = debugShowGroupRects ? (byte)1 : (byte)0;
			DebugFlashStyleColorIdx = debugFlashStyleColorIdx;
			ColorStack = colorStack;
			StyleVarStack = styleVarStack;
			FontStack = fontStack;
			FocusScopeStack = focusScopeStack;
			ItemFlagsStack = itemFlagsStack;
			GroupStack = groupStack;
			OpenPopupStack = openPopupStack;
			BeginPopupStack = beginPopupStack;
			TreeNodeStack = treeNodeStack;
			Viewports = viewports;
			CurrentViewport = currentViewport;
			MouseViewport = mouseViewport;
			MouseLastHoveredViewport = mouseLastHoveredViewport;
			PlatformLastFocusedViewportId = platformLastFocusedViewportId;
			FallbackMonitor = fallbackMonitor;
			PlatformMonitorsFullWorkRect = platformMonitorsFullWorkRect;
			ViewportCreatedCount = viewportCreatedCount;
			PlatformWindowsCreatedCount = platformWindowsCreatedCount;
			ViewportFocusedStampCount = viewportFocusedStampCount;
			NavCursorVisible = navCursorVisible ? (byte)1 : (byte)0;
			NavHighlightItemUnderNav = navHighlightItemUnderNav ? (byte)1 : (byte)0;
			NavMousePosDirty = navMousePosDirty ? (byte)1 : (byte)0;
			NavIdIsAlive = navIdIsAlive ? (byte)1 : (byte)0;
			NavId = navId;
			NavWindow = navWindow;
			NavFocusScopeId = navFocusScopeId;
			NavLayer = navLayer;
			NavActivateId = navActivateId;
			NavActivateDownId = navActivateDownId;
			NavActivatePressedId = navActivatePressedId;
			NavActivateFlags = navActivateFlags;
			NavFocusRoute = navFocusRoute;
			NavHighlightActivatedId = navHighlightActivatedId;
			NavHighlightActivatedTimer = navHighlightActivatedTimer;
			NavNextActivateId = navNextActivateId;
			NavNextActivateFlags = navNextActivateFlags;
			NavInputSource = navInputSource;
			NavLastValidSelectionUserData = navLastValidSelectionUserData;
			NavCursorHideFrames = navCursorHideFrames;
			NavAnyRequest = navAnyRequest ? (byte)1 : (byte)0;
			NavInitRequest = navInitRequest ? (byte)1 : (byte)0;
			NavInitRequestFromMove = navInitRequestFromMove ? (byte)1 : (byte)0;
			NavInitResult = navInitResult;
			NavMoveSubmitted = navMoveSubmitted ? (byte)1 : (byte)0;
			NavMoveScoringItems = navMoveScoringItems ? (byte)1 : (byte)0;
			NavMoveForwardToNextFrame = navMoveForwardToNextFrame ? (byte)1 : (byte)0;
			NavMoveFlags = navMoveFlags;
			NavMoveScrollFlags = navMoveScrollFlags;
			NavMoveKeyMods = navMoveKeyMods;
			NavMoveDir = navMoveDir;
			NavMoveDirForDebug = navMoveDirForDebug;
			NavMoveClipDir = navMoveClipDir;
			NavScoringRect = navScoringRect;
			NavScoringNoClipRect = navScoringNoClipRect;
			NavScoringDebugCount = navScoringDebugCount;
			NavTabbingDir = navTabbingDir;
			NavTabbingCounter = navTabbingCounter;
			NavMoveResultLocal = navMoveResultLocal;
			NavMoveResultLocalVisible = navMoveResultLocalVisible;
			NavMoveResultOther = navMoveResultOther;
			NavTabbingResultFirst = navTabbingResultFirst;
			NavJustMovedFromFocusScopeId = navJustMovedFromFocusScopeId;
			NavJustMovedToId = navJustMovedToId;
			NavJustMovedToFocusScopeId = navJustMovedToFocusScopeId;
			NavJustMovedToKeyMods = navJustMovedToKeyMods;
			NavJustMovedToIsTabbing = navJustMovedToIsTabbing ? (byte)1 : (byte)0;
			NavJustMovedToHasSelectionData = navJustMovedToHasSelectionData ? (byte)1 : (byte)0;
			ConfigNavWindowingWithGamepad = configNavWindowingWithGamepad ? (byte)1 : (byte)0;
			ConfigNavWindowingKeyNext = configNavWindowingKeyNext;
			ConfigNavWindowingKeyPrev = configNavWindowingKeyPrev;
			NavWindowingTarget = navWindowingTarget;
			NavWindowingTargetAnim = navWindowingTargetAnim;
			NavWindowingListWindow = navWindowingListWindow;
			NavWindowingTimer = navWindowingTimer;
			NavWindowingHighlightAlpha = navWindowingHighlightAlpha;
			NavWindowingInputSource = navWindowingInputSource;
			NavWindowingToggleLayer = navWindowingToggleLayer ? (byte)1 : (byte)0;
			NavWindowingToggleKey = navWindowingToggleKey;
			NavWindowingAccumDeltaPos = navWindowingAccumDeltaPos;
			NavWindowingAccumDeltaSize = navWindowingAccumDeltaSize;
			DimBgRatio = dimBgRatio;
			DragDropActive = dragDropActive ? (byte)1 : (byte)0;
			DragDropWithinSource = dragDropWithinSource ? (byte)1 : (byte)0;
			DragDropWithinTarget = dragDropWithinTarget ? (byte)1 : (byte)0;
			DragDropSourceFlags = dragDropSourceFlags;
			DragDropSourceFrameCount = dragDropSourceFrameCount;
			DragDropMouseButton = dragDropMouseButton;
			DragDropPayload = dragDropPayload;
			DragDropTargetRect = dragDropTargetRect;
			DragDropTargetClipRect = dragDropTargetClipRect;
			DragDropTargetId = dragDropTargetId;
			DragDropAcceptFlags = dragDropAcceptFlags;
			DragDropAcceptIdCurrRectSurface = dragDropAcceptIdCurrRectSurface;
			DragDropAcceptIdCurr = dragDropAcceptIdCurr;
			DragDropAcceptIdPrev = dragDropAcceptIdPrev;
			DragDropAcceptFrameCount = dragDropAcceptFrameCount;
			DragDropHoldJustPressedId = dragDropHoldJustPressedId;
			DragDropPayloadBufHeap = dragDropPayloadBufHeap;
			if (dragDropPayloadBufLocal != default(Span<byte>))
			{
				DragDropPayloadBufLocal_0 = dragDropPayloadBufLocal[0];
				DragDropPayloadBufLocal_1 = dragDropPayloadBufLocal[1];
				DragDropPayloadBufLocal_2 = dragDropPayloadBufLocal[2];
				DragDropPayloadBufLocal_3 = dragDropPayloadBufLocal[3];
				DragDropPayloadBufLocal_4 = dragDropPayloadBufLocal[4];
				DragDropPayloadBufLocal_5 = dragDropPayloadBufLocal[5];
				DragDropPayloadBufLocal_6 = dragDropPayloadBufLocal[6];
				DragDropPayloadBufLocal_7 = dragDropPayloadBufLocal[7];
				DragDropPayloadBufLocal_8 = dragDropPayloadBufLocal[8];
				DragDropPayloadBufLocal_9 = dragDropPayloadBufLocal[9];
				DragDropPayloadBufLocal_10 = dragDropPayloadBufLocal[10];
				DragDropPayloadBufLocal_11 = dragDropPayloadBufLocal[11];
				DragDropPayloadBufLocal_12 = dragDropPayloadBufLocal[12];
				DragDropPayloadBufLocal_13 = dragDropPayloadBufLocal[13];
				DragDropPayloadBufLocal_14 = dragDropPayloadBufLocal[14];
				DragDropPayloadBufLocal_15 = dragDropPayloadBufLocal[15];
			}
			ClipperTempDataStacked = clipperTempDataStacked;
			ClipperTempData = clipperTempData;
			CurrentTable = currentTable;
			DebugBreakInTable = debugBreakInTable;
			TablesTempDataStacked = tablesTempDataStacked;
			TablesTempData = tablesTempData;
			Tables = tables;
			TablesLastTimeActive = tablesLastTimeActive;
			DrawChannelsTempMergeBuffer = drawChannelsTempMergeBuffer;
			CurrentTabBar = currentTabBar;
			TabBars = tabBars;
			CurrentTabBarStack = currentTabBarStack;
			ShrinkWidthBuffer = shrinkWidthBuffer;
			BoxSelectState = boxSelectState;
			CurrentMultiSelect = currentMultiSelect;
			MultiSelectTempDataStacked = multiSelectTempDataStacked;
			MultiSelectTempData = multiSelectTempData;
			MultiSelectStorage = multiSelectStorage;
			HoverItemDelayId = hoverItemDelayId;
			HoverItemDelayIdPreviousFrame = hoverItemDelayIdPreviousFrame;
			HoverItemDelayTimer = hoverItemDelayTimer;
			HoverItemDelayClearTimer = hoverItemDelayClearTimer;
			HoverItemUnlockedStationaryId = hoverItemUnlockedStationaryId;
			HoverWindowUnlockedStationaryId = hoverWindowUnlockedStationaryId;
			MouseCursor = mouseCursor;
			MouseStationaryTimer = mouseStationaryTimer;
			MouseLastValidPos = mouseLastValidPos;
			InputTextState = inputTextState;
			InputTextLineIndex = inputTextLineIndex;
			InputTextDeactivatedState = inputTextDeactivatedState;
			InputTextPasswordFontBackupBaked = inputTextPasswordFontBackupBaked;
			InputTextPasswordFontBackupFlags = inputTextPasswordFontBackupFlags;
			TempInputId = tempInputId;
			DataTypeZeroValue = dataTypeZeroValue;
			BeginMenuDepth = beginMenuDepth;
			BeginComboDepth = beginComboDepth;
			ColorEditOptions = colorEditOptions;
			ColorEditCurrentID = colorEditCurrentId;
			ColorEditSavedID = colorEditSavedId;
			ColorEditSavedHue = colorEditSavedHue;
			ColorEditSavedSat = colorEditSavedSat;
			ColorEditSavedColor = colorEditSavedColor;
			ColorPickerRef = colorPickerRef;
			ComboPreviewData = comboPreviewData;
			WindowResizeBorderExpectedRect = windowResizeBorderExpectedRect;
			WindowResizeRelativeMode = windowResizeRelativeMode ? (byte)1 : (byte)0;
			ScrollbarSeekMode = scrollbarSeekMode;
			ScrollbarClickDeltaToGrabCenter = scrollbarClickDeltaToGrabCenter;
			SliderGrabClickOffset = sliderGrabClickOffset;
			SliderCurrentAccum = sliderCurrentAccum;
			SliderCurrentAccumDirty = sliderCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccumDirty = dragCurrentAccumDirty ? (byte)1 : (byte)0;
			DragCurrentAccum = dragCurrentAccum;
			DragSpeedDefaultRatio = dragSpeedDefaultRatio;
			DisabledAlphaBackup = disabledAlphaBackup;
			DisabledStackSize = disabledStackSize;
			TooltipOverrideCount = tooltipOverrideCount;
			TooltipPreviousWindow = tooltipPreviousWindow;
			ClipboardHandlerData = clipboardHandlerData;
			MenusIdSubmittedThisFrame = menusIdSubmittedThisFrame;
			TypingSelectState = typingSelectState;
			PlatformImeData = platformImeData;
			PlatformImeDataPrev = platformImeDataPrev;
			UserTextures = userTextures;
			DockContext = dockContext;
			DockNodeWindowMenuHandler = (void*)dockNodeWindowMenuHandler;
			SettingsLoaded = settingsLoaded ? (byte)1 : (byte)0;
			SettingsDirtyTimer = settingsDirtyTimer;
			SettingsIniData = settingsIniData;
			SettingsHandlers = settingsHandlers;
			SettingsWindows = settingsWindows;
			SettingsTables = settingsTables;
			Hooks = hooks;
			HookIdNext = hookIdNext;
			if (localizationTable != default(Span<Pointer<byte>>))
			{
				LocalizationTable_0 = localizationTable[0];
				LocalizationTable_1 = localizationTable[1];
				LocalizationTable_2 = localizationTable[2];
				LocalizationTable_3 = localizationTable[3];
				LocalizationTable_4 = localizationTable[4];
				LocalizationTable_5 = localizationTable[5];
				LocalizationTable_6 = localizationTable[6];
				LocalizationTable_7 = localizationTable[7];
				LocalizationTable_8 = localizationTable[8];
				LocalizationTable_9 = localizationTable[9];
				LocalizationTable_10 = localizationTable[10];
				LocalizationTable_11 = localizationTable[11];
				LocalizationTable_12 = localizationTable[12];
			}
			LogEnabled = logEnabled ? (byte)1 : (byte)0;
			LogFlags = logFlags;
			LogWindow = logWindow;
			LogFile = logFile;
			LogBuffer = logBuffer;
			LogNextPrefix = logNextPrefix;
			LogNextSuffix = logNextSuffix;
			LogLinePosY = logLinePosY;
			LogLineFirstItem = logLineFirstItem ? (byte)1 : (byte)0;
			LogDepthRef = logDepthRef;
			LogDepthToExpand = logDepthToExpand;
			LogDepthToExpandDefault = logDepthToExpandDefault;
			ErrorCallback = (void*)Marshal.GetFunctionPointerForDelegate(errorCallback);
			ErrorCallbackUserData = errorCallbackUserData;
			ErrorTooltipLockedPos = errorTooltipLockedPos;
			ErrorFirst = errorFirst ? (byte)1 : (byte)0;
			ErrorCountCurrentFrame = errorCountCurrentFrame;
			StackSizesInNewFrame = stackSizesInNewFrame;
			StackSizesInBeginForCurrentWindow = stackSizesInBeginForCurrentWindow;
			DebugDrawIdConflictsCount = debugDrawIdConflictsCount;
			DebugLogFlags = debugLogFlags;
			DebugLogBuf = debugLogBuf;
			DebugLogIndex = debugLogIndex;
			DebugLogSkippedErrors = debugLogSkippedErrors;
			DebugLogAutoDisableFlags = debugLogAutoDisableFlags;
			DebugLogAutoDisableFrames = debugLogAutoDisableFrames;
			DebugLocateFrames = debugLocateFrames;
			DebugBreakInLocateId = debugBreakInLocateId ? (byte)1 : (byte)0;
			DebugBreakKeyChord = debugBreakKeyChord;
			DebugBeginReturnValueCullDepth = debugBeginReturnValueCullDepth;
			DebugItemPickerActive = debugItemPickerActive ? (byte)1 : (byte)0;
			DebugItemPickerMouseButton = debugItemPickerMouseButton;
			DebugItemPickerBreakId = debugItemPickerBreakId;
			DebugFlashStyleColorTime = debugFlashStyleColorTime;
			DebugFlashStyleColorBackup = debugFlashStyleColorBackup;
			DebugMetricsConfig = debugMetricsConfig;
			DebugIDStackTool = debugIdStackTool;
			DebugAllocInfo = debugAllocInfo;
			DebugHoveredDockNode = debugHoveredDockNode;
			if (framerateSecPerFrame != default(Span<float>))
			{
				FramerateSecPerFrame_0 = framerateSecPerFrame[0];
				FramerateSecPerFrame_1 = framerateSecPerFrame[1];
				FramerateSecPerFrame_2 = framerateSecPerFrame[2];
				FramerateSecPerFrame_3 = framerateSecPerFrame[3];
				FramerateSecPerFrame_4 = framerateSecPerFrame[4];
				FramerateSecPerFrame_5 = framerateSecPerFrame[5];
				FramerateSecPerFrame_6 = framerateSecPerFrame[6];
				FramerateSecPerFrame_7 = framerateSecPerFrame[7];
				FramerateSecPerFrame_8 = framerateSecPerFrame[8];
				FramerateSecPerFrame_9 = framerateSecPerFrame[9];
				FramerateSecPerFrame_10 = framerateSecPerFrame[10];
				FramerateSecPerFrame_11 = framerateSecPerFrame[11];
				FramerateSecPerFrame_12 = framerateSecPerFrame[12];
				FramerateSecPerFrame_13 = framerateSecPerFrame[13];
				FramerateSecPerFrame_14 = framerateSecPerFrame[14];
				FramerateSecPerFrame_15 = framerateSecPerFrame[15];
				FramerateSecPerFrame_16 = framerateSecPerFrame[16];
				FramerateSecPerFrame_17 = framerateSecPerFrame[17];
				FramerateSecPerFrame_18 = framerateSecPerFrame[18];
				FramerateSecPerFrame_19 = framerateSecPerFrame[19];
				FramerateSecPerFrame_20 = framerateSecPerFrame[20];
				FramerateSecPerFrame_21 = framerateSecPerFrame[21];
				FramerateSecPerFrame_22 = framerateSecPerFrame[22];
				FramerateSecPerFrame_23 = framerateSecPerFrame[23];
				FramerateSecPerFrame_24 = framerateSecPerFrame[24];
				FramerateSecPerFrame_25 = framerateSecPerFrame[25];
				FramerateSecPerFrame_26 = framerateSecPerFrame[26];
				FramerateSecPerFrame_27 = framerateSecPerFrame[27];
				FramerateSecPerFrame_28 = framerateSecPerFrame[28];
				FramerateSecPerFrame_29 = framerateSecPerFrame[29];
				FramerateSecPerFrame_30 = framerateSecPerFrame[30];
				FramerateSecPerFrame_31 = framerateSecPerFrame[31];
				FramerateSecPerFrame_32 = framerateSecPerFrame[32];
				FramerateSecPerFrame_33 = framerateSecPerFrame[33];
				FramerateSecPerFrame_34 = framerateSecPerFrame[34];
				FramerateSecPerFrame_35 = framerateSecPerFrame[35];
				FramerateSecPerFrame_36 = framerateSecPerFrame[36];
				FramerateSecPerFrame_37 = framerateSecPerFrame[37];
				FramerateSecPerFrame_38 = framerateSecPerFrame[38];
				FramerateSecPerFrame_39 = framerateSecPerFrame[39];
				FramerateSecPerFrame_40 = framerateSecPerFrame[40];
				FramerateSecPerFrame_41 = framerateSecPerFrame[41];
				FramerateSecPerFrame_42 = framerateSecPerFrame[42];
				FramerateSecPerFrame_43 = framerateSecPerFrame[43];
				FramerateSecPerFrame_44 = framerateSecPerFrame[44];
				FramerateSecPerFrame_45 = framerateSecPerFrame[45];
				FramerateSecPerFrame_46 = framerateSecPerFrame[46];
				FramerateSecPerFrame_47 = framerateSecPerFrame[47];
				FramerateSecPerFrame_48 = framerateSecPerFrame[48];
				FramerateSecPerFrame_49 = framerateSecPerFrame[49];
				FramerateSecPerFrame_50 = framerateSecPerFrame[50];
				FramerateSecPerFrame_51 = framerateSecPerFrame[51];
				FramerateSecPerFrame_52 = framerateSecPerFrame[52];
				FramerateSecPerFrame_53 = framerateSecPerFrame[53];
				FramerateSecPerFrame_54 = framerateSecPerFrame[54];
				FramerateSecPerFrame_55 = framerateSecPerFrame[55];
				FramerateSecPerFrame_56 = framerateSecPerFrame[56];
				FramerateSecPerFrame_57 = framerateSecPerFrame[57];
				FramerateSecPerFrame_58 = framerateSecPerFrame[58];
				FramerateSecPerFrame_59 = framerateSecPerFrame[59];
			}
			FramerateSecPerFrameIdx = framerateSecPerFrameIdx;
			FramerateSecPerFrameCount = framerateSecPerFrameCount;
			FramerateSecPerFrameAccum = framerateSecPerFrameAccum;
			WantCaptureMouseNextFrame = wantCaptureMouseNextFrame;
			WantCaptureKeyboardNextFrame = wantCaptureKeyboardNextFrame;
			WantTextInputNextFrame = wantTextInputNextFrame;
			TempBuffer = tempBuffer;
			if (tempKeychordName != default(Span<byte>))
			{
				TempKeychordName_0 = tempKeychordName[0];
				TempKeychordName_1 = tempKeychordName[1];
				TempKeychordName_2 = tempKeychordName[2];
				TempKeychordName_3 = tempKeychordName[3];
				TempKeychordName_4 = tempKeychordName[4];
				TempKeychordName_5 = tempKeychordName[5];
				TempKeychordName_6 = tempKeychordName[6];
				TempKeychordName_7 = tempKeychordName[7];
				TempKeychordName_8 = tempKeychordName[8];
				TempKeychordName_9 = tempKeychordName[9];
				TempKeychordName_10 = tempKeychordName[10];
				TempKeychordName_11 = tempKeychordName[11];
				TempKeychordName_12 = tempKeychordName[12];
				TempKeychordName_13 = tempKeychordName[13];
				TempKeychordName_14 = tempKeychordName[14];
				TempKeychordName_15 = tempKeychordName[15];
				TempKeychordName_16 = tempKeychordName[16];
				TempKeychordName_17 = tempKeychordName[17];
				TempKeychordName_18 = tempKeychordName[18];
				TempKeychordName_19 = tempKeychordName[19];
				TempKeychordName_20 = tempKeychordName[20];
				TempKeychordName_21 = tempKeychordName[21];
				TempKeychordName_22 = tempKeychordName[22];
				TempKeychordName_23 = tempKeychordName[23];
				TempKeychordName_24 = tempKeychordName[24];
				TempKeychordName_25 = tempKeychordName[25];
				TempKeychordName_26 = tempKeychordName[26];
				TempKeychordName_27 = tempKeychordName[27];
				TempKeychordName_28 = tempKeychordName[28];
				TempKeychordName_29 = tempKeychordName[29];
				TempKeychordName_30 = tempKeychordName[30];
				TempKeychordName_31 = tempKeychordName[31];
				TempKeychordName_32 = tempKeychordName[32];
				TempKeychordName_33 = tempKeychordName[33];
				TempKeychordName_34 = tempKeychordName[34];
				TempKeychordName_35 = tempKeychordName[35];
				TempKeychordName_36 = tempKeychordName[36];
				TempKeychordName_37 = tempKeychordName[37];
				TempKeychordName_38 = tempKeychordName[38];
				TempKeychordName_39 = tempKeychordName[39];
				TempKeychordName_40 = tempKeychordName[40];
				TempKeychordName_41 = tempKeychordName[41];
				TempKeychordName_42 = tempKeychordName[42];
				TempKeychordName_43 = tempKeychordName[43];
				TempKeychordName_44 = tempKeychordName[44];
				TempKeychordName_45 = tempKeychordName[45];
				TempKeychordName_46 = tempKeychordName[46];
				TempKeychordName_47 = tempKeychordName[47];
				TempKeychordName_48 = tempKeychordName[48];
				TempKeychordName_49 = tempKeychordName[49];
				TempKeychordName_50 = tempKeychordName[50];
				TempKeychordName_51 = tempKeychordName[51];
				TempKeychordName_52 = tempKeychordName[52];
				TempKeychordName_53 = tempKeychordName[53];
				TempKeychordName_54 = tempKeychordName[54];
				TempKeychordName_55 = tempKeychordName[55];
				TempKeychordName_56 = tempKeychordName[56];
				TempKeychordName_57 = tempKeychordName[57];
				TempKeychordName_58 = tempKeychordName[58];
				TempKeychordName_59 = tempKeychordName[59];
				TempKeychordName_60 = tempKeychordName[60];
				TempKeychordName_61 = tempKeychordName[61];
				TempKeychordName_62 = tempKeychordName[62];
				TempKeychordName_63 = tempKeychordName[63];
			}
		}


		public int ActiveIdMouseButton { get => Bitfield.Get(RawBits0, 0, 8); set => Bitfield.Set(ref RawBits0, value, 0, 8); }

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImGuiKeyOwnerData> KeysOwnerData
		
		{
			get
			{
				fixed (ImGuiKeyOwnerData* p = &this.KeysOwnerData_0)
				{
					return new Span<ImGuiKeyOwnerData>(p, 155);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Pointer<byte>> LocalizationTable
		
		{
			get
			{
				fixed (byte** p = &this.LocalizationTable_0)
				{
					return new Span<Pointer<byte>>(p, 13);
				}
			}
		}
	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiContextPtr : IEquatable<ImGuiContextPtr>
	{
		public ImGuiContextPtr(ImGuiContext* handle) { Handle = handle; }

		public ImGuiContext* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiContextPtr Null => new ImGuiContextPtr(null);

		public ImGuiContext this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiContextPtr(ImGuiContext* handle) => new ImGuiContextPtr(handle);

		public static implicit operator ImGuiContext*(ImGuiContextPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiContextPtr left, ImGuiContextPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiContextPtr left, ImGuiContextPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiContextPtr left, ImGuiContext* right) => left.Handle == right;

		public static bool operator !=(ImGuiContextPtr left, ImGuiContext* right) => left.Handle != right;

		public bool Equals(ImGuiContextPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiContextPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiContextPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool Initialized => ref Unsafe.AsRef<bool>(&Handle->Initialized);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiIO IO => ref Unsafe.AsRef<ImGuiIO>(&Handle->IO);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPlatformIO PlatformIO => ref Unsafe.AsRef<ImGuiPlatformIO>(&Handle->PlatformIO);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiStyle Style => ref Unsafe.AsRef<ImGuiStyle>(&Handle->Style);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiConfigFlags ConfigFlagsCurrFrame => ref Unsafe.AsRef<ImGuiConfigFlags>(&Handle->ConfigFlagsCurrFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiConfigFlags ConfigFlagsLastFrame => ref Unsafe.AsRef<ImGuiConfigFlags>(&Handle->ConfigFlagsLastFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImFontAtlasPtr> FontAtlases => ref Unsafe.AsRef<ImVector<ImFontAtlasPtr>>(&Handle->FontAtlases);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontPtr Font => ref Unsafe.AsRef<ImFontPtr>(&Handle->Font);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontBakedPtr FontBaked => ref Unsafe.AsRef<ImFontBakedPtr>(&Handle->FontBaked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FontSize => ref Unsafe.AsRef<float>(&Handle->FontSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FontSizeBase => ref Unsafe.AsRef<float>(&Handle->FontSizeBase);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FontBakedScale => ref Unsafe.AsRef<float>(&Handle->FontBakedScale);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FontRasterizerDensity => ref Unsafe.AsRef<float>(&Handle->FontRasterizerDensity);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float CurrentDpiScale => ref Unsafe.AsRef<float>(&Handle->CurrentDpiScale);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImDrawListSharedData DrawListSharedData => ref Unsafe.AsRef<ImDrawListSharedData>(&Handle->DrawListSharedData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double Time => ref Unsafe.AsRef<double>(&Handle->Time);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCount => ref Unsafe.AsRef<int>(&Handle->FrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCountEnded => ref Unsafe.AsRef<int>(&Handle->FrameCountEnded);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCountPlatformEnded => ref Unsafe.AsRef<int>(&Handle->FrameCountPlatformEnded);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FrameCountRendered => ref Unsafe.AsRef<int>(&Handle->FrameCountRendered);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint WithinEndChildID => ref Unsafe.AsRef<uint>(&Handle->WithinEndChildID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WithinFrameScope => ref Unsafe.AsRef<bool>(&Handle->WithinFrameScope);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WithinFrameScopeWithImplicitWindow => ref Unsafe.AsRef<bool>(&Handle->WithinFrameScopeWithImplicitWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool GcCompactAll => ref Unsafe.AsRef<bool>(&Handle->GcCompactAll);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool TestEngineHookItems => ref Unsafe.AsRef<bool>(&Handle->TestEngineHookItems);
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* TestEngine { get => Handle->TestEngine; set => Handle->TestEngine = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<byte> ContextName
		
		{
			get
			{
				return new Span<byte>(&Handle->ContextName_0, 16);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiInputEvent> InputEventsQueue => ref Unsafe.AsRef<ImVector<ImGuiInputEvent>>(&Handle->InputEventsQueue);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiInputEvent> InputEventsTrail => ref Unsafe.AsRef<ImVector<ImGuiInputEvent>>(&Handle->InputEventsTrail);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseSource InputEventsNextMouseSource => ref Unsafe.AsRef<ImGuiMouseSource>(&Handle->InputEventsNextMouseSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint InputEventsNextEventId => ref Unsafe.AsRef<uint>(&Handle->InputEventsNextEventId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowPtr> Windows => ref Unsafe.AsRef<ImVector<ImGuiWindowPtr>>(&Handle->Windows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowPtr> WindowsFocusOrder => ref Unsafe.AsRef<ImVector<ImGuiWindowPtr>>(&Handle->WindowsFocusOrder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowPtr> WindowsTempSortBuffer => ref Unsafe.AsRef<ImVector<ImGuiWindowPtr>>(&Handle->WindowsTempSortBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiWindowStackData> CurrentWindowStack => ref Unsafe.AsRef<ImVector<ImGuiWindowStackData>>(&Handle->CurrentWindowStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiStorage WindowsById => ref Unsafe.AsRef<ImGuiStorage>(&Handle->WindowsById);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WindowsActiveCount => ref Unsafe.AsRef<int>(&Handle->WindowsActiveCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float WindowsBorderHoverPadding => ref Unsafe.AsRef<float>(&Handle->WindowsBorderHoverPadding);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DebugBreakInWindow => ref Unsafe.AsRef<uint>(&Handle->DebugBreakInWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr CurrentWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->CurrentWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr HoveredWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->HoveredWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr HoveredWindowUnderMovingWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->HoveredWindowUnderMovingWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr HoveredWindowBeforeClear => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->HoveredWindowBeforeClear);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr MovingWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->MovingWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr WheelingWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->WheelingWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WheelingWindowRefMousePos => ref Unsafe.AsRef<Vector2>(&Handle->WheelingWindowRefMousePos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WheelingWindowStartFrame => ref Unsafe.AsRef<int>(&Handle->WheelingWindowStartFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WheelingWindowScrolledFrame => ref Unsafe.AsRef<int>(&Handle->WheelingWindowScrolledFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float WheelingWindowReleaseTimer => ref Unsafe.AsRef<float>(&Handle->WheelingWindowReleaseTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WheelingWindowWheelRemainder => ref Unsafe.AsRef<Vector2>(&Handle->WheelingWindowWheelRemainder);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 WheelingAxisAvg => ref Unsafe.AsRef<Vector2>(&Handle->WheelingAxisAvg);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DebugDrawIdConflictsId => ref Unsafe.AsRef<uint>(&Handle->DebugDrawIdConflictsId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DebugHookIdInfoId => ref Unsafe.AsRef<uint>(&Handle->DebugHookIdInfoId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HoveredId => ref Unsafe.AsRef<uint>(&Handle->HoveredId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HoveredIdPreviousFrame => ref Unsafe.AsRef<uint>(&Handle->HoveredIdPreviousFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int HoveredIdPreviousFrameItemCount => ref Unsafe.AsRef<int>(&Handle->HoveredIdPreviousFrameItemCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float HoveredIdTimer => ref Unsafe.AsRef<float>(&Handle->HoveredIdTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float HoveredIdNotActiveTimer => ref Unsafe.AsRef<float>(&Handle->HoveredIdNotActiveTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HoveredIdAllowOverlap => ref Unsafe.AsRef<bool>(&Handle->HoveredIdAllowOverlap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool HoveredIdIsDisabled => ref Unsafe.AsRef<bool>(&Handle->HoveredIdIsDisabled);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ItemUnclipByLog => ref Unsafe.AsRef<bool>(&Handle->ItemUnclipByLog);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveId => ref Unsafe.AsRef<uint>(&Handle->ActiveId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveIdIsAlive => ref Unsafe.AsRef<uint>(&Handle->ActiveIdIsAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ActiveIdTimer => ref Unsafe.AsRef<float>(&Handle->ActiveIdTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdIsJustActivated => ref Unsafe.AsRef<bool>(&Handle->ActiveIdIsJustActivated);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdAllowOverlap => ref Unsafe.AsRef<bool>(&Handle->ActiveIdAllowOverlap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdNoClearOnFocusLoss => ref Unsafe.AsRef<bool>(&Handle->ActiveIdNoClearOnFocusLoss);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdHasBeenPressedBefore => ref Unsafe.AsRef<bool>(&Handle->ActiveIdHasBeenPressedBefore);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdHasBeenEditedBefore => ref Unsafe.AsRef<bool>(&Handle->ActiveIdHasBeenEditedBefore);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdHasBeenEditedThisFrame => ref Unsafe.AsRef<bool>(&Handle->ActiveIdHasBeenEditedThisFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdFromShortcut => ref Unsafe.AsRef<bool>(&Handle->ActiveIdFromShortcut);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveIdDisabledId => ref Unsafe.AsRef<uint>(&Handle->ActiveIdDisabledId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public int ActiveIdMouseButton { get => Handle->ActiveIdMouseButton; set => Handle->ActiveIdMouseButton = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ActiveIdClickOffset => ref Unsafe.AsRef<Vector2>(&Handle->ActiveIdClickOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr ActiveIdWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->ActiveIdWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiInputSource ActiveIdSource => ref Unsafe.AsRef<ImGuiInputSource>(&Handle->ActiveIdSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveIdPreviousFrame => ref Unsafe.AsRef<uint>(&Handle->ActiveIdPreviousFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDeactivatedItemData DeactivatedItemData => ref Unsafe.AsRef<ImGuiDeactivatedItemData>(&Handle->DeactivatedItemData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDataTypeStorage ActiveIdValueOnActivation => ref Unsafe.AsRef<ImGuiDataTypeStorage>(&Handle->ActiveIdValueOnActivation);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint LastActiveId => ref Unsafe.AsRef<uint>(&Handle->LastActiveId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LastActiveIdTimer => ref Unsafe.AsRef<float>(&Handle->LastActiveIdTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double LastKeyModsChangeTime => ref Unsafe.AsRef<double>(&Handle->LastKeyModsChangeTime);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double LastKeyModsChangeFromNoneTime => ref Unsafe.AsRef<double>(&Handle->LastKeyModsChangeFromNoneTime);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref double LastKeyboardKeyPressTime => ref Unsafe.AsRef<double>(&Handle->LastKeyboardKeyPressTime);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImBitArrayForNamedKeys KeysMayBeCharInput => ref Unsafe.AsRef<ImBitArrayForNamedKeys>(&Handle->KeysMayBeCharInput);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImGuiKeyOwnerData> KeysOwnerData
		
		{
			get
			{
				return new Span<ImGuiKeyOwnerData>(&Handle->KeysOwnerData_0, 155);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiKeyRoutingTable KeysRoutingTable => ref Unsafe.AsRef<ImGuiKeyRoutingTable>(&Handle->KeysRoutingTable);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ActiveIdUsingNavDirMask => ref Unsafe.AsRef<uint>(&Handle->ActiveIdUsingNavDirMask);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ActiveIdUsingAllKeyboardKeys => ref Unsafe.AsRef<bool>(&Handle->ActiveIdUsingAllKeyboardKeys);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DebugBreakInShortcutRouting => ref Unsafe.AsRef<int>(&Handle->DebugBreakInShortcutRouting);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint CurrentFocusScopeId => ref Unsafe.AsRef<uint>(&Handle->CurrentFocusScopeId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiItemFlags CurrentItemFlags => ref Unsafe.AsRef<ImGuiItemFlags>(&Handle->CurrentItemFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DebugLocateId => ref Unsafe.AsRef<uint>(&Handle->DebugLocateId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNextItemData NextItemData => ref Unsafe.AsRef<ImGuiNextItemData>(&Handle->NextItemData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiLastItemData LastItemData => ref Unsafe.AsRef<ImGuiLastItemData>(&Handle->LastItemData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNextWindowData NextWindowData => ref Unsafe.AsRef<ImGuiNextWindowData>(&Handle->NextWindowData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DebugShowGroupRects => ref Unsafe.AsRef<bool>(&Handle->DebugShowGroupRects);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiCol DebugFlashStyleColorIdx => ref Unsafe.AsRef<ImGuiCol>(&Handle->DebugFlashStyleColorIdx);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiColorMod> ColorStack => ref Unsafe.AsRef<ImVector<ImGuiColorMod>>(&Handle->ColorStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiStyleMod> StyleVarStack => ref Unsafe.AsRef<ImVector<ImGuiStyleMod>>(&Handle->StyleVarStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImFontStackData> FontStack => ref Unsafe.AsRef<ImVector<ImFontStackData>>(&Handle->FontStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiFocusScopeData> FocusScopeStack => ref Unsafe.AsRef<ImVector<ImGuiFocusScopeData>>(&Handle->FocusScopeStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiItemFlags> ItemFlagsStack => ref Unsafe.AsRef<ImVector<ImGuiItemFlags>>(&Handle->ItemFlagsStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiGroupData> GroupStack => ref Unsafe.AsRef<ImVector<ImGuiGroupData>>(&Handle->GroupStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiPopupData> OpenPopupStack => ref Unsafe.AsRef<ImVector<ImGuiPopupData>>(&Handle->OpenPopupStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiPopupData> BeginPopupStack => ref Unsafe.AsRef<ImVector<ImGuiPopupData>>(&Handle->BeginPopupStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiTreeNodeStackData> TreeNodeStack => ref Unsafe.AsRef<ImVector<ImGuiTreeNodeStackData>>(&Handle->TreeNodeStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiViewportPPtr> Viewports => ref Unsafe.AsRef<ImVector<ImGuiViewportPPtr>>(&Handle->Viewports);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewportPPtr CurrentViewport => ref Unsafe.AsRef<ImGuiViewportPPtr>(&Handle->CurrentViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewportPPtr MouseViewport => ref Unsafe.AsRef<ImGuiViewportPPtr>(&Handle->MouseViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiViewportPPtr MouseLastHoveredViewport => ref Unsafe.AsRef<ImGuiViewportPPtr>(&Handle->MouseLastHoveredViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint PlatformLastFocusedViewportId => ref Unsafe.AsRef<uint>(&Handle->PlatformLastFocusedViewportId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPlatformMonitor FallbackMonitor => ref Unsafe.AsRef<ImGuiPlatformMonitor>(&Handle->FallbackMonitor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect PlatformMonitorsFullWorkRect => ref Unsafe.AsRef<ImRect>(&Handle->PlatformMonitorsFullWorkRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ViewportCreatedCount => ref Unsafe.AsRef<int>(&Handle->ViewportCreatedCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int PlatformWindowsCreatedCount => ref Unsafe.AsRef<int>(&Handle->PlatformWindowsCreatedCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ViewportFocusedStampCount => ref Unsafe.AsRef<int>(&Handle->ViewportFocusedStampCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavCursorVisible => ref Unsafe.AsRef<bool>(&Handle->NavCursorVisible);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavHighlightItemUnderNav => ref Unsafe.AsRef<bool>(&Handle->NavHighlightItemUnderNav);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavMousePosDirty => ref Unsafe.AsRef<bool>(&Handle->NavMousePosDirty);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavIdIsAlive => ref Unsafe.AsRef<bool>(&Handle->NavIdIsAlive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavId => ref Unsafe.AsRef<uint>(&Handle->NavId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavFocusScopeId => ref Unsafe.AsRef<uint>(&Handle->NavFocusScopeId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavLayer NavLayer => ref Unsafe.AsRef<ImGuiNavLayer>(&Handle->NavLayer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavActivateId => ref Unsafe.AsRef<uint>(&Handle->NavActivateId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavActivateDownId => ref Unsafe.AsRef<uint>(&Handle->NavActivateDownId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavActivatePressedId => ref Unsafe.AsRef<uint>(&Handle->NavActivatePressedId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiActivateFlags NavActivateFlags => ref Unsafe.AsRef<ImGuiActivateFlags>(&Handle->NavActivateFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiFocusScopeData> NavFocusRoute => ref Unsafe.AsRef<ImVector<ImGuiFocusScopeData>>(&Handle->NavFocusRoute);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavHighlightActivatedId => ref Unsafe.AsRef<uint>(&Handle->NavHighlightActivatedId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float NavHighlightActivatedTimer => ref Unsafe.AsRef<float>(&Handle->NavHighlightActivatedTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavNextActivateId => ref Unsafe.AsRef<uint>(&Handle->NavNextActivateId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiActivateFlags NavNextActivateFlags => ref Unsafe.AsRef<ImGuiActivateFlags>(&Handle->NavNextActivateFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiInputSource NavInputSource => ref Unsafe.AsRef<ImGuiInputSource>(&Handle->NavInputSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref long NavLastValidSelectionUserData => ref Unsafe.AsRef<long>(&Handle->NavLastValidSelectionUserData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte NavCursorHideFrames => ref Unsafe.AsRef<sbyte>(&Handle->NavCursorHideFrames);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavAnyRequest => ref Unsafe.AsRef<bool>(&Handle->NavAnyRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavInitRequest => ref Unsafe.AsRef<bool>(&Handle->NavInitRequest);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavInitRequestFromMove => ref Unsafe.AsRef<bool>(&Handle->NavInitRequestFromMove);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavInitResult => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavInitResult);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavMoveSubmitted => ref Unsafe.AsRef<bool>(&Handle->NavMoveSubmitted);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavMoveScoringItems => ref Unsafe.AsRef<bool>(&Handle->NavMoveScoringItems);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavMoveForwardToNextFrame => ref Unsafe.AsRef<bool>(&Handle->NavMoveForwardToNextFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavMoveFlags NavMoveFlags => ref Unsafe.AsRef<ImGuiNavMoveFlags>(&Handle->NavMoveFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiScrollFlags NavMoveScrollFlags => ref Unsafe.AsRef<ImGuiScrollFlags>(&Handle->NavMoveScrollFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NavMoveKeyMods => ref Unsafe.AsRef<int>(&Handle->NavMoveKeyMods);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDir NavMoveDir => ref Unsafe.AsRef<ImGuiDir>(&Handle->NavMoveDir);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDir NavMoveDirForDebug => ref Unsafe.AsRef<ImGuiDir>(&Handle->NavMoveDirForDebug);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDir NavMoveClipDir => ref Unsafe.AsRef<ImGuiDir>(&Handle->NavMoveClipDir);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect NavScoringRect => ref Unsafe.AsRef<ImRect>(&Handle->NavScoringRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect NavScoringNoClipRect => ref Unsafe.AsRef<ImRect>(&Handle->NavScoringNoClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NavScoringDebugCount => ref Unsafe.AsRef<int>(&Handle->NavScoringDebugCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NavTabbingDir => ref Unsafe.AsRef<int>(&Handle->NavTabbingDir);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NavTabbingCounter => ref Unsafe.AsRef<int>(&Handle->NavTabbingCounter);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavMoveResultLocal => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavMoveResultLocal);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavMoveResultLocalVisible => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavMoveResultLocalVisible);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavMoveResultOther => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavMoveResultOther);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiNavItemData NavTabbingResultFirst => ref Unsafe.AsRef<ImGuiNavItemData>(&Handle->NavTabbingResultFirst);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavJustMovedFromFocusScopeId => ref Unsafe.AsRef<uint>(&Handle->NavJustMovedFromFocusScopeId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavJustMovedToId => ref Unsafe.AsRef<uint>(&Handle->NavJustMovedToId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint NavJustMovedToFocusScopeId => ref Unsafe.AsRef<uint>(&Handle->NavJustMovedToFocusScopeId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int NavJustMovedToKeyMods => ref Unsafe.AsRef<int>(&Handle->NavJustMovedToKeyMods);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavJustMovedToIsTabbing => ref Unsafe.AsRef<bool>(&Handle->NavJustMovedToIsTabbing);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavJustMovedToHasSelectionData => ref Unsafe.AsRef<bool>(&Handle->NavJustMovedToHasSelectionData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigNavWindowingWithGamepad => ref Unsafe.AsRef<bool>(&Handle->ConfigNavWindowingWithGamepad);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ConfigNavWindowingKeyNext => ref Unsafe.AsRef<int>(&Handle->ConfigNavWindowingKeyNext);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ConfigNavWindowingKeyPrev => ref Unsafe.AsRef<int>(&Handle->ConfigNavWindowingKeyPrev);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavWindowingTarget => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavWindowingTarget);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavWindowingTargetAnim => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavWindowingTargetAnim);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr NavWindowingListWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->NavWindowingListWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float NavWindowingTimer => ref Unsafe.AsRef<float>(&Handle->NavWindowingTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float NavWindowingHighlightAlpha => ref Unsafe.AsRef<float>(&Handle->NavWindowingHighlightAlpha);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiInputSource NavWindowingInputSource => ref Unsafe.AsRef<ImGuiInputSource>(&Handle->NavWindowingInputSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavWindowingToggleLayer => ref Unsafe.AsRef<bool>(&Handle->NavWindowingToggleLayer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiKey NavWindowingToggleKey => ref Unsafe.AsRef<ImGuiKey>(&Handle->NavWindowingToggleKey);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 NavWindowingAccumDeltaPos => ref Unsafe.AsRef<Vector2>(&Handle->NavWindowingAccumDeltaPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 NavWindowingAccumDeltaSize => ref Unsafe.AsRef<Vector2>(&Handle->NavWindowingAccumDeltaSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DimBgRatio => ref Unsafe.AsRef<float>(&Handle->DimBgRatio);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DragDropActive => ref Unsafe.AsRef<bool>(&Handle->DragDropActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DragDropWithinSource => ref Unsafe.AsRef<bool>(&Handle->DragDropWithinSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DragDropWithinTarget => ref Unsafe.AsRef<bool>(&Handle->DragDropWithinTarget);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDragDropFlags DragDropSourceFlags => ref Unsafe.AsRef<ImGuiDragDropFlags>(&Handle->DragDropSourceFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DragDropSourceFrameCount => ref Unsafe.AsRef<int>(&Handle->DragDropSourceFrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DragDropMouseButton => ref Unsafe.AsRef<int>(&Handle->DragDropMouseButton);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPayload DragDropPayload => ref Unsafe.AsRef<ImGuiPayload>(&Handle->DragDropPayload);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect DragDropTargetRect => ref Unsafe.AsRef<ImRect>(&Handle->DragDropTargetRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect DragDropTargetClipRect => ref Unsafe.AsRef<ImRect>(&Handle->DragDropTargetClipRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DragDropTargetId => ref Unsafe.AsRef<uint>(&Handle->DragDropTargetId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDragDropFlags DragDropAcceptFlags => ref Unsafe.AsRef<ImGuiDragDropFlags>(&Handle->DragDropAcceptFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DragDropAcceptIdCurrRectSurface => ref Unsafe.AsRef<float>(&Handle->DragDropAcceptIdCurrRectSurface);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DragDropAcceptIdCurr => ref Unsafe.AsRef<uint>(&Handle->DragDropAcceptIdCurr);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DragDropAcceptIdPrev => ref Unsafe.AsRef<uint>(&Handle->DragDropAcceptIdPrev);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DragDropAcceptFrameCount => ref Unsafe.AsRef<int>(&Handle->DragDropAcceptFrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DragDropHoldJustPressedId => ref Unsafe.AsRef<uint>(&Handle->DragDropHoldJustPressedId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<byte> DragDropPayloadBufHeap => ref Unsafe.AsRef<ImVector<byte>>(&Handle->DragDropPayloadBufHeap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<byte> DragDropPayloadBufLocal
		
		{
			get
			{
				return new Span<byte>(&Handle->DragDropPayloadBufLocal_0, 16);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ClipperTempDataStacked => ref Unsafe.AsRef<int>(&Handle->ClipperTempDataStacked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiListClipperData> ClipperTempData => ref Unsafe.AsRef<ImVector<ImGuiListClipperData>>(&Handle->ClipperTempData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTablePtr CurrentTable => ref Unsafe.AsRef<ImGuiTablePtr>(&Handle->CurrentTable);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DebugBreakInTable => ref Unsafe.AsRef<uint>(&Handle->DebugBreakInTable);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int TablesTempDataStacked => ref Unsafe.AsRef<int>(&Handle->TablesTempDataStacked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiTableTempData> TablesTempData => ref Unsafe.AsRef<ImVector<ImGuiTableTempData>>(&Handle->TablesTempData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImGuiTable Tables => ref Unsafe.AsRef<ImPoolImGuiTable>(&Handle->Tables);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<float> TablesLastTimeActive => ref Unsafe.AsRef<ImVector<float>>(&Handle->TablesLastTimeActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImDrawChannel> DrawChannelsTempMergeBuffer => ref Unsafe.AsRef<ImVector<ImDrawChannel>>(&Handle->DrawChannelsTempMergeBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTabBarPtr CurrentTabBar => ref Unsafe.AsRef<ImGuiTabBarPtr>(&Handle->CurrentTabBar);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImGuiTabBar TabBars => ref Unsafe.AsRef<ImPoolImGuiTabBar>(&Handle->TabBars);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiPtrOrIndex> CurrentTabBarStack => ref Unsafe.AsRef<ImVector<ImGuiPtrOrIndex>>(&Handle->CurrentTabBarStack);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiShrinkWidthItem> ShrinkWidthBuffer => ref Unsafe.AsRef<ImVector<ImGuiShrinkWidthItem>>(&Handle->ShrinkWidthBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiBoxSelectState BoxSelectState => ref Unsafe.AsRef<ImGuiBoxSelectState>(&Handle->BoxSelectState);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMultiSelectTempDataPtr CurrentMultiSelect => ref Unsafe.AsRef<ImGuiMultiSelectTempDataPtr>(&Handle->CurrentMultiSelect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int MultiSelectTempDataStacked => ref Unsafe.AsRef<int>(&Handle->MultiSelectTempDataStacked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiMultiSelectTempData> MultiSelectTempData => ref Unsafe.AsRef<ImVector<ImGuiMultiSelectTempData>>(&Handle->MultiSelectTempData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImPoolImGuiMultiSelectState MultiSelectStorage => ref Unsafe.AsRef<ImPoolImGuiMultiSelectState>(&Handle->MultiSelectStorage);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HoverItemDelayId => ref Unsafe.AsRef<uint>(&Handle->HoverItemDelayId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HoverItemDelayIdPreviousFrame => ref Unsafe.AsRef<uint>(&Handle->HoverItemDelayIdPreviousFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float HoverItemDelayTimer => ref Unsafe.AsRef<float>(&Handle->HoverItemDelayTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float HoverItemDelayClearTimer => ref Unsafe.AsRef<float>(&Handle->HoverItemDelayClearTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HoverItemUnlockedStationaryId => ref Unsafe.AsRef<uint>(&Handle->HoverItemUnlockedStationaryId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HoverWindowUnlockedStationaryId => ref Unsafe.AsRef<uint>(&Handle->HoverWindowUnlockedStationaryId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseCursor MouseCursor => ref Unsafe.AsRef<ImGuiMouseCursor>(&Handle->MouseCursor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MouseStationaryTimer => ref Unsafe.AsRef<float>(&Handle->MouseStationaryTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 MouseLastValidPos => ref Unsafe.AsRef<Vector2>(&Handle->MouseLastValidPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiInputTextState InputTextState => ref Unsafe.AsRef<ImGuiInputTextState>(&Handle->InputTextState);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextIndex InputTextLineIndex => ref Unsafe.AsRef<ImGuiTextIndex>(&Handle->InputTextLineIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiInputTextDeactivatedState InputTextDeactivatedState => ref Unsafe.AsRef<ImGuiInputTextDeactivatedState>(&Handle->InputTextDeactivatedState);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontBaked InputTextPasswordFontBackupBaked => ref Unsafe.AsRef<ImFontBaked>(&Handle->InputTextPasswordFontBackupBaked);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontFlags InputTextPasswordFontBackupFlags => ref Unsafe.AsRef<ImFontFlags>(&Handle->InputTextPasswordFontBackupFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint TempInputId => ref Unsafe.AsRef<uint>(&Handle->TempInputId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDataTypeStorage DataTypeZeroValue => ref Unsafe.AsRef<ImGuiDataTypeStorage>(&Handle->DataTypeZeroValue);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int BeginMenuDepth => ref Unsafe.AsRef<int>(&Handle->BeginMenuDepth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int BeginComboDepth => ref Unsafe.AsRef<int>(&Handle->BeginComboDepth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiColorEditFlags ColorEditOptions => ref Unsafe.AsRef<ImGuiColorEditFlags>(&Handle->ColorEditOptions);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ColorEditCurrentID => ref Unsafe.AsRef<uint>(&Handle->ColorEditCurrentID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ColorEditSavedID => ref Unsafe.AsRef<uint>(&Handle->ColorEditSavedID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ColorEditSavedHue => ref Unsafe.AsRef<float>(&Handle->ColorEditSavedHue);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ColorEditSavedSat => ref Unsafe.AsRef<float>(&Handle->ColorEditSavedSat);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ColorEditSavedColor => ref Unsafe.AsRef<uint>(&Handle->ColorEditSavedColor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector4 ColorPickerRef => ref Unsafe.AsRef<Vector4>(&Handle->ColorPickerRef);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiComboPreviewData ComboPreviewData => ref Unsafe.AsRef<ImGuiComboPreviewData>(&Handle->ComboPreviewData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImRect WindowResizeBorderExpectedRect => ref Unsafe.AsRef<ImRect>(&Handle->WindowResizeBorderExpectedRect);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WindowResizeRelativeMode => ref Unsafe.AsRef<bool>(&Handle->WindowResizeRelativeMode);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short ScrollbarSeekMode => ref Unsafe.AsRef<short>(&Handle->ScrollbarSeekMode);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ScrollbarClickDeltaToGrabCenter => ref Unsafe.AsRef<float>(&Handle->ScrollbarClickDeltaToGrabCenter);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float SliderGrabClickOffset => ref Unsafe.AsRef<float>(&Handle->SliderGrabClickOffset);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float SliderCurrentAccum => ref Unsafe.AsRef<float>(&Handle->SliderCurrentAccum);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool SliderCurrentAccumDirty => ref Unsafe.AsRef<bool>(&Handle->SliderCurrentAccumDirty);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DragCurrentAccumDirty => ref Unsafe.AsRef<bool>(&Handle->DragCurrentAccumDirty);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DragCurrentAccum => ref Unsafe.AsRef<float>(&Handle->DragCurrentAccum);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DragSpeedDefaultRatio => ref Unsafe.AsRef<float>(&Handle->DragSpeedDefaultRatio);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DisabledAlphaBackup => ref Unsafe.AsRef<float>(&Handle->DisabledAlphaBackup);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short DisabledStackSize => ref Unsafe.AsRef<short>(&Handle->DisabledStackSize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short TooltipOverrideCount => ref Unsafe.AsRef<short>(&Handle->TooltipOverrideCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr TooltipPreviousWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->TooltipPreviousWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<byte> ClipboardHandlerData => ref Unsafe.AsRef<ImVector<byte>>(&Handle->ClipboardHandlerData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<uint> MenusIdSubmittedThisFrame => ref Unsafe.AsRef<ImVector<uint>>(&Handle->MenusIdSubmittedThisFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTypingSelectState TypingSelectState => ref Unsafe.AsRef<ImGuiTypingSelectState>(&Handle->TypingSelectState);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPlatformImeData PlatformImeData => ref Unsafe.AsRef<ImGuiPlatformImeData>(&Handle->PlatformImeData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiPlatformImeData PlatformImeDataPrev => ref Unsafe.AsRef<ImGuiPlatformImeData>(&Handle->PlatformImeDataPrev);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImTextureDataPtr> UserTextures => ref Unsafe.AsRef<ImVector<ImTextureDataPtr>>(&Handle->UserTextures);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockContext DockContext => ref Unsafe.AsRef<ImGuiDockContext>(&Handle->DockContext);
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* DockNodeWindowMenuHandler { get => Handle->DockNodeWindowMenuHandler; set => Handle->DockNodeWindowMenuHandler = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool SettingsLoaded => ref Unsafe.AsRef<bool>(&Handle->SettingsLoaded);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float SettingsDirtyTimer => ref Unsafe.AsRef<float>(&Handle->SettingsDirtyTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer SettingsIniData => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->SettingsIniData);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiSettingsHandler> SettingsHandlers => ref Unsafe.AsRef<ImVector<ImGuiSettingsHandler>>(&Handle->SettingsHandlers);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImChunkStreamImGuiWindowSettings SettingsWindows => ref Unsafe.AsRef<ImChunkStreamImGuiWindowSettings>(&Handle->SettingsWindows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImChunkStreamImGuiTableSettings SettingsTables => ref Unsafe.AsRef<ImChunkStreamImGuiTableSettings>(&Handle->SettingsTables);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiContextHook> Hooks => ref Unsafe.AsRef<ImVector<ImGuiContextHook>>(&Handle->Hooks);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint HookIdNext => ref Unsafe.AsRef<uint>(&Handle->HookIdNext);
		/// <summary>
		/// To be documented.
		/// </summary>
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool LogEnabled => ref Unsafe.AsRef<bool>(&Handle->LogEnabled);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiLogFlags LogFlags => ref Unsafe.AsRef<ImGuiLogFlags>(&Handle->LogFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiWindowPtr LogWindow => ref Unsafe.AsRef<ImGuiWindowPtr>(&Handle->LogWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFileHandle LogFile => ref Unsafe.AsRef<ImFileHandle>(&Handle->LogFile);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer LogBuffer => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->LogBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* LogNextPrefix { get => Handle->LogNextPrefix; set => Handle->LogNextPrefix = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* LogNextSuffix { get => Handle->LogNextSuffix; set => Handle->LogNextSuffix = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float LogLinePosY => ref Unsafe.AsRef<float>(&Handle->LogLinePosY);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool LogLineFirstItem => ref Unsafe.AsRef<bool>(&Handle->LogLineFirstItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LogDepthRef => ref Unsafe.AsRef<int>(&Handle->LogDepthRef);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LogDepthToExpand => ref Unsafe.AsRef<int>(&Handle->LogDepthToExpand);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LogDepthToExpandDefault => ref Unsafe.AsRef<int>(&Handle->LogDepthToExpandDefault);
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* ErrorCallback { get => Handle->ErrorCallback; set => Handle->ErrorCallback = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* ErrorCallbackUserData { get => Handle->ErrorCallbackUserData; set => Handle->ErrorCallbackUserData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 ErrorTooltipLockedPos => ref Unsafe.AsRef<Vector2>(&Handle->ErrorTooltipLockedPos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ErrorFirst => ref Unsafe.AsRef<bool>(&Handle->ErrorFirst);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int ErrorCountCurrentFrame => ref Unsafe.AsRef<int>(&Handle->ErrorCountCurrentFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiErrorRecoveryState StackSizesInNewFrame => ref Unsafe.AsRef<ImGuiErrorRecoveryState>(&Handle->StackSizesInNewFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiErrorRecoveryStatePtr StackSizesInBeginForCurrentWindow => ref Unsafe.AsRef<ImGuiErrorRecoveryStatePtr>(&Handle->StackSizesInBeginForCurrentWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DebugDrawIdConflictsCount => ref Unsafe.AsRef<int>(&Handle->DebugDrawIdConflictsCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDebugLogFlags DebugLogFlags => ref Unsafe.AsRef<ImGuiDebugLogFlags>(&Handle->DebugLogFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer DebugLogBuf => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->DebugLogBuf);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextIndex DebugLogIndex => ref Unsafe.AsRef<ImGuiTextIndex>(&Handle->DebugLogIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DebugLogSkippedErrors => ref Unsafe.AsRef<int>(&Handle->DebugLogSkippedErrors);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDebugLogFlags DebugLogAutoDisableFlags => ref Unsafe.AsRef<ImGuiDebugLogFlags>(&Handle->DebugLogAutoDisableFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte DebugLogAutoDisableFrames => ref Unsafe.AsRef<byte>(&Handle->DebugLogAutoDisableFrames);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte DebugLocateFrames => ref Unsafe.AsRef<byte>(&Handle->DebugLocateFrames);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DebugBreakInLocateId => ref Unsafe.AsRef<bool>(&Handle->DebugBreakInLocateId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DebugBreakKeyChord => ref Unsafe.AsRef<int>(&Handle->DebugBreakKeyChord);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte DebugBeginReturnValueCullDepth => ref Unsafe.AsRef<sbyte>(&Handle->DebugBeginReturnValueCullDepth);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool DebugItemPickerActive => ref Unsafe.AsRef<bool>(&Handle->DebugItemPickerActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref byte DebugItemPickerMouseButton => ref Unsafe.AsRef<byte>(&Handle->DebugItemPickerMouseButton);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint DebugItemPickerBreakId => ref Unsafe.AsRef<uint>(&Handle->DebugItemPickerBreakId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DebugFlashStyleColorTime => ref Unsafe.AsRef<float>(&Handle->DebugFlashStyleColorTime);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector4 DebugFlashStyleColorBackup => ref Unsafe.AsRef<Vector4>(&Handle->DebugFlashStyleColorBackup);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMetricsConfig DebugMetricsConfig => ref Unsafe.AsRef<ImGuiMetricsConfig>(&Handle->DebugMetricsConfig);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiIDStackTool DebugIDStackTool => ref Unsafe.AsRef<ImGuiIDStackTool>(&Handle->DebugIDStackTool);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDebugAllocInfo DebugAllocInfo => ref Unsafe.AsRef<ImGuiDebugAllocInfo>(&Handle->DebugAllocInfo);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiDockNodePtr DebugHoveredDockNode => ref Unsafe.AsRef<ImGuiDockNodePtr>(&Handle->DebugHoveredDockNode);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<float> FramerateSecPerFrame
		
		{
			get
			{
				return new Span<float>(&Handle->FramerateSecPerFrame_0, 60);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FramerateSecPerFrameIdx => ref Unsafe.AsRef<int>(&Handle->FramerateSecPerFrameIdx);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int FramerateSecPerFrameCount => ref Unsafe.AsRef<int>(&Handle->FramerateSecPerFrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float FramerateSecPerFrameAccum => ref Unsafe.AsRef<float>(&Handle->FramerateSecPerFrameAccum);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WantCaptureMouseNextFrame => ref Unsafe.AsRef<int>(&Handle->WantCaptureMouseNextFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WantCaptureKeyboardNextFrame => ref Unsafe.AsRef<int>(&Handle->WantCaptureKeyboardNextFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int WantTextInputNextFrame => ref Unsafe.AsRef<int>(&Handle->WantTextInputNextFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<byte> TempBuffer => ref Unsafe.AsRef<ImVector<byte>>(&Handle->TempBuffer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<byte> TempKeychordName
		
		{
			get
			{
				return new Span<byte>(&Handle->TempKeychordName_0, 64);
			}
		}
	}

}
