// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiIO
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiConfigFlags ConfigFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiBackendFlags BackendFlags;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 DisplaySize;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 DisplayFramebufferScale;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float DeltaTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float IniSavingRate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* IniFilename;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* LogFilename;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* UserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFontAtlas* Fonts;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImFont* FontDefault;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte FontAllowUserScaling;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigNavSwapGamepadButtons;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigNavMoveSetMousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigNavCaptureKeyboard;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigNavEscapeClearFocusItem;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigNavEscapeClearFocusWindow;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigNavCursorVisibleAuto;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigNavCursorVisibleAlways;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDockingNoSplit;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDockingWithShift;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDockingAlwaysTabBar;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDockingTransparentPayload;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigViewportsNoAutoMerge;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigViewportsNoTaskBarIcon;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigViewportsNoDecoration;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigViewportsNoDefaultParent;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigViewportsPlatformFocusSetsImGuiFocus;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDpiScaleFonts;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDpiScaleViewports;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte MouseDrawCursor;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigMacOSXBehaviors;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigInputTrickleEventQueue;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigInputTextCursorBlink;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigInputTextEnterKeepActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDragClickToInputText;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigWindowsResizeFromEdges;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigWindowsMoveFromTitleBarOnly;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigWindowsCopyContentsWithCtrlC;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigScrollbarScrollByPage;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float ConfigMemoryCompactTimer;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseDoubleClickTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseDoubleClickMaxDist;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseDragThreshold;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float KeyRepeatDelay;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float KeyRepeatRate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigErrorRecovery;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigErrorRecoveryEnableAssert;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigErrorRecoveryEnableDebugLog;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigErrorRecoveryEnableTooltip;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDebugIsDebuggerPresent;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDebugHighlightIdConflicts;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDebugHighlightIdConflictsShowItemPicker;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDebugBeginReturnValueOnce;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDebugBeginReturnValueLoop;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDebugIgnoreFocusLoss;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte ConfigDebugIniSettings;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* BackendPlatformName;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe byte* BackendRendererName;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* BackendPlatformUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* BackendRendererUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void* BackendLanguageUserData;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantCaptureMouse;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantCaptureKeyboard;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantTextInput;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantSetMousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantSaveIniSettings;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte NavVisible;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float Framerate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MetricsRenderVertices;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MetricsRenderIndices;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MetricsRenderWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int MetricsActiveWindows;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MouseDelta;

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiContext* Ctx;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MousePos;

		/// <summary>
		/// To be documented.
		/// </summary>
		public bool MouseDown_0;
		public bool MouseDown_1;
		public bool MouseDown_2;
		public bool MouseDown_3;
		public bool MouseDown_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseWheel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseWheelH;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiMouseSource MouseSource;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint MouseHoveredViewport;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte KeyCtrl;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte KeyShift;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte KeyAlt;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte KeySuper;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int KeyMods;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiKeyData KeysData_0;
		public ImGuiKeyData KeysData_1;
		public ImGuiKeyData KeysData_2;
		public ImGuiKeyData KeysData_3;
		public ImGuiKeyData KeysData_4;
		public ImGuiKeyData KeysData_5;
		public ImGuiKeyData KeysData_6;
		public ImGuiKeyData KeysData_7;
		public ImGuiKeyData KeysData_8;
		public ImGuiKeyData KeysData_9;
		public ImGuiKeyData KeysData_10;
		public ImGuiKeyData KeysData_11;
		public ImGuiKeyData KeysData_12;
		public ImGuiKeyData KeysData_13;
		public ImGuiKeyData KeysData_14;
		public ImGuiKeyData KeysData_15;
		public ImGuiKeyData KeysData_16;
		public ImGuiKeyData KeysData_17;
		public ImGuiKeyData KeysData_18;
		public ImGuiKeyData KeysData_19;
		public ImGuiKeyData KeysData_20;
		public ImGuiKeyData KeysData_21;
		public ImGuiKeyData KeysData_22;
		public ImGuiKeyData KeysData_23;
		public ImGuiKeyData KeysData_24;
		public ImGuiKeyData KeysData_25;
		public ImGuiKeyData KeysData_26;
		public ImGuiKeyData KeysData_27;
		public ImGuiKeyData KeysData_28;
		public ImGuiKeyData KeysData_29;
		public ImGuiKeyData KeysData_30;
		public ImGuiKeyData KeysData_31;
		public ImGuiKeyData KeysData_32;
		public ImGuiKeyData KeysData_33;
		public ImGuiKeyData KeysData_34;
		public ImGuiKeyData KeysData_35;
		public ImGuiKeyData KeysData_36;
		public ImGuiKeyData KeysData_37;
		public ImGuiKeyData KeysData_38;
		public ImGuiKeyData KeysData_39;
		public ImGuiKeyData KeysData_40;
		public ImGuiKeyData KeysData_41;
		public ImGuiKeyData KeysData_42;
		public ImGuiKeyData KeysData_43;
		public ImGuiKeyData KeysData_44;
		public ImGuiKeyData KeysData_45;
		public ImGuiKeyData KeysData_46;
		public ImGuiKeyData KeysData_47;
		public ImGuiKeyData KeysData_48;
		public ImGuiKeyData KeysData_49;
		public ImGuiKeyData KeysData_50;
		public ImGuiKeyData KeysData_51;
		public ImGuiKeyData KeysData_52;
		public ImGuiKeyData KeysData_53;
		public ImGuiKeyData KeysData_54;
		public ImGuiKeyData KeysData_55;
		public ImGuiKeyData KeysData_56;
		public ImGuiKeyData KeysData_57;
		public ImGuiKeyData KeysData_58;
		public ImGuiKeyData KeysData_59;
		public ImGuiKeyData KeysData_60;
		public ImGuiKeyData KeysData_61;
		public ImGuiKeyData KeysData_62;
		public ImGuiKeyData KeysData_63;
		public ImGuiKeyData KeysData_64;
		public ImGuiKeyData KeysData_65;
		public ImGuiKeyData KeysData_66;
		public ImGuiKeyData KeysData_67;
		public ImGuiKeyData KeysData_68;
		public ImGuiKeyData KeysData_69;
		public ImGuiKeyData KeysData_70;
		public ImGuiKeyData KeysData_71;
		public ImGuiKeyData KeysData_72;
		public ImGuiKeyData KeysData_73;
		public ImGuiKeyData KeysData_74;
		public ImGuiKeyData KeysData_75;
		public ImGuiKeyData KeysData_76;
		public ImGuiKeyData KeysData_77;
		public ImGuiKeyData KeysData_78;
		public ImGuiKeyData KeysData_79;
		public ImGuiKeyData KeysData_80;
		public ImGuiKeyData KeysData_81;
		public ImGuiKeyData KeysData_82;
		public ImGuiKeyData KeysData_83;
		public ImGuiKeyData KeysData_84;
		public ImGuiKeyData KeysData_85;
		public ImGuiKeyData KeysData_86;
		public ImGuiKeyData KeysData_87;
		public ImGuiKeyData KeysData_88;
		public ImGuiKeyData KeysData_89;
		public ImGuiKeyData KeysData_90;
		public ImGuiKeyData KeysData_91;
		public ImGuiKeyData KeysData_92;
		public ImGuiKeyData KeysData_93;
		public ImGuiKeyData KeysData_94;
		public ImGuiKeyData KeysData_95;
		public ImGuiKeyData KeysData_96;
		public ImGuiKeyData KeysData_97;
		public ImGuiKeyData KeysData_98;
		public ImGuiKeyData KeysData_99;
		public ImGuiKeyData KeysData_100;
		public ImGuiKeyData KeysData_101;
		public ImGuiKeyData KeysData_102;
		public ImGuiKeyData KeysData_103;
		public ImGuiKeyData KeysData_104;
		public ImGuiKeyData KeysData_105;
		public ImGuiKeyData KeysData_106;
		public ImGuiKeyData KeysData_107;
		public ImGuiKeyData KeysData_108;
		public ImGuiKeyData KeysData_109;
		public ImGuiKeyData KeysData_110;
		public ImGuiKeyData KeysData_111;
		public ImGuiKeyData KeysData_112;
		public ImGuiKeyData KeysData_113;
		public ImGuiKeyData KeysData_114;
		public ImGuiKeyData KeysData_115;
		public ImGuiKeyData KeysData_116;
		public ImGuiKeyData KeysData_117;
		public ImGuiKeyData KeysData_118;
		public ImGuiKeyData KeysData_119;
		public ImGuiKeyData KeysData_120;
		public ImGuiKeyData KeysData_121;
		public ImGuiKeyData KeysData_122;
		public ImGuiKeyData KeysData_123;
		public ImGuiKeyData KeysData_124;
		public ImGuiKeyData KeysData_125;
		public ImGuiKeyData KeysData_126;
		public ImGuiKeyData KeysData_127;
		public ImGuiKeyData KeysData_128;
		public ImGuiKeyData KeysData_129;
		public ImGuiKeyData KeysData_130;
		public ImGuiKeyData KeysData_131;
		public ImGuiKeyData KeysData_132;
		public ImGuiKeyData KeysData_133;
		public ImGuiKeyData KeysData_134;
		public ImGuiKeyData KeysData_135;
		public ImGuiKeyData KeysData_136;
		public ImGuiKeyData KeysData_137;
		public ImGuiKeyData KeysData_138;
		public ImGuiKeyData KeysData_139;
		public ImGuiKeyData KeysData_140;
		public ImGuiKeyData KeysData_141;
		public ImGuiKeyData KeysData_142;
		public ImGuiKeyData KeysData_143;
		public ImGuiKeyData KeysData_144;
		public ImGuiKeyData KeysData_145;
		public ImGuiKeyData KeysData_146;
		public ImGuiKeyData KeysData_147;
		public ImGuiKeyData KeysData_148;
		public ImGuiKeyData KeysData_149;
		public ImGuiKeyData KeysData_150;
		public ImGuiKeyData KeysData_151;
		public ImGuiKeyData KeysData_152;
		public ImGuiKeyData KeysData_153;
		public ImGuiKeyData KeysData_154;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte WantCaptureMouseUnlessPopupClose;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MousePosPrev;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MouseClickedPos_0;
		public Vector2 MouseClickedPos_1;
		public Vector2 MouseClickedPos_2;
		public Vector2 MouseClickedPos_3;
		public Vector2 MouseClickedPos_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double MouseClickedTime_0;
		public double MouseClickedTime_1;
		public double MouseClickedTime_2;
		public double MouseClickedTime_3;
		public double MouseClickedTime_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public bool MouseClicked_0;
		public bool MouseClicked_1;
		public bool MouseClicked_2;
		public bool MouseClicked_3;
		public bool MouseClicked_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public bool MouseDoubleClicked_0;
		public bool MouseDoubleClicked_1;
		public bool MouseDoubleClicked_2;
		public bool MouseDoubleClicked_3;
		public bool MouseDoubleClicked_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort MouseClickedCount_0;
		public ushort MouseClickedCount_1;
		public ushort MouseClickedCount_2;
		public ushort MouseClickedCount_3;
		public ushort MouseClickedCount_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort MouseClickedLastCount_0;
		public ushort MouseClickedLastCount_1;
		public ushort MouseClickedLastCount_2;
		public ushort MouseClickedLastCount_3;
		public ushort MouseClickedLastCount_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public bool MouseReleased_0;
		public bool MouseReleased_1;
		public bool MouseReleased_2;
		public bool MouseReleased_3;
		public bool MouseReleased_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public double MouseReleasedTime_0;
		public double MouseReleasedTime_1;
		public double MouseReleasedTime_2;
		public double MouseReleasedTime_3;
		public double MouseReleasedTime_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public bool MouseDownOwned_0;
		public bool MouseDownOwned_1;
		public bool MouseDownOwned_2;
		public bool MouseDownOwned_3;
		public bool MouseDownOwned_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public bool MouseDownOwnedUnlessPopupClose_0;
		public bool MouseDownOwnedUnlessPopupClose_1;
		public bool MouseDownOwnedUnlessPopupClose_2;
		public bool MouseDownOwnedUnlessPopupClose_3;
		public bool MouseDownOwnedUnlessPopupClose_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte MouseWheelRequestAxisSwap;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte MouseCtrlLeftAsRightClick;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseDownDuration_0;
		public float MouseDownDuration_1;
		public float MouseDownDuration_2;
		public float MouseDownDuration_3;
		public float MouseDownDuration_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseDownDurationPrev_0;
		public float MouseDownDurationPrev_1;
		public float MouseDownDurationPrev_2;
		public float MouseDownDurationPrev_3;
		public float MouseDownDurationPrev_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public Vector2 MouseDragMaxDistanceAbs_0;
		public Vector2 MouseDragMaxDistanceAbs_1;
		public Vector2 MouseDragMaxDistanceAbs_2;
		public Vector2 MouseDragMaxDistanceAbs_3;
		public Vector2 MouseDragMaxDistanceAbs_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float MouseDragMaxDistanceSqr_0;
		public float MouseDragMaxDistanceSqr_1;
		public float MouseDragMaxDistanceSqr_2;
		public float MouseDragMaxDistanceSqr_3;
		public float MouseDragMaxDistanceSqr_4;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float PenPressure;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte AppFocusLost;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte AppAcceptingEvents;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort InputQueueSurrogate;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<uint> InputQueueCharacters;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiIO(ImGuiConfigFlags configFlags = default, ImGuiBackendFlags backendFlags = default, Vector2 displaySize = default, Vector2 displayFramebufferScale = default, float deltaTime = default, float iniSavingRate = default, byte* iniFilename = default, byte* logFilename = default, void* userData = default, ImFontAtlasPtr fonts = default, ImFontPtr fontDefault = default, bool fontAllowUserScaling = default, bool configNavSwapGamepadButtons = default, bool configNavMoveSetMousePos = default, bool configNavCaptureKeyboard = default, bool configNavEscapeClearFocusItem = default, bool configNavEscapeClearFocusWindow = default, bool configNavCursorVisibleAuto = default, bool configNavCursorVisibleAlways = default, bool configDockingNoSplit = default, bool configDockingWithShift = default, bool configDockingAlwaysTabBar = default, bool configDockingTransparentPayload = default, bool configViewportsNoAutoMerge = default, bool configViewportsNoTaskBarIcon = default, bool configViewportsNoDecoration = default, bool configViewportsNoDefaultParent = default, bool configViewportsPlatformFocusSetsImGuiFocus = default, bool configDpiScaleFonts = default, bool configDpiScaleViewports = default, bool mouseDrawCursor = default, bool configMacOsxBehaviors = default, bool configInputTrickleEventQueue = default, bool configInputTextCursorBlink = default, bool configInputTextEnterKeepActive = default, bool configDragClickToInputText = default, bool configWindowsResizeFromEdges = default, bool configWindowsMoveFromTitleBarOnly = default, bool configWindowsCopyContentsWithCtrlC = default, bool configScrollbarScrollByPage = default, float configMemoryCompactTimer = default, float mouseDoubleClickTime = default, float mouseDoubleClickMaxDist = default, float mouseDragThreshold = default, float keyRepeatDelay = default, float keyRepeatRate = default, bool configErrorRecovery = default, bool configErrorRecoveryEnableAssert = default, bool configErrorRecoveryEnableDebugLog = default, bool configErrorRecoveryEnableTooltip = default, bool configDebugIsDebuggerPresent = default, bool configDebugHighlightIdConflicts = default, bool configDebugHighlightIdConflictsShowItemPicker = default, bool configDebugBeginReturnValueOnce = default, bool configDebugBeginReturnValueLoop = default, bool configDebugIgnoreFocusLoss = default, bool configDebugIniSettings = default, byte* backendPlatformName = default, byte* backendRendererName = default, void* backendPlatformUserData = default, void* backendRendererUserData = default, void* backendLanguageUserData = default, bool wantCaptureMouse = default, bool wantCaptureKeyboard = default, bool wantTextInput = default, bool wantSetMousePos = default, bool wantSaveIniSettings = default, bool navActive = default, bool navVisible = default, float framerate = default, int metricsRenderVertices = default, int metricsRenderIndices = default, int metricsRenderWindows = default, int metricsActiveWindows = default, Vector2 mouseDelta = default, ImGuiContextPtr ctx = default, Vector2 mousePos = default, bool* mouseDown = default, float mouseWheel = default, float mouseWheelH = default, ImGuiMouseSource mouseSource = default, uint mouseHoveredViewport = default, bool keyCtrl = default, bool keyShift = default, bool keyAlt = default, bool keySuper = default, int keyMods = default, ImGuiKeyData* keysData = default, bool wantCaptureMouseUnlessPopupClose = default, Vector2 mousePosPrev = default, Vector2* mouseClickedPos = default, double* mouseClickedTime = default, bool* mouseClicked = default, bool* mouseDoubleClicked = default, ushort* mouseClickedCount = default, ushort* mouseClickedLastCount = default, bool* mouseReleased = default, double* mouseReleasedTime = default, bool* mouseDownOwned = default, bool* mouseDownOwnedUnlessPopupClose = default, bool mouseWheelRequestAxisSwap = default, bool mouseCtrlLeftAsRightClick = default, float* mouseDownDuration = default, float* mouseDownDurationPrev = default, Vector2* mouseDragMaxDistanceAbs = default, float* mouseDragMaxDistanceSqr = default, float penPressure = default, bool appFocusLost = default, bool appAcceptingEvents = default, ushort inputQueueSurrogate = default, ImVector<uint> inputQueueCharacters = default)
		{
			ConfigFlags = configFlags;
			BackendFlags = backendFlags;
			DisplaySize = displaySize;
			DisplayFramebufferScale = displayFramebufferScale;
			DeltaTime = deltaTime;
			IniSavingRate = iniSavingRate;
			IniFilename = iniFilename;
			LogFilename = logFilename;
			UserData = userData;
			Fonts = fonts;
			FontDefault = fontDefault;
			FontAllowUserScaling = fontAllowUserScaling ? (byte)1 : (byte)0;
			ConfigNavSwapGamepadButtons = configNavSwapGamepadButtons ? (byte)1 : (byte)0;
			ConfigNavMoveSetMousePos = configNavMoveSetMousePos ? (byte)1 : (byte)0;
			ConfigNavCaptureKeyboard = configNavCaptureKeyboard ? (byte)1 : (byte)0;
			ConfigNavEscapeClearFocusItem = configNavEscapeClearFocusItem ? (byte)1 : (byte)0;
			ConfigNavEscapeClearFocusWindow = configNavEscapeClearFocusWindow ? (byte)1 : (byte)0;
			ConfigNavCursorVisibleAuto = configNavCursorVisibleAuto ? (byte)1 : (byte)0;
			ConfigNavCursorVisibleAlways = configNavCursorVisibleAlways ? (byte)1 : (byte)0;
			ConfigDockingNoSplit = configDockingNoSplit ? (byte)1 : (byte)0;
			ConfigDockingWithShift = configDockingWithShift ? (byte)1 : (byte)0;
			ConfigDockingAlwaysTabBar = configDockingAlwaysTabBar ? (byte)1 : (byte)0;
			ConfigDockingTransparentPayload = configDockingTransparentPayload ? (byte)1 : (byte)0;
			ConfigViewportsNoAutoMerge = configViewportsNoAutoMerge ? (byte)1 : (byte)0;
			ConfigViewportsNoTaskBarIcon = configViewportsNoTaskBarIcon ? (byte)1 : (byte)0;
			ConfigViewportsNoDecoration = configViewportsNoDecoration ? (byte)1 : (byte)0;
			ConfigViewportsNoDefaultParent = configViewportsNoDefaultParent ? (byte)1 : (byte)0;
			ConfigViewportsPlatformFocusSetsImGuiFocus = configViewportsPlatformFocusSetsImGuiFocus ? (byte)1 : (byte)0;
			ConfigDpiScaleFonts = configDpiScaleFonts ? (byte)1 : (byte)0;
			ConfigDpiScaleViewports = configDpiScaleViewports ? (byte)1 : (byte)0;
			MouseDrawCursor = mouseDrawCursor ? (byte)1 : (byte)0;
			ConfigMacOSXBehaviors = configMacOsxBehaviors ? (byte)1 : (byte)0;
			ConfigInputTrickleEventQueue = configInputTrickleEventQueue ? (byte)1 : (byte)0;
			ConfigInputTextCursorBlink = configInputTextCursorBlink ? (byte)1 : (byte)0;
			ConfigInputTextEnterKeepActive = configInputTextEnterKeepActive ? (byte)1 : (byte)0;
			ConfigDragClickToInputText = configDragClickToInputText ? (byte)1 : (byte)0;
			ConfigWindowsResizeFromEdges = configWindowsResizeFromEdges ? (byte)1 : (byte)0;
			ConfigWindowsMoveFromTitleBarOnly = configWindowsMoveFromTitleBarOnly ? (byte)1 : (byte)0;
			ConfigWindowsCopyContentsWithCtrlC = configWindowsCopyContentsWithCtrlC ? (byte)1 : (byte)0;
			ConfigScrollbarScrollByPage = configScrollbarScrollByPage ? (byte)1 : (byte)0;
			ConfigMemoryCompactTimer = configMemoryCompactTimer;
			MouseDoubleClickTime = mouseDoubleClickTime;
			MouseDoubleClickMaxDist = mouseDoubleClickMaxDist;
			MouseDragThreshold = mouseDragThreshold;
			KeyRepeatDelay = keyRepeatDelay;
			KeyRepeatRate = keyRepeatRate;
			ConfigErrorRecovery = configErrorRecovery ? (byte)1 : (byte)0;
			ConfigErrorRecoveryEnableAssert = configErrorRecoveryEnableAssert ? (byte)1 : (byte)0;
			ConfigErrorRecoveryEnableDebugLog = configErrorRecoveryEnableDebugLog ? (byte)1 : (byte)0;
			ConfigErrorRecoveryEnableTooltip = configErrorRecoveryEnableTooltip ? (byte)1 : (byte)0;
			ConfigDebugIsDebuggerPresent = configDebugIsDebuggerPresent ? (byte)1 : (byte)0;
			ConfigDebugHighlightIdConflicts = configDebugHighlightIdConflicts ? (byte)1 : (byte)0;
			ConfigDebugHighlightIdConflictsShowItemPicker = configDebugHighlightIdConflictsShowItemPicker ? (byte)1 : (byte)0;
			ConfigDebugBeginReturnValueOnce = configDebugBeginReturnValueOnce ? (byte)1 : (byte)0;
			ConfigDebugBeginReturnValueLoop = configDebugBeginReturnValueLoop ? (byte)1 : (byte)0;
			ConfigDebugIgnoreFocusLoss = configDebugIgnoreFocusLoss ? (byte)1 : (byte)0;
			ConfigDebugIniSettings = configDebugIniSettings ? (byte)1 : (byte)0;
			BackendPlatformName = backendPlatformName;
			BackendRendererName = backendRendererName;
			BackendPlatformUserData = backendPlatformUserData;
			BackendRendererUserData = backendRendererUserData;
			BackendLanguageUserData = backendLanguageUserData;
			WantCaptureMouse = wantCaptureMouse ? (byte)1 : (byte)0;
			WantCaptureKeyboard = wantCaptureKeyboard ? (byte)1 : (byte)0;
			WantTextInput = wantTextInput ? (byte)1 : (byte)0;
			WantSetMousePos = wantSetMousePos ? (byte)1 : (byte)0;
			WantSaveIniSettings = wantSaveIniSettings ? (byte)1 : (byte)0;
			NavActive = navActive ? (byte)1 : (byte)0;
			NavVisible = navVisible ? (byte)1 : (byte)0;
			Framerate = framerate;
			MetricsRenderVertices = metricsRenderVertices;
			MetricsRenderIndices = metricsRenderIndices;
			MetricsRenderWindows = metricsRenderWindows;
			MetricsActiveWindows = metricsActiveWindows;
			MouseDelta = mouseDelta;
			Ctx = ctx;
			MousePos = mousePos;
			if (mouseDown != default(bool*))
			{
				MouseDown_0 = mouseDown[0];
				MouseDown_1 = mouseDown[1];
				MouseDown_2 = mouseDown[2];
				MouseDown_3 = mouseDown[3];
				MouseDown_4 = mouseDown[4];
			}
			MouseWheel = mouseWheel;
			MouseWheelH = mouseWheelH;
			MouseSource = mouseSource;
			MouseHoveredViewport = mouseHoveredViewport;
			KeyCtrl = keyCtrl ? (byte)1 : (byte)0;
			KeyShift = keyShift ? (byte)1 : (byte)0;
			KeyAlt = keyAlt ? (byte)1 : (byte)0;
			KeySuper = keySuper ? (byte)1 : (byte)0;
			KeyMods = keyMods;
			if (keysData != default(ImGuiKeyData*))
			{
				KeysData_0 = keysData[0];
				KeysData_1 = keysData[1];
				KeysData_2 = keysData[2];
				KeysData_3 = keysData[3];
				KeysData_4 = keysData[4];
				KeysData_5 = keysData[5];
				KeysData_6 = keysData[6];
				KeysData_7 = keysData[7];
				KeysData_8 = keysData[8];
				KeysData_9 = keysData[9];
				KeysData_10 = keysData[10];
				KeysData_11 = keysData[11];
				KeysData_12 = keysData[12];
				KeysData_13 = keysData[13];
				KeysData_14 = keysData[14];
				KeysData_15 = keysData[15];
				KeysData_16 = keysData[16];
				KeysData_17 = keysData[17];
				KeysData_18 = keysData[18];
				KeysData_19 = keysData[19];
				KeysData_20 = keysData[20];
				KeysData_21 = keysData[21];
				KeysData_22 = keysData[22];
				KeysData_23 = keysData[23];
				KeysData_24 = keysData[24];
				KeysData_25 = keysData[25];
				KeysData_26 = keysData[26];
				KeysData_27 = keysData[27];
				KeysData_28 = keysData[28];
				KeysData_29 = keysData[29];
				KeysData_30 = keysData[30];
				KeysData_31 = keysData[31];
				KeysData_32 = keysData[32];
				KeysData_33 = keysData[33];
				KeysData_34 = keysData[34];
				KeysData_35 = keysData[35];
				KeysData_36 = keysData[36];
				KeysData_37 = keysData[37];
				KeysData_38 = keysData[38];
				KeysData_39 = keysData[39];
				KeysData_40 = keysData[40];
				KeysData_41 = keysData[41];
				KeysData_42 = keysData[42];
				KeysData_43 = keysData[43];
				KeysData_44 = keysData[44];
				KeysData_45 = keysData[45];
				KeysData_46 = keysData[46];
				KeysData_47 = keysData[47];
				KeysData_48 = keysData[48];
				KeysData_49 = keysData[49];
				KeysData_50 = keysData[50];
				KeysData_51 = keysData[51];
				KeysData_52 = keysData[52];
				KeysData_53 = keysData[53];
				KeysData_54 = keysData[54];
				KeysData_55 = keysData[55];
				KeysData_56 = keysData[56];
				KeysData_57 = keysData[57];
				KeysData_58 = keysData[58];
				KeysData_59 = keysData[59];
				KeysData_60 = keysData[60];
				KeysData_61 = keysData[61];
				KeysData_62 = keysData[62];
				KeysData_63 = keysData[63];
				KeysData_64 = keysData[64];
				KeysData_65 = keysData[65];
				KeysData_66 = keysData[66];
				KeysData_67 = keysData[67];
				KeysData_68 = keysData[68];
				KeysData_69 = keysData[69];
				KeysData_70 = keysData[70];
				KeysData_71 = keysData[71];
				KeysData_72 = keysData[72];
				KeysData_73 = keysData[73];
				KeysData_74 = keysData[74];
				KeysData_75 = keysData[75];
				KeysData_76 = keysData[76];
				KeysData_77 = keysData[77];
				KeysData_78 = keysData[78];
				KeysData_79 = keysData[79];
				KeysData_80 = keysData[80];
				KeysData_81 = keysData[81];
				KeysData_82 = keysData[82];
				KeysData_83 = keysData[83];
				KeysData_84 = keysData[84];
				KeysData_85 = keysData[85];
				KeysData_86 = keysData[86];
				KeysData_87 = keysData[87];
				KeysData_88 = keysData[88];
				KeysData_89 = keysData[89];
				KeysData_90 = keysData[90];
				KeysData_91 = keysData[91];
				KeysData_92 = keysData[92];
				KeysData_93 = keysData[93];
				KeysData_94 = keysData[94];
				KeysData_95 = keysData[95];
				KeysData_96 = keysData[96];
				KeysData_97 = keysData[97];
				KeysData_98 = keysData[98];
				KeysData_99 = keysData[99];
				KeysData_100 = keysData[100];
				KeysData_101 = keysData[101];
				KeysData_102 = keysData[102];
				KeysData_103 = keysData[103];
				KeysData_104 = keysData[104];
				KeysData_105 = keysData[105];
				KeysData_106 = keysData[106];
				KeysData_107 = keysData[107];
				KeysData_108 = keysData[108];
				KeysData_109 = keysData[109];
				KeysData_110 = keysData[110];
				KeysData_111 = keysData[111];
				KeysData_112 = keysData[112];
				KeysData_113 = keysData[113];
				KeysData_114 = keysData[114];
				KeysData_115 = keysData[115];
				KeysData_116 = keysData[116];
				KeysData_117 = keysData[117];
				KeysData_118 = keysData[118];
				KeysData_119 = keysData[119];
				KeysData_120 = keysData[120];
				KeysData_121 = keysData[121];
				KeysData_122 = keysData[122];
				KeysData_123 = keysData[123];
				KeysData_124 = keysData[124];
				KeysData_125 = keysData[125];
				KeysData_126 = keysData[126];
				KeysData_127 = keysData[127];
				KeysData_128 = keysData[128];
				KeysData_129 = keysData[129];
				KeysData_130 = keysData[130];
				KeysData_131 = keysData[131];
				KeysData_132 = keysData[132];
				KeysData_133 = keysData[133];
				KeysData_134 = keysData[134];
				KeysData_135 = keysData[135];
				KeysData_136 = keysData[136];
				KeysData_137 = keysData[137];
				KeysData_138 = keysData[138];
				KeysData_139 = keysData[139];
				KeysData_140 = keysData[140];
				KeysData_141 = keysData[141];
				KeysData_142 = keysData[142];
				KeysData_143 = keysData[143];
				KeysData_144 = keysData[144];
				KeysData_145 = keysData[145];
				KeysData_146 = keysData[146];
				KeysData_147 = keysData[147];
				KeysData_148 = keysData[148];
				KeysData_149 = keysData[149];
				KeysData_150 = keysData[150];
				KeysData_151 = keysData[151];
				KeysData_152 = keysData[152];
				KeysData_153 = keysData[153];
				KeysData_154 = keysData[154];
			}
			WantCaptureMouseUnlessPopupClose = wantCaptureMouseUnlessPopupClose ? (byte)1 : (byte)0;
			MousePosPrev = mousePosPrev;
			if (mouseClickedPos != default(Vector2*))
			{
				MouseClickedPos_0 = mouseClickedPos[0];
				MouseClickedPos_1 = mouseClickedPos[1];
				MouseClickedPos_2 = mouseClickedPos[2];
				MouseClickedPos_3 = mouseClickedPos[3];
				MouseClickedPos_4 = mouseClickedPos[4];
			}
			if (mouseClickedTime != default(double*))
			{
				MouseClickedTime_0 = mouseClickedTime[0];
				MouseClickedTime_1 = mouseClickedTime[1];
				MouseClickedTime_2 = mouseClickedTime[2];
				MouseClickedTime_3 = mouseClickedTime[3];
				MouseClickedTime_4 = mouseClickedTime[4];
			}
			if (mouseClicked != default(bool*))
			{
				MouseClicked_0 = mouseClicked[0];
				MouseClicked_1 = mouseClicked[1];
				MouseClicked_2 = mouseClicked[2];
				MouseClicked_3 = mouseClicked[3];
				MouseClicked_4 = mouseClicked[4];
			}
			if (mouseDoubleClicked != default(bool*))
			{
				MouseDoubleClicked_0 = mouseDoubleClicked[0];
				MouseDoubleClicked_1 = mouseDoubleClicked[1];
				MouseDoubleClicked_2 = mouseDoubleClicked[2];
				MouseDoubleClicked_3 = mouseDoubleClicked[3];
				MouseDoubleClicked_4 = mouseDoubleClicked[4];
			}
			if (mouseClickedCount != default(ushort*))
			{
				MouseClickedCount_0 = mouseClickedCount[0];
				MouseClickedCount_1 = mouseClickedCount[1];
				MouseClickedCount_2 = mouseClickedCount[2];
				MouseClickedCount_3 = mouseClickedCount[3];
				MouseClickedCount_4 = mouseClickedCount[4];
			}
			if (mouseClickedLastCount != default(ushort*))
			{
				MouseClickedLastCount_0 = mouseClickedLastCount[0];
				MouseClickedLastCount_1 = mouseClickedLastCount[1];
				MouseClickedLastCount_2 = mouseClickedLastCount[2];
				MouseClickedLastCount_3 = mouseClickedLastCount[3];
				MouseClickedLastCount_4 = mouseClickedLastCount[4];
			}
			if (mouseReleased != default(bool*))
			{
				MouseReleased_0 = mouseReleased[0];
				MouseReleased_1 = mouseReleased[1];
				MouseReleased_2 = mouseReleased[2];
				MouseReleased_3 = mouseReleased[3];
				MouseReleased_4 = mouseReleased[4];
			}
			if (mouseReleasedTime != default(double*))
			{
				MouseReleasedTime_0 = mouseReleasedTime[0];
				MouseReleasedTime_1 = mouseReleasedTime[1];
				MouseReleasedTime_2 = mouseReleasedTime[2];
				MouseReleasedTime_3 = mouseReleasedTime[3];
				MouseReleasedTime_4 = mouseReleasedTime[4];
			}
			if (mouseDownOwned != default(bool*))
			{
				MouseDownOwned_0 = mouseDownOwned[0];
				MouseDownOwned_1 = mouseDownOwned[1];
				MouseDownOwned_2 = mouseDownOwned[2];
				MouseDownOwned_3 = mouseDownOwned[3];
				MouseDownOwned_4 = mouseDownOwned[4];
			}
			if (mouseDownOwnedUnlessPopupClose != default(bool*))
			{
				MouseDownOwnedUnlessPopupClose_0 = mouseDownOwnedUnlessPopupClose[0];
				MouseDownOwnedUnlessPopupClose_1 = mouseDownOwnedUnlessPopupClose[1];
				MouseDownOwnedUnlessPopupClose_2 = mouseDownOwnedUnlessPopupClose[2];
				MouseDownOwnedUnlessPopupClose_3 = mouseDownOwnedUnlessPopupClose[3];
				MouseDownOwnedUnlessPopupClose_4 = mouseDownOwnedUnlessPopupClose[4];
			}
			MouseWheelRequestAxisSwap = mouseWheelRequestAxisSwap ? (byte)1 : (byte)0;
			MouseCtrlLeftAsRightClick = mouseCtrlLeftAsRightClick ? (byte)1 : (byte)0;
			if (mouseDownDuration != default(float*))
			{
				MouseDownDuration_0 = mouseDownDuration[0];
				MouseDownDuration_1 = mouseDownDuration[1];
				MouseDownDuration_2 = mouseDownDuration[2];
				MouseDownDuration_3 = mouseDownDuration[3];
				MouseDownDuration_4 = mouseDownDuration[4];
			}
			if (mouseDownDurationPrev != default(float*))
			{
				MouseDownDurationPrev_0 = mouseDownDurationPrev[0];
				MouseDownDurationPrev_1 = mouseDownDurationPrev[1];
				MouseDownDurationPrev_2 = mouseDownDurationPrev[2];
				MouseDownDurationPrev_3 = mouseDownDurationPrev[3];
				MouseDownDurationPrev_4 = mouseDownDurationPrev[4];
			}
			if (mouseDragMaxDistanceAbs != default(Vector2*))
			{
				MouseDragMaxDistanceAbs_0 = mouseDragMaxDistanceAbs[0];
				MouseDragMaxDistanceAbs_1 = mouseDragMaxDistanceAbs[1];
				MouseDragMaxDistanceAbs_2 = mouseDragMaxDistanceAbs[2];
				MouseDragMaxDistanceAbs_3 = mouseDragMaxDistanceAbs[3];
				MouseDragMaxDistanceAbs_4 = mouseDragMaxDistanceAbs[4];
			}
			if (mouseDragMaxDistanceSqr != default(float*))
			{
				MouseDragMaxDistanceSqr_0 = mouseDragMaxDistanceSqr[0];
				MouseDragMaxDistanceSqr_1 = mouseDragMaxDistanceSqr[1];
				MouseDragMaxDistanceSqr_2 = mouseDragMaxDistanceSqr[2];
				MouseDragMaxDistanceSqr_3 = mouseDragMaxDistanceSqr[3];
				MouseDragMaxDistanceSqr_4 = mouseDragMaxDistanceSqr[4];
			}
			PenPressure = penPressure;
			AppFocusLost = appFocusLost ? (byte)1 : (byte)0;
			AppAcceptingEvents = appAcceptingEvents ? (byte)1 : (byte)0;
			InputQueueSurrogate = inputQueueSurrogate;
			InputQueueCharacters = inputQueueCharacters;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiIO(ImGuiConfigFlags configFlags = default, ImGuiBackendFlags backendFlags = default, Vector2 displaySize = default, Vector2 displayFramebufferScale = default, float deltaTime = default, float iniSavingRate = default, byte* iniFilename = default, byte* logFilename = default, void* userData = default, ImFontAtlasPtr fonts = default, ImFontPtr fontDefault = default, bool fontAllowUserScaling = default, bool configNavSwapGamepadButtons = default, bool configNavMoveSetMousePos = default, bool configNavCaptureKeyboard = default, bool configNavEscapeClearFocusItem = default, bool configNavEscapeClearFocusWindow = default, bool configNavCursorVisibleAuto = default, bool configNavCursorVisibleAlways = default, bool configDockingNoSplit = default, bool configDockingWithShift = default, bool configDockingAlwaysTabBar = default, bool configDockingTransparentPayload = default, bool configViewportsNoAutoMerge = default, bool configViewportsNoTaskBarIcon = default, bool configViewportsNoDecoration = default, bool configViewportsNoDefaultParent = default, bool configViewportsPlatformFocusSetsImGuiFocus = default, bool configDpiScaleFonts = default, bool configDpiScaleViewports = default, bool mouseDrawCursor = default, bool configMacOsxBehaviors = default, bool configInputTrickleEventQueue = default, bool configInputTextCursorBlink = default, bool configInputTextEnterKeepActive = default, bool configDragClickToInputText = default, bool configWindowsResizeFromEdges = default, bool configWindowsMoveFromTitleBarOnly = default, bool configWindowsCopyContentsWithCtrlC = default, bool configScrollbarScrollByPage = default, float configMemoryCompactTimer = default, float mouseDoubleClickTime = default, float mouseDoubleClickMaxDist = default, float mouseDragThreshold = default, float keyRepeatDelay = default, float keyRepeatRate = default, bool configErrorRecovery = default, bool configErrorRecoveryEnableAssert = default, bool configErrorRecoveryEnableDebugLog = default, bool configErrorRecoveryEnableTooltip = default, bool configDebugIsDebuggerPresent = default, bool configDebugHighlightIdConflicts = default, bool configDebugHighlightIdConflictsShowItemPicker = default, bool configDebugBeginReturnValueOnce = default, bool configDebugBeginReturnValueLoop = default, bool configDebugIgnoreFocusLoss = default, bool configDebugIniSettings = default, byte* backendPlatformName = default, byte* backendRendererName = default, void* backendPlatformUserData = default, void* backendRendererUserData = default, void* backendLanguageUserData = default, bool wantCaptureMouse = default, bool wantCaptureKeyboard = default, bool wantTextInput = default, bool wantSetMousePos = default, bool wantSaveIniSettings = default, bool navActive = default, bool navVisible = default, float framerate = default, int metricsRenderVertices = default, int metricsRenderIndices = default, int metricsRenderWindows = default, int metricsActiveWindows = default, Vector2 mouseDelta = default, ImGuiContextPtr ctx = default, Vector2 mousePos = default, Span<bool> mouseDown = default, float mouseWheel = default, float mouseWheelH = default, ImGuiMouseSource mouseSource = default, uint mouseHoveredViewport = default, bool keyCtrl = default, bool keyShift = default, bool keyAlt = default, bool keySuper = default, int keyMods = default, Span<ImGuiKeyData> keysData = default, bool wantCaptureMouseUnlessPopupClose = default, Vector2 mousePosPrev = default, Span<Vector2> mouseClickedPos = default, Span<double> mouseClickedTime = default, Span<bool> mouseClicked = default, Span<bool> mouseDoubleClicked = default, Span<ushort> mouseClickedCount = default, Span<ushort> mouseClickedLastCount = default, Span<bool> mouseReleased = default, Span<double> mouseReleasedTime = default, Span<bool> mouseDownOwned = default, Span<bool> mouseDownOwnedUnlessPopupClose = default, bool mouseWheelRequestAxisSwap = default, bool mouseCtrlLeftAsRightClick = default, Span<float> mouseDownDuration = default, Span<float> mouseDownDurationPrev = default, Span<Vector2> mouseDragMaxDistanceAbs = default, Span<float> mouseDragMaxDistanceSqr = default, float penPressure = default, bool appFocusLost = default, bool appAcceptingEvents = default, ushort inputQueueSurrogate = default, ImVector<uint> inputQueueCharacters = default)
		{
			ConfigFlags = configFlags;
			BackendFlags = backendFlags;
			DisplaySize = displaySize;
			DisplayFramebufferScale = displayFramebufferScale;
			DeltaTime = deltaTime;
			IniSavingRate = iniSavingRate;
			IniFilename = iniFilename;
			LogFilename = logFilename;
			UserData = userData;
			Fonts = fonts;
			FontDefault = fontDefault;
			FontAllowUserScaling = fontAllowUserScaling ? (byte)1 : (byte)0;
			ConfigNavSwapGamepadButtons = configNavSwapGamepadButtons ? (byte)1 : (byte)0;
			ConfigNavMoveSetMousePos = configNavMoveSetMousePos ? (byte)1 : (byte)0;
			ConfigNavCaptureKeyboard = configNavCaptureKeyboard ? (byte)1 : (byte)0;
			ConfigNavEscapeClearFocusItem = configNavEscapeClearFocusItem ? (byte)1 : (byte)0;
			ConfigNavEscapeClearFocusWindow = configNavEscapeClearFocusWindow ? (byte)1 : (byte)0;
			ConfigNavCursorVisibleAuto = configNavCursorVisibleAuto ? (byte)1 : (byte)0;
			ConfigNavCursorVisibleAlways = configNavCursorVisibleAlways ? (byte)1 : (byte)0;
			ConfigDockingNoSplit = configDockingNoSplit ? (byte)1 : (byte)0;
			ConfigDockingWithShift = configDockingWithShift ? (byte)1 : (byte)0;
			ConfigDockingAlwaysTabBar = configDockingAlwaysTabBar ? (byte)1 : (byte)0;
			ConfigDockingTransparentPayload = configDockingTransparentPayload ? (byte)1 : (byte)0;
			ConfigViewportsNoAutoMerge = configViewportsNoAutoMerge ? (byte)1 : (byte)0;
			ConfigViewportsNoTaskBarIcon = configViewportsNoTaskBarIcon ? (byte)1 : (byte)0;
			ConfigViewportsNoDecoration = configViewportsNoDecoration ? (byte)1 : (byte)0;
			ConfigViewportsNoDefaultParent = configViewportsNoDefaultParent ? (byte)1 : (byte)0;
			ConfigViewportsPlatformFocusSetsImGuiFocus = configViewportsPlatformFocusSetsImGuiFocus ? (byte)1 : (byte)0;
			ConfigDpiScaleFonts = configDpiScaleFonts ? (byte)1 : (byte)0;
			ConfigDpiScaleViewports = configDpiScaleViewports ? (byte)1 : (byte)0;
			MouseDrawCursor = mouseDrawCursor ? (byte)1 : (byte)0;
			ConfigMacOSXBehaviors = configMacOsxBehaviors ? (byte)1 : (byte)0;
			ConfigInputTrickleEventQueue = configInputTrickleEventQueue ? (byte)1 : (byte)0;
			ConfigInputTextCursorBlink = configInputTextCursorBlink ? (byte)1 : (byte)0;
			ConfigInputTextEnterKeepActive = configInputTextEnterKeepActive ? (byte)1 : (byte)0;
			ConfigDragClickToInputText = configDragClickToInputText ? (byte)1 : (byte)0;
			ConfigWindowsResizeFromEdges = configWindowsResizeFromEdges ? (byte)1 : (byte)0;
			ConfigWindowsMoveFromTitleBarOnly = configWindowsMoveFromTitleBarOnly ? (byte)1 : (byte)0;
			ConfigWindowsCopyContentsWithCtrlC = configWindowsCopyContentsWithCtrlC ? (byte)1 : (byte)0;
			ConfigScrollbarScrollByPage = configScrollbarScrollByPage ? (byte)1 : (byte)0;
			ConfigMemoryCompactTimer = configMemoryCompactTimer;
			MouseDoubleClickTime = mouseDoubleClickTime;
			MouseDoubleClickMaxDist = mouseDoubleClickMaxDist;
			MouseDragThreshold = mouseDragThreshold;
			KeyRepeatDelay = keyRepeatDelay;
			KeyRepeatRate = keyRepeatRate;
			ConfigErrorRecovery = configErrorRecovery ? (byte)1 : (byte)0;
			ConfigErrorRecoveryEnableAssert = configErrorRecoveryEnableAssert ? (byte)1 : (byte)0;
			ConfigErrorRecoveryEnableDebugLog = configErrorRecoveryEnableDebugLog ? (byte)1 : (byte)0;
			ConfigErrorRecoveryEnableTooltip = configErrorRecoveryEnableTooltip ? (byte)1 : (byte)0;
			ConfigDebugIsDebuggerPresent = configDebugIsDebuggerPresent ? (byte)1 : (byte)0;
			ConfigDebugHighlightIdConflicts = configDebugHighlightIdConflicts ? (byte)1 : (byte)0;
			ConfigDebugHighlightIdConflictsShowItemPicker = configDebugHighlightIdConflictsShowItemPicker ? (byte)1 : (byte)0;
			ConfigDebugBeginReturnValueOnce = configDebugBeginReturnValueOnce ? (byte)1 : (byte)0;
			ConfigDebugBeginReturnValueLoop = configDebugBeginReturnValueLoop ? (byte)1 : (byte)0;
			ConfigDebugIgnoreFocusLoss = configDebugIgnoreFocusLoss ? (byte)1 : (byte)0;
			ConfigDebugIniSettings = configDebugIniSettings ? (byte)1 : (byte)0;
			BackendPlatformName = backendPlatformName;
			BackendRendererName = backendRendererName;
			BackendPlatformUserData = backendPlatformUserData;
			BackendRendererUserData = backendRendererUserData;
			BackendLanguageUserData = backendLanguageUserData;
			WantCaptureMouse = wantCaptureMouse ? (byte)1 : (byte)0;
			WantCaptureKeyboard = wantCaptureKeyboard ? (byte)1 : (byte)0;
			WantTextInput = wantTextInput ? (byte)1 : (byte)0;
			WantSetMousePos = wantSetMousePos ? (byte)1 : (byte)0;
			WantSaveIniSettings = wantSaveIniSettings ? (byte)1 : (byte)0;
			NavActive = navActive ? (byte)1 : (byte)0;
			NavVisible = navVisible ? (byte)1 : (byte)0;
			Framerate = framerate;
			MetricsRenderVertices = metricsRenderVertices;
			MetricsRenderIndices = metricsRenderIndices;
			MetricsRenderWindows = metricsRenderWindows;
			MetricsActiveWindows = metricsActiveWindows;
			MouseDelta = mouseDelta;
			Ctx = ctx;
			MousePos = mousePos;
			if (mouseDown != default(Span<bool>))
			{
				MouseDown_0 = mouseDown[0];
				MouseDown_1 = mouseDown[1];
				MouseDown_2 = mouseDown[2];
				MouseDown_3 = mouseDown[3];
				MouseDown_4 = mouseDown[4];
			}
			MouseWheel = mouseWheel;
			MouseWheelH = mouseWheelH;
			MouseSource = mouseSource;
			MouseHoveredViewport = mouseHoveredViewport;
			KeyCtrl = keyCtrl ? (byte)1 : (byte)0;
			KeyShift = keyShift ? (byte)1 : (byte)0;
			KeyAlt = keyAlt ? (byte)1 : (byte)0;
			KeySuper = keySuper ? (byte)1 : (byte)0;
			KeyMods = keyMods;
			if (keysData != default(Span<ImGuiKeyData>))
			{
				KeysData_0 = keysData[0];
				KeysData_1 = keysData[1];
				KeysData_2 = keysData[2];
				KeysData_3 = keysData[3];
				KeysData_4 = keysData[4];
				KeysData_5 = keysData[5];
				KeysData_6 = keysData[6];
				KeysData_7 = keysData[7];
				KeysData_8 = keysData[8];
				KeysData_9 = keysData[9];
				KeysData_10 = keysData[10];
				KeysData_11 = keysData[11];
				KeysData_12 = keysData[12];
				KeysData_13 = keysData[13];
				KeysData_14 = keysData[14];
				KeysData_15 = keysData[15];
				KeysData_16 = keysData[16];
				KeysData_17 = keysData[17];
				KeysData_18 = keysData[18];
				KeysData_19 = keysData[19];
				KeysData_20 = keysData[20];
				KeysData_21 = keysData[21];
				KeysData_22 = keysData[22];
				KeysData_23 = keysData[23];
				KeysData_24 = keysData[24];
				KeysData_25 = keysData[25];
				KeysData_26 = keysData[26];
				KeysData_27 = keysData[27];
				KeysData_28 = keysData[28];
				KeysData_29 = keysData[29];
				KeysData_30 = keysData[30];
				KeysData_31 = keysData[31];
				KeysData_32 = keysData[32];
				KeysData_33 = keysData[33];
				KeysData_34 = keysData[34];
				KeysData_35 = keysData[35];
				KeysData_36 = keysData[36];
				KeysData_37 = keysData[37];
				KeysData_38 = keysData[38];
				KeysData_39 = keysData[39];
				KeysData_40 = keysData[40];
				KeysData_41 = keysData[41];
				KeysData_42 = keysData[42];
				KeysData_43 = keysData[43];
				KeysData_44 = keysData[44];
				KeysData_45 = keysData[45];
				KeysData_46 = keysData[46];
				KeysData_47 = keysData[47];
				KeysData_48 = keysData[48];
				KeysData_49 = keysData[49];
				KeysData_50 = keysData[50];
				KeysData_51 = keysData[51];
				KeysData_52 = keysData[52];
				KeysData_53 = keysData[53];
				KeysData_54 = keysData[54];
				KeysData_55 = keysData[55];
				KeysData_56 = keysData[56];
				KeysData_57 = keysData[57];
				KeysData_58 = keysData[58];
				KeysData_59 = keysData[59];
				KeysData_60 = keysData[60];
				KeysData_61 = keysData[61];
				KeysData_62 = keysData[62];
				KeysData_63 = keysData[63];
				KeysData_64 = keysData[64];
				KeysData_65 = keysData[65];
				KeysData_66 = keysData[66];
				KeysData_67 = keysData[67];
				KeysData_68 = keysData[68];
				KeysData_69 = keysData[69];
				KeysData_70 = keysData[70];
				KeysData_71 = keysData[71];
				KeysData_72 = keysData[72];
				KeysData_73 = keysData[73];
				KeysData_74 = keysData[74];
				KeysData_75 = keysData[75];
				KeysData_76 = keysData[76];
				KeysData_77 = keysData[77];
				KeysData_78 = keysData[78];
				KeysData_79 = keysData[79];
				KeysData_80 = keysData[80];
				KeysData_81 = keysData[81];
				KeysData_82 = keysData[82];
				KeysData_83 = keysData[83];
				KeysData_84 = keysData[84];
				KeysData_85 = keysData[85];
				KeysData_86 = keysData[86];
				KeysData_87 = keysData[87];
				KeysData_88 = keysData[88];
				KeysData_89 = keysData[89];
				KeysData_90 = keysData[90];
				KeysData_91 = keysData[91];
				KeysData_92 = keysData[92];
				KeysData_93 = keysData[93];
				KeysData_94 = keysData[94];
				KeysData_95 = keysData[95];
				KeysData_96 = keysData[96];
				KeysData_97 = keysData[97];
				KeysData_98 = keysData[98];
				KeysData_99 = keysData[99];
				KeysData_100 = keysData[100];
				KeysData_101 = keysData[101];
				KeysData_102 = keysData[102];
				KeysData_103 = keysData[103];
				KeysData_104 = keysData[104];
				KeysData_105 = keysData[105];
				KeysData_106 = keysData[106];
				KeysData_107 = keysData[107];
				KeysData_108 = keysData[108];
				KeysData_109 = keysData[109];
				KeysData_110 = keysData[110];
				KeysData_111 = keysData[111];
				KeysData_112 = keysData[112];
				KeysData_113 = keysData[113];
				KeysData_114 = keysData[114];
				KeysData_115 = keysData[115];
				KeysData_116 = keysData[116];
				KeysData_117 = keysData[117];
				KeysData_118 = keysData[118];
				KeysData_119 = keysData[119];
				KeysData_120 = keysData[120];
				KeysData_121 = keysData[121];
				KeysData_122 = keysData[122];
				KeysData_123 = keysData[123];
				KeysData_124 = keysData[124];
				KeysData_125 = keysData[125];
				KeysData_126 = keysData[126];
				KeysData_127 = keysData[127];
				KeysData_128 = keysData[128];
				KeysData_129 = keysData[129];
				KeysData_130 = keysData[130];
				KeysData_131 = keysData[131];
				KeysData_132 = keysData[132];
				KeysData_133 = keysData[133];
				KeysData_134 = keysData[134];
				KeysData_135 = keysData[135];
				KeysData_136 = keysData[136];
				KeysData_137 = keysData[137];
				KeysData_138 = keysData[138];
				KeysData_139 = keysData[139];
				KeysData_140 = keysData[140];
				KeysData_141 = keysData[141];
				KeysData_142 = keysData[142];
				KeysData_143 = keysData[143];
				KeysData_144 = keysData[144];
				KeysData_145 = keysData[145];
				KeysData_146 = keysData[146];
				KeysData_147 = keysData[147];
				KeysData_148 = keysData[148];
				KeysData_149 = keysData[149];
				KeysData_150 = keysData[150];
				KeysData_151 = keysData[151];
				KeysData_152 = keysData[152];
				KeysData_153 = keysData[153];
				KeysData_154 = keysData[154];
			}
			WantCaptureMouseUnlessPopupClose = wantCaptureMouseUnlessPopupClose ? (byte)1 : (byte)0;
			MousePosPrev = mousePosPrev;
			if (mouseClickedPos != default(Span<Vector2>))
			{
				MouseClickedPos_0 = mouseClickedPos[0];
				MouseClickedPos_1 = mouseClickedPos[1];
				MouseClickedPos_2 = mouseClickedPos[2];
				MouseClickedPos_3 = mouseClickedPos[3];
				MouseClickedPos_4 = mouseClickedPos[4];
			}
			if (mouseClickedTime != default(Span<double>))
			{
				MouseClickedTime_0 = mouseClickedTime[0];
				MouseClickedTime_1 = mouseClickedTime[1];
				MouseClickedTime_2 = mouseClickedTime[2];
				MouseClickedTime_3 = mouseClickedTime[3];
				MouseClickedTime_4 = mouseClickedTime[4];
			}
			if (mouseClicked != default(Span<bool>))
			{
				MouseClicked_0 = mouseClicked[0];
				MouseClicked_1 = mouseClicked[1];
				MouseClicked_2 = mouseClicked[2];
				MouseClicked_3 = mouseClicked[3];
				MouseClicked_4 = mouseClicked[4];
			}
			if (mouseDoubleClicked != default(Span<bool>))
			{
				MouseDoubleClicked_0 = mouseDoubleClicked[0];
				MouseDoubleClicked_1 = mouseDoubleClicked[1];
				MouseDoubleClicked_2 = mouseDoubleClicked[2];
				MouseDoubleClicked_3 = mouseDoubleClicked[3];
				MouseDoubleClicked_4 = mouseDoubleClicked[4];
			}
			if (mouseClickedCount != default(Span<ushort>))
			{
				MouseClickedCount_0 = mouseClickedCount[0];
				MouseClickedCount_1 = mouseClickedCount[1];
				MouseClickedCount_2 = mouseClickedCount[2];
				MouseClickedCount_3 = mouseClickedCount[3];
				MouseClickedCount_4 = mouseClickedCount[4];
			}
			if (mouseClickedLastCount != default(Span<ushort>))
			{
				MouseClickedLastCount_0 = mouseClickedLastCount[0];
				MouseClickedLastCount_1 = mouseClickedLastCount[1];
				MouseClickedLastCount_2 = mouseClickedLastCount[2];
				MouseClickedLastCount_3 = mouseClickedLastCount[3];
				MouseClickedLastCount_4 = mouseClickedLastCount[4];
			}
			if (mouseReleased != default(Span<bool>))
			{
				MouseReleased_0 = mouseReleased[0];
				MouseReleased_1 = mouseReleased[1];
				MouseReleased_2 = mouseReleased[2];
				MouseReleased_3 = mouseReleased[3];
				MouseReleased_4 = mouseReleased[4];
			}
			if (mouseReleasedTime != default(Span<double>))
			{
				MouseReleasedTime_0 = mouseReleasedTime[0];
				MouseReleasedTime_1 = mouseReleasedTime[1];
				MouseReleasedTime_2 = mouseReleasedTime[2];
				MouseReleasedTime_3 = mouseReleasedTime[3];
				MouseReleasedTime_4 = mouseReleasedTime[4];
			}
			if (mouseDownOwned != default(Span<bool>))
			{
				MouseDownOwned_0 = mouseDownOwned[0];
				MouseDownOwned_1 = mouseDownOwned[1];
				MouseDownOwned_2 = mouseDownOwned[2];
				MouseDownOwned_3 = mouseDownOwned[3];
				MouseDownOwned_4 = mouseDownOwned[4];
			}
			if (mouseDownOwnedUnlessPopupClose != default(Span<bool>))
			{
				MouseDownOwnedUnlessPopupClose_0 = mouseDownOwnedUnlessPopupClose[0];
				MouseDownOwnedUnlessPopupClose_1 = mouseDownOwnedUnlessPopupClose[1];
				MouseDownOwnedUnlessPopupClose_2 = mouseDownOwnedUnlessPopupClose[2];
				MouseDownOwnedUnlessPopupClose_3 = mouseDownOwnedUnlessPopupClose[3];
				MouseDownOwnedUnlessPopupClose_4 = mouseDownOwnedUnlessPopupClose[4];
			}
			MouseWheelRequestAxisSwap = mouseWheelRequestAxisSwap ? (byte)1 : (byte)0;
			MouseCtrlLeftAsRightClick = mouseCtrlLeftAsRightClick ? (byte)1 : (byte)0;
			if (mouseDownDuration != default(Span<float>))
			{
				MouseDownDuration_0 = mouseDownDuration[0];
				MouseDownDuration_1 = mouseDownDuration[1];
				MouseDownDuration_2 = mouseDownDuration[2];
				MouseDownDuration_3 = mouseDownDuration[3];
				MouseDownDuration_4 = mouseDownDuration[4];
			}
			if (mouseDownDurationPrev != default(Span<float>))
			{
				MouseDownDurationPrev_0 = mouseDownDurationPrev[0];
				MouseDownDurationPrev_1 = mouseDownDurationPrev[1];
				MouseDownDurationPrev_2 = mouseDownDurationPrev[2];
				MouseDownDurationPrev_3 = mouseDownDurationPrev[3];
				MouseDownDurationPrev_4 = mouseDownDurationPrev[4];
			}
			if (mouseDragMaxDistanceAbs != default(Span<Vector2>))
			{
				MouseDragMaxDistanceAbs_0 = mouseDragMaxDistanceAbs[0];
				MouseDragMaxDistanceAbs_1 = mouseDragMaxDistanceAbs[1];
				MouseDragMaxDistanceAbs_2 = mouseDragMaxDistanceAbs[2];
				MouseDragMaxDistanceAbs_3 = mouseDragMaxDistanceAbs[3];
				MouseDragMaxDistanceAbs_4 = mouseDragMaxDistanceAbs[4];
			}
			if (mouseDragMaxDistanceSqr != default(Span<float>))
			{
				MouseDragMaxDistanceSqr_0 = mouseDragMaxDistanceSqr[0];
				MouseDragMaxDistanceSqr_1 = mouseDragMaxDistanceSqr[1];
				MouseDragMaxDistanceSqr_2 = mouseDragMaxDistanceSqr[2];
				MouseDragMaxDistanceSqr_3 = mouseDragMaxDistanceSqr[3];
				MouseDragMaxDistanceSqr_4 = mouseDragMaxDistanceSqr[4];
			}
			PenPressure = penPressure;
			AppFocusLost = appFocusLost ? (byte)1 : (byte)0;
			AppAcceptingEvents = appAcceptingEvents ? (byte)1 : (byte)0;
			InputQueueSurrogate = inputQueueSurrogate;
			InputQueueCharacters = inputQueueCharacters;
		}


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImGuiKeyData> KeysData
		
		{
			get
			{
				fixed (ImGuiKeyData* p = &this.KeysData_0)
				{
					return new Span<ImGuiKeyData>(p, 155);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector2> MouseClickedPos
		
		{
			get
			{
				fixed (Vector2* p = &this.MouseClickedPos_0)
				{
					return new Span<Vector2>(p, 5);
				}
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector2> MouseDragMaxDistanceAbs
		
		{
			get
			{
				fixed (Vector2* p = &this.MouseDragMaxDistanceAbs_0)
				{
					return new Span<Vector2>(p, 5);
				}
			}
		}
		/// <summary>
		/// Queue a gainloss of focus for the application (generally based on OSplatform focus of your window)<br/>
		/// </summary>
		public unsafe void AddFocusEvent(bool focused)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddFocusEventNative(@this, focused ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Queue a new character input<br/>
		/// </summary>
		public unsafe void AddInputCharacter(uint c)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharacterNative(@this, c);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		public unsafe void AddInputCharactersUTF8(byte* str)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharactersUTF8Native(@this, str);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		public unsafe void AddInputCharactersUTF8(ref byte str)
		{
			fixed (ImGuiIO* @this = &this)
			{
				fixed (byte* pstr = &str)
				{
					ImGui.AddInputCharactersUTF8Native(@this, (byte*)pstr);
				}
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		public unsafe void AddInputCharactersUTF8(ReadOnlySpan<byte> str)
		{
			fixed (ImGuiIO* @this = &this)
			{
				fixed (byte* pstr = str)
				{
					ImGui.AddInputCharactersUTF8Native(@this, (byte*)pstr);
				}
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		public unsafe void AddInputCharactersUTF8(string str)
		{
			fixed (ImGuiIO* @this = &this)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (str != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(str);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImGui.AddInputCharactersUTF8Native(@this, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Queue a new character input from a UTF-16 character, it can be a surrogate<br/>
		/// </summary>
		public unsafe void AddInputCharacterUTF16(ushort c)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddInputCharacterUTF16Native(@this, c);
			}
		}

		/// <summary>
		/// Queue a new key downup event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.<br/>
		/// </summary>
		public unsafe void AddKeyAnalogEvent(ImGuiKey key, bool down, float v)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddKeyAnalogEventNative(@this, key, down ? (byte)1 : (byte)0, v);
			}
		}

		/// <summary>
		/// Queue a new key downup event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)<br/>
		/// </summary>
		public unsafe void AddKeyEvent(ImGuiKey key, bool down)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddKeyEventNative(@this, key, down ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Queue a mouse button change<br/>
		/// </summary>
		public unsafe void AddMouseButtonEvent(int button, bool down)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseButtonEventNative(@this, button, down ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)<br/>
		/// </summary>
		public unsafe void AddMousePosEvent(float x, float y)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMousePosEventNative(@this, x, y);
			}
		}

		/// <summary>
		/// Queue a mouse source change (MouseTouchScreenPen)<br/>
		/// </summary>
		public unsafe void AddMouseSourceEvent(ImGuiMouseSource source)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseSourceEventNative(@this, source);
			}
		}

		/// <summary>
		/// Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).<br/>
		/// </summary>
		public unsafe void AddMouseViewportEvent(uint id)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseViewportEventNative(@this, id);
			}
		}

		/// <summary>
		/// Queue a mouse wheel update. wheel_y&lt;0: scroll down, wheel_y&gt;0: scroll up, wheel_x&lt;0: scroll right, wheel_x&gt;0: scroll left.<br/>
		/// </summary>
		public unsafe void AddMouseWheelEvent(float wheelX, float wheelY)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.AddMouseWheelEventNative(@this, wheelX, wheelY);
			}
		}

		/// <summary>
		/// Clear all incoming events.<br/>
		/// </summary>
		public unsafe void ClearEventsQueue()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.ClearEventsQueueNative(@this);
			}
		}

		/// <summary>
		/// Clear current keyboardgamepad state + current frame text input buffer. Equivalent to releasing all keysbuttons.<br/>
		/// </summary>
		public unsafe void ClearInputKeys()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.ClearInputKeysNative(@this);
			}
		}

		/// <summary>
		/// Clear current mouse state.<br/>
		/// </summary>
		public unsafe void ClearInputMouse()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.ClearInputMouseNative(@this);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.DestroyNative(@this);
			}
		}

		/// <summary>
		/// Set master flag for accepting keymousetext events (default to true). Useful if you have native dialog boxes that are interrupting your application looprefresh, and you want to disable events being queued while your app is frozen.<br/>
		/// </summary>
		public unsafe void SetAppAcceptingEvents(bool acceptingEvents)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetAppAcceptingEventsNative(@this, acceptingEvents ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		public unsafe void SetKeyEventNativeData(ImGuiKey key, int nativeKeycode, int nativeScancode, int nativeLegacyIndex)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetKeyEventNativeDataNative(@this, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
			}
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		public unsafe void SetKeyEventNativeData(ImGuiKey key, int nativeKeycode, int nativeScancode)
		{
			fixed (ImGuiIO* @this = &this)
			{
				ImGui.SetKeyEventNativeDataNative(@this, key, nativeKeycode, nativeScancode, (int)(-1));
			}
		}

	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiIOPtr : IEquatable<ImGuiIOPtr>
	{
		public ImGuiIOPtr(ImGuiIO* handle) { Handle = handle; }

		public ImGuiIO* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiIOPtr Null => new ImGuiIOPtr(null);

		public ImGuiIO this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiIOPtr(ImGuiIO* handle) => new ImGuiIOPtr(handle);

		public static implicit operator ImGuiIO*(ImGuiIOPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiIOPtr left, ImGuiIOPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiIOPtr left, ImGuiIOPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiIOPtr left, ImGuiIO* right) => left.Handle == right;

		public static bool operator !=(ImGuiIOPtr left, ImGuiIO* right) => left.Handle != right;

		public bool Equals(ImGuiIOPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiIOPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiIOPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiConfigFlags ConfigFlags => ref Unsafe.AsRef<ImGuiConfigFlags>(&Handle->ConfigFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiBackendFlags BackendFlags => ref Unsafe.AsRef<ImGuiBackendFlags>(&Handle->BackendFlags);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 DisplaySize => ref Unsafe.AsRef<Vector2>(&Handle->DisplaySize);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 DisplayFramebufferScale => ref Unsafe.AsRef<Vector2>(&Handle->DisplayFramebufferScale);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float DeltaTime => ref Unsafe.AsRef<float>(&Handle->DeltaTime);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float IniSavingRate => ref Unsafe.AsRef<float>(&Handle->IniSavingRate);
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* IniFilename { get => Handle->IniFilename; set => Handle->IniFilename = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* LogFilename { get => Handle->LogFilename; set => Handle->LogFilename = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* UserData { get => Handle->UserData; set => Handle->UserData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontAtlasPtr Fonts => ref Unsafe.AsRef<ImFontAtlasPtr>(&Handle->Fonts);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImFontPtr FontDefault => ref Unsafe.AsRef<ImFontPtr>(&Handle->FontDefault);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool FontAllowUserScaling => ref Unsafe.AsRef<bool>(&Handle->FontAllowUserScaling);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigNavSwapGamepadButtons => ref Unsafe.AsRef<bool>(&Handle->ConfigNavSwapGamepadButtons);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigNavMoveSetMousePos => ref Unsafe.AsRef<bool>(&Handle->ConfigNavMoveSetMousePos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigNavCaptureKeyboard => ref Unsafe.AsRef<bool>(&Handle->ConfigNavCaptureKeyboard);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigNavEscapeClearFocusItem => ref Unsafe.AsRef<bool>(&Handle->ConfigNavEscapeClearFocusItem);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigNavEscapeClearFocusWindow => ref Unsafe.AsRef<bool>(&Handle->ConfigNavEscapeClearFocusWindow);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigNavCursorVisibleAuto => ref Unsafe.AsRef<bool>(&Handle->ConfigNavCursorVisibleAuto);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigNavCursorVisibleAlways => ref Unsafe.AsRef<bool>(&Handle->ConfigNavCursorVisibleAlways);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDockingNoSplit => ref Unsafe.AsRef<bool>(&Handle->ConfigDockingNoSplit);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDockingWithShift => ref Unsafe.AsRef<bool>(&Handle->ConfigDockingWithShift);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDockingAlwaysTabBar => ref Unsafe.AsRef<bool>(&Handle->ConfigDockingAlwaysTabBar);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDockingTransparentPayload => ref Unsafe.AsRef<bool>(&Handle->ConfigDockingTransparentPayload);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigViewportsNoAutoMerge => ref Unsafe.AsRef<bool>(&Handle->ConfigViewportsNoAutoMerge);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigViewportsNoTaskBarIcon => ref Unsafe.AsRef<bool>(&Handle->ConfigViewportsNoTaskBarIcon);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigViewportsNoDecoration => ref Unsafe.AsRef<bool>(&Handle->ConfigViewportsNoDecoration);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigViewportsNoDefaultParent => ref Unsafe.AsRef<bool>(&Handle->ConfigViewportsNoDefaultParent);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigViewportsPlatformFocusSetsImGuiFocus => ref Unsafe.AsRef<bool>(&Handle->ConfigViewportsPlatformFocusSetsImGuiFocus);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDpiScaleFonts => ref Unsafe.AsRef<bool>(&Handle->ConfigDpiScaleFonts);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDpiScaleViewports => ref Unsafe.AsRef<bool>(&Handle->ConfigDpiScaleViewports);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool MouseDrawCursor => ref Unsafe.AsRef<bool>(&Handle->MouseDrawCursor);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigMacOSXBehaviors => ref Unsafe.AsRef<bool>(&Handle->ConfigMacOSXBehaviors);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigInputTrickleEventQueue => ref Unsafe.AsRef<bool>(&Handle->ConfigInputTrickleEventQueue);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigInputTextCursorBlink => ref Unsafe.AsRef<bool>(&Handle->ConfigInputTextCursorBlink);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigInputTextEnterKeepActive => ref Unsafe.AsRef<bool>(&Handle->ConfigInputTextEnterKeepActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDragClickToInputText => ref Unsafe.AsRef<bool>(&Handle->ConfigDragClickToInputText);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigWindowsResizeFromEdges => ref Unsafe.AsRef<bool>(&Handle->ConfigWindowsResizeFromEdges);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigWindowsMoveFromTitleBarOnly => ref Unsafe.AsRef<bool>(&Handle->ConfigWindowsMoveFromTitleBarOnly);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigWindowsCopyContentsWithCtrlC => ref Unsafe.AsRef<bool>(&Handle->ConfigWindowsCopyContentsWithCtrlC);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigScrollbarScrollByPage => ref Unsafe.AsRef<bool>(&Handle->ConfigScrollbarScrollByPage);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float ConfigMemoryCompactTimer => ref Unsafe.AsRef<float>(&Handle->ConfigMemoryCompactTimer);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MouseDoubleClickTime => ref Unsafe.AsRef<float>(&Handle->MouseDoubleClickTime);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MouseDoubleClickMaxDist => ref Unsafe.AsRef<float>(&Handle->MouseDoubleClickMaxDist);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MouseDragThreshold => ref Unsafe.AsRef<float>(&Handle->MouseDragThreshold);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float KeyRepeatDelay => ref Unsafe.AsRef<float>(&Handle->KeyRepeatDelay);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float KeyRepeatRate => ref Unsafe.AsRef<float>(&Handle->KeyRepeatRate);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigErrorRecovery => ref Unsafe.AsRef<bool>(&Handle->ConfigErrorRecovery);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigErrorRecoveryEnableAssert => ref Unsafe.AsRef<bool>(&Handle->ConfigErrorRecoveryEnableAssert);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigErrorRecoveryEnableDebugLog => ref Unsafe.AsRef<bool>(&Handle->ConfigErrorRecoveryEnableDebugLog);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigErrorRecoveryEnableTooltip => ref Unsafe.AsRef<bool>(&Handle->ConfigErrorRecoveryEnableTooltip);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDebugIsDebuggerPresent => ref Unsafe.AsRef<bool>(&Handle->ConfigDebugIsDebuggerPresent);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDebugHighlightIdConflicts => ref Unsafe.AsRef<bool>(&Handle->ConfigDebugHighlightIdConflicts);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDebugHighlightIdConflictsShowItemPicker => ref Unsafe.AsRef<bool>(&Handle->ConfigDebugHighlightIdConflictsShowItemPicker);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDebugBeginReturnValueOnce => ref Unsafe.AsRef<bool>(&Handle->ConfigDebugBeginReturnValueOnce);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDebugBeginReturnValueLoop => ref Unsafe.AsRef<bool>(&Handle->ConfigDebugBeginReturnValueLoop);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDebugIgnoreFocusLoss => ref Unsafe.AsRef<bool>(&Handle->ConfigDebugIgnoreFocusLoss);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool ConfigDebugIniSettings => ref Unsafe.AsRef<bool>(&Handle->ConfigDebugIniSettings);
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* BackendPlatformName { get => Handle->BackendPlatformName; set => Handle->BackendPlatformName = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public byte* BackendRendererName { get => Handle->BackendRendererName; set => Handle->BackendRendererName = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* BackendPlatformUserData { get => Handle->BackendPlatformUserData; set => Handle->BackendPlatformUserData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* BackendRendererUserData { get => Handle->BackendRendererUserData; set => Handle->BackendRendererUserData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public void* BackendLanguageUserData { get => Handle->BackendLanguageUserData; set => Handle->BackendLanguageUserData = value; }
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantCaptureMouse => ref Unsafe.AsRef<bool>(&Handle->WantCaptureMouse);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantCaptureKeyboard => ref Unsafe.AsRef<bool>(&Handle->WantCaptureKeyboard);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantTextInput => ref Unsafe.AsRef<bool>(&Handle->WantTextInput);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantSetMousePos => ref Unsafe.AsRef<bool>(&Handle->WantSetMousePos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantSaveIniSettings => ref Unsafe.AsRef<bool>(&Handle->WantSaveIniSettings);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavActive => ref Unsafe.AsRef<bool>(&Handle->NavActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool NavVisible => ref Unsafe.AsRef<bool>(&Handle->NavVisible);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float Framerate => ref Unsafe.AsRef<float>(&Handle->Framerate);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int MetricsRenderVertices => ref Unsafe.AsRef<int>(&Handle->MetricsRenderVertices);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int MetricsRenderIndices => ref Unsafe.AsRef<int>(&Handle->MetricsRenderIndices);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int MetricsRenderWindows => ref Unsafe.AsRef<int>(&Handle->MetricsRenderWindows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int MetricsActiveWindows => ref Unsafe.AsRef<int>(&Handle->MetricsActiveWindows);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 MouseDelta => ref Unsafe.AsRef<Vector2>(&Handle->MouseDelta);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiContextPtr Ctx => ref Unsafe.AsRef<ImGuiContextPtr>(&Handle->Ctx);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 MousePos => ref Unsafe.AsRef<Vector2>(&Handle->MousePos);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<bool> MouseDown
		
		{
			get
			{
				return new Span<bool>(&Handle->MouseDown_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MouseWheel => ref Unsafe.AsRef<float>(&Handle->MouseWheel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float MouseWheelH => ref Unsafe.AsRef<float>(&Handle->MouseWheelH);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiMouseSource MouseSource => ref Unsafe.AsRef<ImGuiMouseSource>(&Handle->MouseSource);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint MouseHoveredViewport => ref Unsafe.AsRef<uint>(&Handle->MouseHoveredViewport);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool KeyCtrl => ref Unsafe.AsRef<bool>(&Handle->KeyCtrl);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool KeyShift => ref Unsafe.AsRef<bool>(&Handle->KeyShift);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool KeyAlt => ref Unsafe.AsRef<bool>(&Handle->KeyAlt);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool KeySuper => ref Unsafe.AsRef<bool>(&Handle->KeySuper);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int KeyMods => ref Unsafe.AsRef<int>(&Handle->KeyMods);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ImGuiKeyData> KeysData
		
		{
			get
			{
				return new Span<ImGuiKeyData>(&Handle->KeysData_0, 155);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool WantCaptureMouseUnlessPopupClose => ref Unsafe.AsRef<bool>(&Handle->WantCaptureMouseUnlessPopupClose);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref Vector2 MousePosPrev => ref Unsafe.AsRef<Vector2>(&Handle->MousePosPrev);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector2> MouseClickedPos
		
		{
			get
			{
				return new Span<Vector2>(&Handle->MouseClickedPos_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<double> MouseClickedTime
		
		{
			get
			{
				return new Span<double>(&Handle->MouseClickedTime_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<bool> MouseClicked
		
		{
			get
			{
				return new Span<bool>(&Handle->MouseClicked_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<bool> MouseDoubleClicked
		
		{
			get
			{
				return new Span<bool>(&Handle->MouseDoubleClicked_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ushort> MouseClickedCount
		
		{
			get
			{
				return new Span<ushort>(&Handle->MouseClickedCount_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<ushort> MouseClickedLastCount
		
		{
			get
			{
				return new Span<ushort>(&Handle->MouseClickedLastCount_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<bool> MouseReleased
		
		{
			get
			{
				return new Span<bool>(&Handle->MouseReleased_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<double> MouseReleasedTime
		
		{
			get
			{
				return new Span<double>(&Handle->MouseReleasedTime_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<bool> MouseDownOwned
		
		{
			get
			{
				return new Span<bool>(&Handle->MouseDownOwned_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<bool> MouseDownOwnedUnlessPopupClose
		
		{
			get
			{
				return new Span<bool>(&Handle->MouseDownOwnedUnlessPopupClose_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool MouseWheelRequestAxisSwap => ref Unsafe.AsRef<bool>(&Handle->MouseWheelRequestAxisSwap);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool MouseCtrlLeftAsRightClick => ref Unsafe.AsRef<bool>(&Handle->MouseCtrlLeftAsRightClick);
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<float> MouseDownDuration
		
		{
			get
			{
				return new Span<float>(&Handle->MouseDownDuration_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<float> MouseDownDurationPrev
		
		{
			get
			{
				return new Span<float>(&Handle->MouseDownDurationPrev_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<Vector2> MouseDragMaxDistanceAbs
		
		{
			get
			{
				return new Span<Vector2>(&Handle->MouseDragMaxDistanceAbs_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe Span<float> MouseDragMaxDistanceSqr
		
		{
			get
			{
				return new Span<float>(&Handle->MouseDragMaxDistanceSqr_0, 5);
			}
		}
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float PenPressure => ref Unsafe.AsRef<float>(&Handle->PenPressure);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool AppFocusLost => ref Unsafe.AsRef<bool>(&Handle->AppFocusLost);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool AppAcceptingEvents => ref Unsafe.AsRef<bool>(&Handle->AppAcceptingEvents);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort InputQueueSurrogate => ref Unsafe.AsRef<ushort>(&Handle->InputQueueSurrogate);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<uint> InputQueueCharacters => ref Unsafe.AsRef<ImVector<uint>>(&Handle->InputQueueCharacters);
		/// <summary>
		/// Queue a gainloss of focus for the application (generally based on OSplatform focus of your window)<br/>
		/// </summary>
		public unsafe void AddFocusEvent(bool focused)
		{
			ImGui.AddFocusEventNative(Handle, focused ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Queue a new character input<br/>
		/// </summary>
		public unsafe void AddInputCharacter(uint c)
		{
			ImGui.AddInputCharacterNative(Handle, c);
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		public unsafe void AddInputCharactersUTF8(byte* str)
		{
			ImGui.AddInputCharactersUTF8Native(Handle, str);
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		public unsafe void AddInputCharactersUTF8(ref byte str)
		{
			fixed (byte* pstr = &str)
			{
				ImGui.AddInputCharactersUTF8Native(Handle, (byte*)pstr);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		public unsafe void AddInputCharactersUTF8(ReadOnlySpan<byte> str)
		{
			fixed (byte* pstr = str)
			{
				ImGui.AddInputCharactersUTF8Native(Handle, (byte*)pstr);
			}
		}

		/// <summary>
		/// Queue a new characters input from a UTF-8 string<br/>
		/// </summary>
		public unsafe void AddInputCharactersUTF8(string str)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (str != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(str);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(str, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImGui.AddInputCharactersUTF8Native(Handle, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// Queue a new character input from a UTF-16 character, it can be a surrogate<br/>
		/// </summary>
		public unsafe void AddInputCharacterUTF16(ushort c)
		{
			ImGui.AddInputCharacterUTF16Native(Handle, c);
		}

		/// <summary>
		/// Queue a new key downup event for analog values (e.g. ImGuiKey_Gamepad_ values). Dead-zones should be handled by the backend.<br/>
		/// </summary>
		public unsafe void AddKeyAnalogEvent(ImGuiKey key, bool down, float v)
		{
			ImGui.AddKeyAnalogEventNative(Handle, key, down ? (byte)1 : (byte)0, v);
		}

		/// <summary>
		/// Queue a new key downup event. Key should be "translated" (as in, generally ImGuiKey_A matches the key end-user would use to emit an 'A' character)<br/>
		/// </summary>
		public unsafe void AddKeyEvent(ImGuiKey key, bool down)
		{
			ImGui.AddKeyEventNative(Handle, key, down ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Queue a mouse button change<br/>
		/// </summary>
		public unsafe void AddMouseButtonEvent(int button, bool down)
		{
			ImGui.AddMouseButtonEventNative(Handle, button, down ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// Queue a mouse position update. Use -FLT_MAX,-FLT_MAX to signify no mouse (e.g. app not focused and not hovered)<br/>
		/// </summary>
		public unsafe void AddMousePosEvent(float x, float y)
		{
			ImGui.AddMousePosEventNative(Handle, x, y);
		}

		/// <summary>
		/// Queue a mouse source change (MouseTouchScreenPen)<br/>
		/// </summary>
		public unsafe void AddMouseSourceEvent(ImGuiMouseSource source)
		{
			ImGui.AddMouseSourceEventNative(Handle, source);
		}

		/// <summary>
		/// Queue a mouse hovered viewport. Requires backend to set ImGuiBackendFlags_HasMouseHoveredViewport to call this (for multi-viewport support).<br/>
		/// </summary>
		public unsafe void AddMouseViewportEvent(uint id)
		{
			ImGui.AddMouseViewportEventNative(Handle, id);
		}

		/// <summary>
		/// Queue a mouse wheel update. wheel_y&lt;0: scroll down, wheel_y&gt;0: scroll up, wheel_x&lt;0: scroll right, wheel_x&gt;0: scroll left.<br/>
		/// </summary>
		public unsafe void AddMouseWheelEvent(float wheelX, float wheelY)
		{
			ImGui.AddMouseWheelEventNative(Handle, wheelX, wheelY);
		}

		/// <summary>
		/// Clear all incoming events.<br/>
		/// </summary>
		public unsafe void ClearEventsQueue()
		{
			ImGui.ClearEventsQueueNative(Handle);
		}

		/// <summary>
		/// Clear current keyboardgamepad state + current frame text input buffer. Equivalent to releasing all keysbuttons.<br/>
		/// </summary>
		public unsafe void ClearInputKeys()
		{
			ImGui.ClearInputKeysNative(Handle);
		}

		/// <summary>
		/// Clear current mouse state.<br/>
		/// </summary>
		public unsafe void ClearInputMouse()
		{
			ImGui.ClearInputMouseNative(Handle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe void Destroy()
		{
			ImGui.DestroyNative(Handle);
		}

		/// <summary>
		/// Set master flag for accepting keymousetext events (default to true). Useful if you have native dialog boxes that are interrupting your application looprefresh, and you want to disable events being queued while your app is frozen.<br/>
		/// </summary>
		public unsafe void SetAppAcceptingEvents(bool acceptingEvents)
		{
			ImGui.SetAppAcceptingEventsNative(Handle, acceptingEvents ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		public unsafe void SetKeyEventNativeData(ImGuiKey key, int nativeKeycode, int nativeScancode, int nativeLegacyIndex)
		{
			ImGui.SetKeyEventNativeDataNative(Handle, key, nativeKeycode, nativeScancode, nativeLegacyIndex);
		}

		/// <summary>
		/// [Optional] Specify index for legacy &lt;1.87 IsKeyXXX() functions with native indices + specify native keycode, scancode.<br/>
		/// </summary>
		public unsafe void SetKeyEventNativeData(ImGuiKey key, int nativeKeycode, int nativeScancode)
		{
			ImGui.SetKeyEventNativeDataNative(Handle, key, nativeKeycode, nativeScancode, (int)(-1));
		}

	}

}
