// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// To be documented.
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiStackLevelInfo
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public uint ID;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte QueryFrameCount;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte QuerySuccess;

		/// <summary>
		/// To be documented.
		/// </summary>
		public sbyte DataType;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int DescOffset;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiStackLevelInfo(uint id = default, sbyte queryFrameCount = default, bool querySuccess = default, sbyte dataType = default, int descOffset = default)
		{
			ID = id;
			QueryFrameCount = queryFrameCount;
			QuerySuccess = querySuccess ? (byte)1 : (byte)0;
			DataType = dataType;
			DescOffset = descOffset;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiStackLevelInfoPtr : IEquatable<ImGuiStackLevelInfoPtr>
	{
		public ImGuiStackLevelInfoPtr(ImGuiStackLevelInfo* handle) { Handle = handle; }

		public ImGuiStackLevelInfo* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiStackLevelInfoPtr Null => new ImGuiStackLevelInfoPtr(null);

		public ImGuiStackLevelInfo this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiStackLevelInfoPtr(ImGuiStackLevelInfo* handle) => new ImGuiStackLevelInfoPtr(handle);

		public static implicit operator ImGuiStackLevelInfo*(ImGuiStackLevelInfoPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiStackLevelInfoPtr left, ImGuiStackLevelInfoPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiStackLevelInfoPtr left, ImGuiStackLevelInfoPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiStackLevelInfoPtr left, ImGuiStackLevelInfo* right) => left.Handle == right;

		public static bool operator !=(ImGuiStackLevelInfoPtr left, ImGuiStackLevelInfo* right) => left.Handle != right;

		public bool Equals(ImGuiStackLevelInfoPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiStackLevelInfoPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiStackLevelInfoPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint ID => ref Unsafe.AsRef<uint>(&Handle->ID);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte QueryFrameCount => ref Unsafe.AsRef<sbyte>(&Handle->QueryFrameCount);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool QuerySuccess => ref Unsafe.AsRef<bool>(&Handle->QuerySuccess);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref sbyte DataType => ref Unsafe.AsRef<sbyte>(&Handle->DataType);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int DescOffset => ref Unsafe.AsRef<int>(&Handle->DescOffset);
	}

}
