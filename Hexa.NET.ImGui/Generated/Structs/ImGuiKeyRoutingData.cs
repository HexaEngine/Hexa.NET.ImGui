// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Routing table entry (sizeof() == 16 bytes)<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiKeyRoutingData
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public short NextEntryIndex;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort Mods;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort RoutingCurrScore;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ushort RoutingNextScore;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint RoutingCurr;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint RoutingNext;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiKeyRoutingData(short nextEntryIndex = default, ushort mods = default, ushort routingCurrScore = default, ushort routingNextScore = default, uint routingCurr = default, uint routingNext = default)
		{
			NextEntryIndex = nextEntryIndex;
			Mods = mods;
			RoutingCurrScore = routingCurrScore;
			RoutingNextScore = routingNextScore;
			RoutingCurr = routingCurr;
			RoutingNext = routingNext;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiKeyRoutingDataPtr : IEquatable<ImGuiKeyRoutingDataPtr>
	{
		public ImGuiKeyRoutingDataPtr(ImGuiKeyRoutingData* handle) { Handle = handle; }

		public ImGuiKeyRoutingData* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiKeyRoutingDataPtr Null => new ImGuiKeyRoutingDataPtr(null);

		public ImGuiKeyRoutingData this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiKeyRoutingDataPtr(ImGuiKeyRoutingData* handle) => new ImGuiKeyRoutingDataPtr(handle);

		public static implicit operator ImGuiKeyRoutingData*(ImGuiKeyRoutingDataPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiKeyRoutingDataPtr left, ImGuiKeyRoutingDataPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiKeyRoutingDataPtr left, ImGuiKeyRoutingDataPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiKeyRoutingDataPtr left, ImGuiKeyRoutingData* right) => left.Handle == right;

		public static bool operator !=(ImGuiKeyRoutingDataPtr left, ImGuiKeyRoutingData* right) => left.Handle != right;

		public bool Equals(ImGuiKeyRoutingDataPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiKeyRoutingDataPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiKeyRoutingDataPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref short NextEntryIndex => ref Unsafe.AsRef<short>(&Handle->NextEntryIndex);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort Mods => ref Unsafe.AsRef<ushort>(&Handle->Mods);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort RoutingCurrScore => ref Unsafe.AsRef<ushort>(&Handle->RoutingCurrScore);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ushort RoutingNextScore => ref Unsafe.AsRef<ushort>(&Handle->RoutingNextScore);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint RoutingCurr => ref Unsafe.AsRef<uint>(&Handle->RoutingCurr);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint RoutingNext => ref Unsafe.AsRef<uint>(&Handle->RoutingNext);
	}

}
