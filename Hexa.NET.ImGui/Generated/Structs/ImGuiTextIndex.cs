// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// Helper: ImGuiTextIndex<br/>
	/// Maintain a line index for a text buffer. This is a strong candidate to be moved into the public API.<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiTextIndex
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<int> Offsets;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int EndOffset;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiTextIndex(ImVector<int> offsets = default, int endOffset = default)
		{
			Offsets = offsets;
			EndOffset = endOffset;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiTextIndexPtr : IEquatable<ImGuiTextIndexPtr>
	{
		public ImGuiTextIndexPtr(ImGuiTextIndex* handle) { Handle = handle; }

		public ImGuiTextIndex* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiTextIndexPtr Null => new ImGuiTextIndexPtr(null);

		public ImGuiTextIndex this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiTextIndexPtr(ImGuiTextIndex* handle) => new ImGuiTextIndexPtr(handle);

		public static implicit operator ImGuiTextIndex*(ImGuiTextIndexPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiTextIndexPtr left, ImGuiTextIndexPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiTextIndexPtr left, ImGuiTextIndexPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiTextIndexPtr left, ImGuiTextIndex* right) => left.Handle == right;

		public static bool operator !=(ImGuiTextIndexPtr left, ImGuiTextIndex* right) => left.Handle != right;

		public bool Equals(ImGuiTextIndexPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiTextIndexPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiTextIndexPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<int> Offsets => ref Unsafe.AsRef<ImVector<int>>(&Handle->Offsets);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int EndOffset => ref Unsafe.AsRef<int>(&Handle->EndOffset);
	}

}
