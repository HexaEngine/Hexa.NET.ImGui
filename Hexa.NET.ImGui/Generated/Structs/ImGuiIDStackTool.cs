// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	/// <summary>
	/// State for ID Stack tool queries<br/>
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ImGuiIDStackTool
	{
		/// <summary>
		/// To be documented.
		/// </summary>
		public int LastActiveFrame;

		/// <summary>
		/// To be documented.
		/// </summary>
		public int StackLevel;

		/// <summary>
		/// To be documented.
		/// </summary>
		public uint QueryMainId;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImVector<ImGuiStackLevelInfo> Results;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte QueryHookActive;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte OptHexEncodeNonAsciiChars;

		/// <summary>
		/// To be documented.
		/// </summary>
		public byte OptCopyToClipboardOnCtrlC;

		/// <summary>
		/// To be documented.
		/// </summary>
		public float CopyToClipboardLastTime;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer ResultPathsBuf;

		/// <summary>
		/// To be documented.
		/// </summary>
		public ImGuiTextBuffer ResultTempBuf;


		/// <summary>
		/// To be documented.
		/// </summary>
		public unsafe ImGuiIDStackTool(int lastActiveFrame = default, int stackLevel = default, uint queryMainId = default, ImVector<ImGuiStackLevelInfo> results = default, bool queryHookActive = default, bool optHexEncodeNonAsciiChars = default, bool optCopyToClipboardOnCtrlC = default, float copyToClipboardLastTime = default, ImGuiTextBuffer resultPathsBuf = default, ImGuiTextBuffer resultTempBuf = default)
		{
			LastActiveFrame = lastActiveFrame;
			StackLevel = stackLevel;
			QueryMainId = queryMainId;
			Results = results;
			QueryHookActive = queryHookActive ? (byte)1 : (byte)0;
			OptHexEncodeNonAsciiChars = optHexEncodeNonAsciiChars ? (byte)1 : (byte)0;
			OptCopyToClipboardOnCtrlC = optCopyToClipboardOnCtrlC ? (byte)1 : (byte)0;
			CopyToClipboardLastTime = copyToClipboardLastTime;
			ResultPathsBuf = resultPathsBuf;
			ResultTempBuf = resultTempBuf;
		}


	}

	/// <summary>
	/// To be documented.
	/// </summary>
	#if NET5_0_OR_GREATER
	[DebuggerDisplay("{DebuggerDisplay,nq}")]
	#endif
	public unsafe struct ImGuiIDStackToolPtr : IEquatable<ImGuiIDStackToolPtr>
	{
		public ImGuiIDStackToolPtr(ImGuiIDStackTool* handle) { Handle = handle; }

		public ImGuiIDStackTool* Handle;

		public bool IsNull => Handle == null;

		public static ImGuiIDStackToolPtr Null => new ImGuiIDStackToolPtr(null);

		public ImGuiIDStackTool this[int index] { get => Handle[index]; set => Handle[index] = value; }

		public static implicit operator ImGuiIDStackToolPtr(ImGuiIDStackTool* handle) => new ImGuiIDStackToolPtr(handle);

		public static implicit operator ImGuiIDStackTool*(ImGuiIDStackToolPtr handle) => handle.Handle;

		public static bool operator ==(ImGuiIDStackToolPtr left, ImGuiIDStackToolPtr right) => left.Handle == right.Handle;

		public static bool operator !=(ImGuiIDStackToolPtr left, ImGuiIDStackToolPtr right) => left.Handle != right.Handle;

		public static bool operator ==(ImGuiIDStackToolPtr left, ImGuiIDStackTool* right) => left.Handle == right;

		public static bool operator !=(ImGuiIDStackToolPtr left, ImGuiIDStackTool* right) => left.Handle != right;

		public bool Equals(ImGuiIDStackToolPtr other) => Handle == other.Handle;

		/// <inheritdoc/>
		public override bool Equals(object obj) => obj is ImGuiIDStackToolPtr handle && Equals(handle);

		/// <inheritdoc/>
		public override int GetHashCode() => ((nuint)Handle).GetHashCode();

		#if NET5_0_OR_GREATER
		private string DebuggerDisplay => string.Format("ImGuiIDStackToolPtr [0x{0}]", ((nuint)Handle).ToString("X"));
		#endif
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int LastActiveFrame => ref Unsafe.AsRef<int>(&Handle->LastActiveFrame);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref int StackLevel => ref Unsafe.AsRef<int>(&Handle->StackLevel);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref uint QueryMainId => ref Unsafe.AsRef<uint>(&Handle->QueryMainId);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImVector<ImGuiStackLevelInfo> Results => ref Unsafe.AsRef<ImVector<ImGuiStackLevelInfo>>(&Handle->Results);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool QueryHookActive => ref Unsafe.AsRef<bool>(&Handle->QueryHookActive);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool OptHexEncodeNonAsciiChars => ref Unsafe.AsRef<bool>(&Handle->OptHexEncodeNonAsciiChars);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref bool OptCopyToClipboardOnCtrlC => ref Unsafe.AsRef<bool>(&Handle->OptCopyToClipboardOnCtrlC);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref float CopyToClipboardLastTime => ref Unsafe.AsRef<float>(&Handle->CopyToClipboardLastTime);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer ResultPathsBuf => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->ResultPathsBuf);
		/// <summary>
		/// To be documented.
		/// </summary>
		public ref ImGuiTextBuffer ResultTempBuf => ref Unsafe.AsRef<ImGuiTextBuffer>(&Handle->ResultTempBuf);
	}

}
