// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.ImGui
{
	public unsafe partial class ImGuiP
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PlotEx(ImGuiPlotType plotType, ref byte label, delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, ReadOnlySpan<byte> overlayText, float scaleMin, float scaleMax, Vector2 sizeArg)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* poverlayText = overlayText)
				{
					int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PlotEx(ImGuiPlotType plotType, ref byte label, delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, string overlayText, float scaleMin, float scaleMax, Vector2 sizeArg)
		{
			fixed (byte* plabel = &label)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (overlayText != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(overlayText);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(overlayText, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, pStr0, scaleMin, scaleMax, sizeArg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PlotEx(ImGuiPlotType plotType, ReadOnlySpan<byte> label, delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, ref byte overlayText, float scaleMin, float scaleMax, Vector2 sizeArg)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* poverlayText = &overlayText)
				{
					int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
					return ret;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PlotEx(ImGuiPlotType plotType, ReadOnlySpan<byte> label, delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, string overlayText, float scaleMin, float scaleMax, Vector2 sizeArg)
		{
			fixed (byte* plabel = label)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (overlayText != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(overlayText);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(overlayText, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				int ret = PlotExNative(plotType, (byte*)plabel, valuesGetter, data, valuesCount, valuesOffset, pStr0, scaleMin, scaleMax, sizeArg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PlotEx(ImGuiPlotType plotType, string label, delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, ref byte overlayText, float scaleMin, float scaleMax, Vector2 sizeArg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* poverlayText = &overlayText)
			{
				int ret = PlotExNative(plotType, pStr0, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int PlotEx(ImGuiPlotType plotType, string label, delegate*<ImGuiPlotType, byte*, delegate*<void*, int, float>, void*, int, int, byte*, float, float, Vector2, float> valuesGetter, void* data, int valuesCount, int valuesOffset, ReadOnlySpan<byte> overlayText, float scaleMin, float scaleMax, Vector2 sizeArg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* poverlayText = overlayText)
			{
				int ret = PlotExNative(plotType, pStr0, valuesGetter, data, valuesCount, valuesOffset, (byte*)poverlayText, scaleMin, scaleMax, sizeArg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShadeVertsLinearColorGradientKeepAlphaNative(ImDrawList* drawList, int vertStartIdx, int vertEndIdx, Vector2 gradientp0, Vector2 gradientp1, uint col0, uint col1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, int, int, Vector2, Vector2, uint, uint, void>)funcTable[1422])(drawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, Vector2, Vector2, uint, uint, void>)funcTable[1422])((nint)drawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ShadeVertsLinearColorGradientKeepAlpha(ImDrawListPtr drawList, int vertStartIdx, int vertEndIdx, Vector2 gradientp0, Vector2 gradientp1, uint col0, uint col1)
		{
			ShadeVertsLinearColorGradientKeepAlphaNative(drawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ShadeVertsLinearColorGradientKeepAlpha(ref ImDrawList drawList, int vertStartIdx, int vertEndIdx, Vector2 gradientp0, Vector2 gradientp1, uint col0, uint col1)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ShadeVertsLinearColorGradientKeepAlphaNative((ImDrawList*)pdrawList, vertStartIdx, vertEndIdx, gradientp0, gradientp1, col0, col1);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShadeVertsLinearUVNative(ImDrawList* drawList, int vertStartIdx, int vertEndIdx, Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, byte clamp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, int, int, Vector2, Vector2, Vector2, Vector2, byte, void>)funcTable[1423])(drawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, Vector2, Vector2, Vector2, Vector2, byte, void>)funcTable[1423])((nint)drawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ShadeVertsLinearUV(ImDrawListPtr drawList, int vertStartIdx, int vertEndIdx, Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, bool clamp)
		{
			ShadeVertsLinearUVNative(drawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ShadeVertsLinearUV(ref ImDrawList drawList, int vertStartIdx, int vertEndIdx, Vector2 a, Vector2 b, Vector2 uvA, Vector2 uvB, bool clamp)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ShadeVertsLinearUVNative((ImDrawList*)pdrawList, vertStartIdx, vertEndIdx, a, b, uvA, uvB, clamp ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShadeVertsTransformPosNative(ImDrawList* drawList, int vertStartIdx, int vertEndIdx, Vector2 pivotIn, float cosA, float sinA, Vector2 pivotOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, int, int, Vector2, float, float, Vector2, void>)funcTable[1424])(drawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, Vector2, float, float, Vector2, void>)funcTable[1424])((nint)drawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ShadeVertsTransformPos(ImDrawListPtr drawList, int vertStartIdx, int vertEndIdx, Vector2 pivotIn, float cosA, float sinA, Vector2 pivotOut)
		{
			ShadeVertsTransformPosNative(drawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ShadeVertsTransformPos(ref ImDrawList drawList, int vertStartIdx, int vertEndIdx, Vector2 pivotIn, float cosA, float sinA, Vector2 pivotOut)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				ShadeVertsTransformPosNative((ImDrawList*)pdrawList, vertStartIdx, vertEndIdx, pivotIn, cosA, sinA, pivotOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GcCompactTransientMiscBuffersNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1425])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1425])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GcCompactTransientMiscBuffers()
		{
			GcCompactTransientMiscBuffersNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GcCompactTransientWindowBuffersNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)funcTable[1426])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1426])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GcCompactTransientWindowBuffers(ImGuiWindowPtr window)
		{
			GcCompactTransientWindowBuffersNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GcCompactTransientWindowBuffers(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GcCompactTransientWindowBuffersNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GcAwakeTransientWindowBuffersNative(ImGuiWindow* window)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, void>)funcTable[1427])(window);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1427])((nint)window);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GcAwakeTransientWindowBuffers(ImGuiWindowPtr window)
		{
			GcAwakeTransientWindowBuffersNative(window);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void GcAwakeTransientWindowBuffers(ref ImGuiWindow window)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				GcAwakeTransientWindowBuffersNative((ImGuiWindow*)pwindow);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ErrorLogNative(byte* msg)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte>)funcTable[1428])(msg);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, byte>)funcTable[1428])((nint)msg);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ErrorLog(byte* msg)
		{
			byte ret = ErrorLogNative(msg);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ErrorLog(ref byte msg)
		{
			fixed (byte* pmsg = &msg)
			{
				byte ret = ErrorLogNative((byte*)pmsg);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ErrorLog(ReadOnlySpan<byte> msg)
		{
			fixed (byte* pmsg = msg)
			{
				byte ret = ErrorLogNative((byte*)pmsg);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool ErrorLog(string msg)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (msg != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(msg);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(msg, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = ErrorLogNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ErrorRecoveryStoreStateNative(ImGuiErrorRecoveryState* stateOut)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiErrorRecoveryState*, void>)funcTable[1429])(stateOut);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1429])((nint)stateOut);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ErrorRecoveryStoreState(ImGuiErrorRecoveryStatePtr stateOut)
		{
			ErrorRecoveryStoreStateNative(stateOut);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ErrorRecoveryStoreState(ref ImGuiErrorRecoveryState stateOut)
		{
			fixed (ImGuiErrorRecoveryState* pstateOut = &stateOut)
			{
				ErrorRecoveryStoreStateNative((ImGuiErrorRecoveryState*)pstateOut);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ErrorRecoveryTryToRecoverStateNative(ImGuiErrorRecoveryState* stateIn)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiErrorRecoveryState*, void>)funcTable[1430])(stateIn);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1430])((nint)stateIn);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ErrorRecoveryTryToRecoverState(ImGuiErrorRecoveryStatePtr stateIn)
		{
			ErrorRecoveryTryToRecoverStateNative(stateIn);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ErrorRecoveryTryToRecoverState(ref ImGuiErrorRecoveryState stateIn)
		{
			fixed (ImGuiErrorRecoveryState* pstateIn = &stateIn)
			{
				ErrorRecoveryTryToRecoverStateNative((ImGuiErrorRecoveryState*)pstateIn);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ErrorRecoveryTryToRecoverWindowStateNative(ImGuiErrorRecoveryState* stateIn)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiErrorRecoveryState*, void>)funcTable[1431])(stateIn);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1431])((nint)stateIn);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ErrorRecoveryTryToRecoverWindowState(ImGuiErrorRecoveryStatePtr stateIn)
		{
			ErrorRecoveryTryToRecoverWindowStateNative(stateIn);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ErrorRecoveryTryToRecoverWindowState(ref ImGuiErrorRecoveryState stateIn)
		{
			fixed (ImGuiErrorRecoveryState* pstateIn = &stateIn)
			{
				ErrorRecoveryTryToRecoverWindowStateNative((ImGuiErrorRecoveryState*)pstateIn);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ErrorCheckUsingSetCursorPosToExtendParentBoundariesNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1432])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1432])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ErrorCheckUsingSetCursorPosToExtendParentBoundaries()
		{
			ErrorCheckUsingSetCursorPosToExtendParentBoundariesNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ErrorCheckEndFrameFinalizeErrorTooltipNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1433])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1433])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ErrorCheckEndFrameFinalizeErrorTooltip()
		{
			ErrorCheckEndFrameFinalizeErrorTooltipNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte BeginErrorTooltipNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte>)funcTable[1434])();
			#else
			return (byte)((delegate* unmanaged[Cdecl]<byte>)funcTable[1434])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool BeginErrorTooltip()
		{
			byte ret = BeginErrorTooltipNative();
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndErrorTooltipNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1435])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1435])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void EndErrorTooltip()
		{
			EndErrorTooltipNative();
		}

		/// <summary>
		/// size &gt;= 0 : alloc, size = -1 : free<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugAllocHookNative(ImGuiDebugAllocInfo* info, int frameCount, void* ptr, nuint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDebugAllocInfo*, int, void*, nuint, void>)funcTable[1436])(info, frameCount, ptr, size);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, nuint, void>)funcTable[1436])((nint)info, frameCount, (nint)ptr, size);
			#endif
		}

		/// <summary>
		/// size &gt;= 0 : alloc, size = -1 : free<br/>
		/// </summary>
		public static void DebugAllocHook(ImGuiDebugAllocInfoPtr info, int frameCount, void* ptr, nuint size)
		{
			DebugAllocHookNative(info, frameCount, ptr, size);
		}

		/// <summary>
		/// size &gt;= 0 : alloc, size = -1 : free<br/>
		/// </summary>
		public static void DebugAllocHook(ref ImGuiDebugAllocInfo info, int frameCount, void* ptr, nuint size)
		{
			fixed (ImGuiDebugAllocInfo* pinfo = &info)
			{
				DebugAllocHookNative((ImGuiDebugAllocInfo*)pinfo, frameCount, ptr, size);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugDrawCursorPosNative(uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1437])(col);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1437])(col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugDrawCursorPos(uint col)
		{
			DebugDrawCursorPosNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugDrawCursorPos()
		{
			DebugDrawCursorPosNative((uint)(4278190335));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugDrawLineExtentsNative(uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1438])(col);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1438])(col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugDrawLineExtents(uint col)
		{
			DebugDrawLineExtentsNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugDrawLineExtents()
		{
			DebugDrawLineExtentsNative((uint)(4278190335));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugDrawItemRectNative(uint col)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1439])(col);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1439])(col);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugDrawItemRect(uint col)
		{
			DebugDrawItemRectNative(col);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugDrawItemRect()
		{
			DebugDrawItemRectNative((uint)(4278190335));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugTextUnformattedWithLocateItemNative(byte* lineBegin, byte* lineEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, byte*, void>)funcTable[1440])(lineBegin, lineEnd);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1440])((nint)lineBegin, (nint)lineEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(byte* lineBegin, byte* lineEnd)
		{
			DebugTextUnformattedWithLocateItemNative(lineBegin, lineEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(ref byte lineBegin, byte* lineEnd)
		{
			fixed (byte* plineBegin = &lineBegin)
			{
				DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, lineEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(ReadOnlySpan<byte> lineBegin, byte* lineEnd)
		{
			fixed (byte* plineBegin = lineBegin)
			{
				DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, lineEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(string lineBegin, byte* lineEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lineBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lineBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lineBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugTextUnformattedWithLocateItemNative(pStr0, lineEnd);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(byte* lineBegin, ref byte lineEnd)
		{
			fixed (byte* plineEnd = &lineEnd)
			{
				DebugTextUnformattedWithLocateItemNative(lineBegin, (byte*)plineEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(byte* lineBegin, ReadOnlySpan<byte> lineEnd)
		{
			fixed (byte* plineEnd = lineEnd)
			{
				DebugTextUnformattedWithLocateItemNative(lineBegin, (byte*)plineEnd);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(byte* lineBegin, string lineEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lineEnd != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lineEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lineEnd, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugTextUnformattedWithLocateItemNative(lineBegin, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(ref byte lineBegin, ref byte lineEnd)
		{
			fixed (byte* plineBegin = &lineBegin)
			{
				fixed (byte* plineEnd = &lineEnd)
				{
					DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, (byte*)plineEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(ReadOnlySpan<byte> lineBegin, ReadOnlySpan<byte> lineEnd)
		{
			fixed (byte* plineBegin = lineBegin)
			{
				fixed (byte* plineEnd = lineEnd)
				{
					DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, (byte*)plineEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(string lineBegin, string lineEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lineBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lineBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lineBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (lineEnd != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(lineEnd);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(lineEnd, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			DebugTextUnformattedWithLocateItemNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(ref byte lineBegin, ReadOnlySpan<byte> lineEnd)
		{
			fixed (byte* plineBegin = &lineBegin)
			{
				fixed (byte* plineEnd = lineEnd)
				{
					DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, (byte*)plineEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(ref byte lineBegin, string lineEnd)
		{
			fixed (byte* plineBegin = &lineBegin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (lineEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(lineEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(lineEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(ReadOnlySpan<byte> lineBegin, ref byte lineEnd)
		{
			fixed (byte* plineBegin = lineBegin)
			{
				fixed (byte* plineEnd = &lineEnd)
				{
					DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, (byte*)plineEnd);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(ReadOnlySpan<byte> lineBegin, string lineEnd)
		{
			fixed (byte* plineBegin = lineBegin)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (lineEnd != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(lineEnd);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(lineEnd, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugTextUnformattedWithLocateItemNative((byte*)plineBegin, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(string lineBegin, ref byte lineEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lineBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lineBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lineBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* plineEnd = &lineEnd)
			{
				DebugTextUnformattedWithLocateItemNative(pStr0, (byte*)plineEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugTextUnformattedWithLocateItem(string lineBegin, ReadOnlySpan<byte> lineEnd)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (lineBegin != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(lineBegin);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(lineBegin, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* plineEnd = lineEnd)
			{
				DebugTextUnformattedWithLocateItemNative(pStr0, (byte*)plineEnd);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Call sparingly: only 1 at the same time!<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugLocateItemNative(uint targetId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1441])(targetId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1441])(targetId);
			#endif
		}

		/// <summary>
		/// Call sparingly: only 1 at the same time!<br/>
		/// </summary>
		public static void DebugLocateItem(uint targetId)
		{
			DebugLocateItemNative(targetId);
		}

		/// <summary>
		/// Only call on reaction to a mouse Hover: because only 1 at the same time!<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugLocateItemOnHoverNative(uint targetId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1442])(targetId);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1442])(targetId);
			#endif
		}

		/// <summary>
		/// Only call on reaction to a mouse Hover: because only 1 at the same time!<br/>
		/// </summary>
		public static void DebugLocateItemOnHover(uint targetId)
		{
			DebugLocateItemOnHoverNative(targetId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugLocateItemResolveWithLastItemNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1443])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1443])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugLocateItemResolveWithLastItem()
		{
			DebugLocateItemResolveWithLastItemNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugBreakClearDataNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[1444])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[1444])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugBreakClearData()
		{
			DebugBreakClearDataNative();
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte DebugBreakButtonNative(byte* label, byte* descriptionOfLocation)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, byte*, byte>)funcTable[1445])(label, descriptionOfLocation);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<nint, nint, byte>)funcTable[1445])((nint)label, (nint)descriptionOfLocation);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(byte* label, byte* descriptionOfLocation)
		{
			byte ret = DebugBreakButtonNative(label, descriptionOfLocation);
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(ref byte label, byte* descriptionOfLocation)
		{
			fixed (byte* plabel = &label)
			{
				byte ret = DebugBreakButtonNative((byte*)plabel, descriptionOfLocation);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(ReadOnlySpan<byte> label, byte* descriptionOfLocation)
		{
			fixed (byte* plabel = label)
			{
				byte ret = DebugBreakButtonNative((byte*)plabel, descriptionOfLocation);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(string label, byte* descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugBreakButtonNative(pStr0, descriptionOfLocation);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(byte* label, ref byte descriptionOfLocation)
		{
			fixed (byte* pdescriptionOfLocation = &descriptionOfLocation)
			{
				byte ret = DebugBreakButtonNative(label, (byte*)pdescriptionOfLocation);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(byte* label, ReadOnlySpan<byte> descriptionOfLocation)
		{
			fixed (byte* pdescriptionOfLocation = descriptionOfLocation)
			{
				byte ret = DebugBreakButtonNative(label, (byte*)pdescriptionOfLocation);
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(byte* label, string descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (descriptionOfLocation != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(descriptionOfLocation);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(descriptionOfLocation, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = DebugBreakButtonNative(label, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(ref byte label, ref byte descriptionOfLocation)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pdescriptionOfLocation = &descriptionOfLocation)
				{
					byte ret = DebugBreakButtonNative((byte*)plabel, (byte*)pdescriptionOfLocation);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(ReadOnlySpan<byte> label, ReadOnlySpan<byte> descriptionOfLocation)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pdescriptionOfLocation = descriptionOfLocation)
				{
					byte ret = DebugBreakButtonNative((byte*)plabel, (byte*)pdescriptionOfLocation);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(string label, string descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (descriptionOfLocation != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(descriptionOfLocation);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(descriptionOfLocation, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			byte ret = DebugBreakButtonNative(pStr0, pStr1);
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(ref byte label, ReadOnlySpan<byte> descriptionOfLocation)
		{
			fixed (byte* plabel = &label)
			{
				fixed (byte* pdescriptionOfLocation = descriptionOfLocation)
				{
					byte ret = DebugBreakButtonNative((byte*)plabel, (byte*)pdescriptionOfLocation);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(ref byte label, string descriptionOfLocation)
		{
			fixed (byte* plabel = &label)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (descriptionOfLocation != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(descriptionOfLocation);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(descriptionOfLocation, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DebugBreakButtonNative((byte*)plabel, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(ReadOnlySpan<byte> label, ref byte descriptionOfLocation)
		{
			fixed (byte* plabel = label)
			{
				fixed (byte* pdescriptionOfLocation = &descriptionOfLocation)
				{
					byte ret = DebugBreakButtonNative((byte*)plabel, (byte*)pdescriptionOfLocation);
					return ret != 0;
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(ReadOnlySpan<byte> label, string descriptionOfLocation)
		{
			fixed (byte* plabel = label)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (descriptionOfLocation != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(descriptionOfLocation);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(descriptionOfLocation, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				byte ret = DebugBreakButtonNative((byte*)plabel, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(string label, ref byte descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pdescriptionOfLocation = &descriptionOfLocation)
			{
				byte ret = DebugBreakButtonNative(pStr0, (byte*)pdescriptionOfLocation);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static bool DebugBreakButton(string label, ReadOnlySpan<byte> descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			fixed (byte* pdescriptionOfLocation = descriptionOfLocation)
			{
				byte ret = DebugBreakButtonNative(pStr0, (byte*)pdescriptionOfLocation);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
				return ret != 0;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugBreakButtonTooltipNative(byte keyboardOnly, byte* descriptionOfLocation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte*, void>)funcTable[1446])(keyboardOnly, descriptionOfLocation);
			#else
			((delegate* unmanaged[Cdecl]<byte, nint, void>)funcTable[1446])(keyboardOnly, (nint)descriptionOfLocation);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugBreakButtonTooltip(bool keyboardOnly, byte* descriptionOfLocation)
		{
			DebugBreakButtonTooltipNative(keyboardOnly ? (byte)1 : (byte)0, descriptionOfLocation);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugBreakButtonTooltip(bool keyboardOnly, ref byte descriptionOfLocation)
		{
			fixed (byte* pdescriptionOfLocation = &descriptionOfLocation)
			{
				DebugBreakButtonTooltipNative(keyboardOnly ? (byte)1 : (byte)0, (byte*)pdescriptionOfLocation);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugBreakButtonTooltip(bool keyboardOnly, ReadOnlySpan<byte> descriptionOfLocation)
		{
			fixed (byte* pdescriptionOfLocation = descriptionOfLocation)
			{
				DebugBreakButtonTooltipNative(keyboardOnly ? (byte)1 : (byte)0, (byte*)pdescriptionOfLocation);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugBreakButtonTooltip(bool keyboardOnly, string descriptionOfLocation)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (descriptionOfLocation != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(descriptionOfLocation);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(descriptionOfLocation, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugBreakButtonTooltipNative(keyboardOnly ? (byte)1 : (byte)0, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShowFontAtlasNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1447])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1447])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ShowFontAtlas(ImFontAtlasPtr atlas)
		{
			ShowFontAtlasNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ShowFontAtlas(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ShowFontAtlasNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugHookIdInfoNative(uint id, ImGuiDataType dataType, void* dataId, void* dataIdEnd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ImGuiDataType, void*, void*, void>)funcTable[1448])(id, dataType, dataId, dataIdEnd);
			#else
			((delegate* unmanaged[Cdecl]<uint, ImGuiDataType, nint, nint, void>)funcTable[1448])(id, dataType, (nint)dataId, (nint)dataIdEnd);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugHookIdInfo(uint id, ImGuiDataType dataType, void* dataId, void* dataIdEnd)
		{
			DebugHookIdInfoNative(id, dataType, dataId, dataIdEnd);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeColumnsNative(ImGuiOldColumns* columns)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiOldColumns*, void>)funcTable[1449])(columns);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1449])((nint)columns);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeColumns(ImGuiOldColumnsPtr columns)
		{
			DebugNodeColumnsNative(columns);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeColumns(ref ImGuiOldColumns columns)
		{
			fixed (ImGuiOldColumns* pcolumns = &columns)
			{
				DebugNodeColumnsNative((ImGuiOldColumns*)pcolumns);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeDockNodeNative(ImGuiDockNode* node, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiDockNode*, byte*, void>)funcTable[1450])(node, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1450])((nint)node, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDockNode(ImGuiDockNodePtr node, byte* label)
		{
			DebugNodeDockNodeNative(node, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDockNode(ref ImGuiDockNode node, byte* label)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				DebugNodeDockNodeNative((ImGuiDockNode*)pnode, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDockNode(ImGuiDockNodePtr node, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeDockNodeNative(node, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDockNode(ImGuiDockNodePtr node, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeDockNodeNative(node, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDockNode(ImGuiDockNodePtr node, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeDockNodeNative(node, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDockNode(ref ImGuiDockNode node, ref byte label)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDockNodeNative((ImGuiDockNode*)pnode, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDockNode(ref ImGuiDockNode node, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDockNodeNative((ImGuiDockNode*)pnode, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDockNode(ref ImGuiDockNode node, string label)
		{
			fixed (ImGuiDockNode* pnode = &node)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDockNodeNative((ImGuiDockNode*)pnode, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeDrawListNative(ImGuiWindow* window, ImGuiViewportP* viewport, ImDrawList* drawList, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, ImGuiViewportP*, ImDrawList*, byte*, void>)funcTable[1451])(window, viewport, drawList, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)funcTable[1451])((nint)window, (nint)viewport, (nint)drawList, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ImDrawListPtr drawList, byte* label)
		{
			DebugNodeDrawListNative(window, viewport, drawList, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ImDrawListPtr drawList, byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, drawList, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, byte* label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, label);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, byte* label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, label);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, byte* label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, label);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, label);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ImDrawListPtr drawList, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeDrawListNative(window, viewport, drawList, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ImDrawListPtr drawList, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeDrawListNative(window, viewport, drawList, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ImDrawListPtr drawList, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeDrawListNative(window, viewport, drawList, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ImDrawListPtr drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ImDrawListPtr drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ImDrawListPtr drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, drawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, ref byte label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, drawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ImDrawListPtr drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, drawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeDrawListNative(window, viewport, (ImDrawList*)pdrawList, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ImGuiViewportPPtr viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative((ImGuiWindow*)pwindow, viewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = &label)
					{
						DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (byte* plabel = label)
					{
						DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ImGuiWindowPtr window, ref ImGuiViewportP viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					byte* pStr0 = null;
					int pStrSize0 = 0;
					if (label != null)
					{
						pStrSize0 = Utils.GetByteCountUTF8(label);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
						}
						else
						{
							byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
							pStr0 = pStrStack0;
						}
						int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
						pStr0[pStrOffset0] = 0;
					}
					DebugNodeDrawListNative(window, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						Utils.Free(pStr0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						fixed (byte* plabel = &label)
						{
							DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						fixed (byte* plabel = label)
						{
							DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, (byte*)plabel);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawList(ref ImGuiWindow window, ref ImGuiViewportP viewport, ref ImDrawList drawList, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					fixed (ImDrawList* pdrawList = &drawList)
					{
						byte* pStr0 = null;
						int pStrSize0 = 0;
						if (label != null)
						{
							pStrSize0 = Utils.GetByteCountUTF8(label);
							if (pStrSize0 >= Utils.MaxStackallocSize)
							{
								pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
							}
							else
							{
								byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
								pStr0 = pStrStack0;
							}
							int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
							pStr0[pStrOffset0] = 0;
						}
						DebugNodeDrawListNative((ImGuiWindow*)pwindow, (ImGuiViewportP*)pviewport, (ImDrawList*)pdrawList, pStr0);
						if (pStrSize0 >= Utils.MaxStackallocSize)
						{
							Utils.Free(pStr0);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeDrawCmdShowMeshAndBoundingBoxNative(ImDrawList* outDrawList, ImDrawList* drawList, ImDrawCmd* drawCmd, byte showMesh, byte showAabb)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImDrawList*, ImDrawCmd*, byte, byte, void>)funcTable[1452])(outDrawList, drawList, drawCmd, showMesh, showAabb);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, byte, byte, void>)funcTable[1452])((nint)outDrawList, (nint)drawList, (nint)drawCmd, showMesh, showAabb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ImDrawListPtr drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ImDrawListPtr drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ref ImDrawList drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ref ImDrawList drawList, ImDrawCmdPtr drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, drawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ImDrawListPtr drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawCmd* pdrawCmd = &drawCmd)
			{
				DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ImDrawListPtr drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, drawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawListPtr outDrawList, ref ImDrawList drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImDrawCmd* pdrawCmd = &drawCmd)
				{
					DebugNodeDrawCmdShowMeshAndBoundingBoxNative(outDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeDrawCmdShowMeshAndBoundingBox(ref ImDrawList outDrawList, ref ImDrawList drawList, ref ImDrawCmd drawCmd, bool showMesh, bool showAabb)
		{
			fixed (ImDrawList* poutDrawList = &outDrawList)
			{
				fixed (ImDrawList* pdrawList = &drawList)
				{
					fixed (ImDrawCmd* pdrawCmd = &drawCmd)
					{
						DebugNodeDrawCmdShowMeshAndBoundingBoxNative((ImDrawList*)poutDrawList, (ImDrawList*)pdrawList, (ImDrawCmd*)pdrawCmd, showMesh ? (byte)1 : (byte)0, showAabb ? (byte)1 : (byte)0);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeFontNative(ImFont* font)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, void>)funcTable[1453])(font);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1453])((nint)font);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFont(ImFontPtr font)
		{
			DebugNodeFontNative(font);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFont(ref ImFont font)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontNative((ImFont*)pfont);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeFontGlyphesForSrcMaskNative(ImFont* font, ImFontBaked* baked, int srcMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, ImFontBaked*, int, void>)funcTable[1454])(font, baked, srcMask);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)funcTable[1454])((nint)font, (nint)baked, srcMask);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyphesForSrcMask(ImFontPtr font, ImFontBakedPtr baked, int srcMask)
		{
			DebugNodeFontGlyphesForSrcMaskNative(font, baked, srcMask);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyphesForSrcMask(ref ImFont font, ImFontBakedPtr baked, int srcMask)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontGlyphesForSrcMaskNative((ImFont*)pfont, baked, srcMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyphesForSrcMask(ImFontPtr font, ref ImFontBaked baked, int srcMask)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				DebugNodeFontGlyphesForSrcMaskNative(font, (ImFontBaked*)pbaked, srcMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyphesForSrcMask(ref ImFont font, ref ImFontBaked baked, int srcMask)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					DebugNodeFontGlyphesForSrcMaskNative((ImFont*)pfont, (ImFontBaked*)pbaked, srcMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeFontGlyphNative(ImFont* font, ImFontGlyph* glyph)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFont*, ImFontGlyph*, void>)funcTable[1455])(font, glyph);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1455])((nint)font, (nint)glyph);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ImFontPtr font, ImFontGlyphPtr glyph)
		{
			DebugNodeFontGlyphNative(font, glyph);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ref ImFont font, ImFontGlyphPtr glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				DebugNodeFontGlyphNative((ImFont*)pfont, glyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ImFontPtr font, ref ImFontGlyph glyph)
		{
			fixed (ImFontGlyph* pglyph = &glyph)
			{
				DebugNodeFontGlyphNative(font, (ImFontGlyph*)pglyph);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeFontGlyph(ref ImFont font, ref ImFontGlyph glyph)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontGlyph* pglyph = &glyph)
				{
					DebugNodeFontGlyphNative((ImFont*)pfont, (ImFontGlyph*)pglyph);
				}
			}
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTextureNative(ImTextureData* tex, int intId, ImFontAtlasRect* highlightRect)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImTextureData*, int, ImFontAtlasRect*, void>)funcTable[1456])(tex, intId, highlightRect);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, void>)funcTable[1456])((nint)tex, intId, (nint)highlightRect);
			#endif
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ImTextureDataPtr tex, int intId, ImFontAtlasRectPtr highlightRect)
		{
			DebugNodeTextureNative(tex, intId, highlightRect);
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ImTextureDataPtr tex, int intId)
		{
			DebugNodeTextureNative(tex, intId, (ImFontAtlasRect*)(default));
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ref ImTextureData tex, int intId, ImFontAtlasRectPtr highlightRect)
		{
			fixed (ImTextureData* ptex = &tex)
			{
				DebugNodeTextureNative((ImTextureData*)ptex, intId, highlightRect);
			}
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ref ImTextureData tex, int intId)
		{
			fixed (ImTextureData* ptex = &tex)
			{
				DebugNodeTextureNative((ImTextureData*)ptex, intId, (ImFontAtlasRect*)(default));
			}
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ImTextureDataPtr tex, int intId, ref ImFontAtlasRect highlightRect)
		{
			fixed (ImFontAtlasRect* phighlightRect = &highlightRect)
			{
				DebugNodeTextureNative(tex, intId, (ImFontAtlasRect*)phighlightRect);
			}
		}

		/// <summary>
		/// ID used to facilitate persisting the "current" texture.<br/>
		/// </summary>
		public static void DebugNodeTexture(ref ImTextureData tex, int intId, ref ImFontAtlasRect highlightRect)
		{
			fixed (ImTextureData* ptex = &tex)
			{
				fixed (ImFontAtlasRect* phighlightRect = &highlightRect)
				{
					DebugNodeTextureNative((ImTextureData*)ptex, intId, (ImFontAtlasRect*)phighlightRect);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeStorageNative(ImGuiStorage* storage, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiStorage*, byte*, void>)funcTable[1457])(storage, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1457])((nint)storage, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, byte* label)
		{
			DebugNodeStorageNative(storage, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, byte* label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				DebugNodeStorageNative((ImGuiStorage*)pstorage, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeStorageNative(storage, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ImGuiStoragePtr storage, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeStorageNative(storage, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, ref byte label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeStorageNative((ImGuiStorage*)pstorage, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeStorage(ref ImGuiStorage storage, string label)
		{
			fixed (ImGuiStorage* pstorage = &storage)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeStorageNative((ImGuiStorage*)pstorage, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTabBarNative(ImGuiTabBar* tabBar, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTabBar*, byte*, void>)funcTable[1458])(tabBar, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1458])((nint)tabBar, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, byte* label)
		{
			DebugNodeTabBarNative(tabBar, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, byte* label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeTabBarNative(tabBar, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ImGuiTabBarPtr tabBar, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeTabBarNative(tabBar, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, ref byte label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTabBar(ref ImGuiTabBar tabBar, string label)
		{
			fixed (ImGuiTabBar* ptabBar = &tabBar)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeTabBarNative((ImGuiTabBar*)ptabBar, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTableNative(ImGuiTable* table)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTable*, void>)funcTable[1459])(table);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1459])((nint)table);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTable(ImGuiTablePtr table)
		{
			DebugNodeTableNative(table);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTable(ref ImGuiTable table)
		{
			fixed (ImGuiTable* ptable = &table)
			{
				DebugNodeTableNative((ImGuiTable*)ptable);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTableSettingsNative(ImGuiTableSettings* settings)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTableSettings*, void>)funcTable[1460])(settings);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1460])((nint)settings);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTableSettings(ImGuiTableSettingsPtr settings)
		{
			DebugNodeTableSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTableSettings(ref ImGuiTableSettings settings)
		{
			fixed (ImGuiTableSettings* psettings = &settings)
			{
				DebugNodeTableSettingsNative((ImGuiTableSettings*)psettings);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeInputTextStateNative(ImGuiInputTextState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiInputTextState*, void>)funcTable[1461])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1461])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeInputTextState(ImGuiInputTextStatePtr state)
		{
			DebugNodeInputTextStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeInputTextState(ref ImGuiInputTextState state)
		{
			fixed (ImGuiInputTextState* pstate = &state)
			{
				DebugNodeInputTextStateNative((ImGuiInputTextState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeTypingSelectStateNative(ImGuiTypingSelectState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiTypingSelectState*, void>)funcTable[1462])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1462])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTypingSelectState(ImGuiTypingSelectStatePtr state)
		{
			DebugNodeTypingSelectStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeTypingSelectState(ref ImGuiTypingSelectState state)
		{
			fixed (ImGuiTypingSelectState* pstate = &state)
			{
				DebugNodeTypingSelectStateNative((ImGuiTypingSelectState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeMultiSelectStateNative(ImGuiMultiSelectState* state)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiMultiSelectState*, void>)funcTable[1463])(state);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1463])((nint)state);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeMultiSelectState(ImGuiMultiSelectStatePtr state)
		{
			DebugNodeMultiSelectStateNative(state);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeMultiSelectState(ref ImGuiMultiSelectState state)
		{
			fixed (ImGuiMultiSelectState* pstate = &state)
			{
				DebugNodeMultiSelectStateNative((ImGuiMultiSelectState*)pstate);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowNative(ImGuiWindow* window, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow*, byte*, void>)funcTable[1464])(window, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1464])((nint)window, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, byte* label)
		{
			DebugNodeWindowNative(window, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, byte* label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				DebugNodeWindowNative((ImGuiWindow*)pwindow, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeWindowNative(window, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ImGuiWindowPtr window, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowNative(window, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, ref byte label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, ReadOnlySpan<byte> label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeWindowNative((ImGuiWindow*)pwindow, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindow(ref ImGuiWindow window, string label)
		{
			fixed (ImGuiWindow* pwindow = &window)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowNative((ImGuiWindow*)pwindow, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowSettingsNative(ImGuiWindowSettings* settings)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindowSettings*, void>)funcTable[1465])(settings);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1465])((nint)settings);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowSettings(ImGuiWindowSettingsPtr settings)
		{
			DebugNodeWindowSettingsNative(settings);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowSettings(ref ImGuiWindowSettings settings)
		{
			fixed (ImGuiWindowSettings* psettings = &settings)
			{
				DebugNodeWindowSettingsNative((ImGuiWindowSettings*)psettings);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowsListNative(ImVector<ImGuiWindowPtr>* windows, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVector<ImGuiWindowPtr>*, byte*, void>)funcTable[1466])(windows, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1466])((nint)windows, (nint)label);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, byte* label)
		{
			DebugNodeWindowsListNative(windows, label);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, byte* label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, label);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, ref byte label)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel = label)
			{
				DebugNodeWindowsListNative(windows, (byte*)plabel);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ImVector<ImGuiWindowPtr>* windows, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodeWindowsListNative(windows, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, ref byte label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, ReadOnlySpan<byte> label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				fixed (byte* plabel = label)
				{
					DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, (byte*)plabel);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsList(ref ImVector<ImGuiWindowPtr> windows, string label)
		{
			fixed (ImVector<ImGuiWindowPtr>* pwindows = &windows)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodeWindowsListNative((ImVector<ImGuiWindowPtr>*)pwindows, pStr0);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeWindowsListByBeginStackParentNative(ImGuiWindow** windows, int windowsSize, ImGuiWindow* parentInBeginStack)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiWindow**, int, ImGuiWindow*, void>)funcTable[1467])(windows, windowsSize, parentInBeginStack);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, void>)funcTable[1467])((nint)windows, windowsSize, (nint)parentInBeginStack);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ImGuiWindowPtrPtr windows, int windowsSize, ImGuiWindowPtr parentInBeginStack)
		{
			DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, parentInBeginStack);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windowsSize, ImGuiWindowPtr parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, parentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ImGuiWindowPtrPtr windows, int windowsSize, ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
			{
				DebugNodeWindowsListByBeginStackParentNative(windows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeWindowsListByBeginStackParent(ref ImGuiWindow* windows, int windowsSize, ref ImGuiWindow parentInBeginStack)
		{
			fixed (ImGuiWindow** pwindows = &windows)
			{
				fixed (ImGuiWindow* pparentInBeginStack = &parentInBeginStack)
				{
					DebugNodeWindowsListByBeginStackParentNative((ImGuiWindow**)pwindows, windowsSize, (ImGuiWindow*)pparentInBeginStack);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodeViewportNative(ImGuiViewportP* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiViewportP*, void>)funcTable[1468])(viewport);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1468])((nint)viewport);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeViewport(ImGuiViewportPPtr viewport)
		{
			DebugNodeViewportNative(viewport);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodeViewport(ref ImGuiViewportP viewport)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugNodeViewportNative((ImGuiViewportP*)pviewport);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugNodePlatformMonitorNative(ImGuiPlatformMonitor* monitor, byte* label, int idx)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImGuiPlatformMonitor*, byte*, int, void>)funcTable[1469])(monitor, label, idx);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, int, void>)funcTable[1469])((nint)monitor, (nint)label, idx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ImGuiPlatformMonitorPtr monitor, byte* label, int idx)
		{
			DebugNodePlatformMonitorNative(monitor, label, idx);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ref ImGuiPlatformMonitor monitor, byte* label, int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, label, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ImGuiPlatformMonitorPtr monitor, ref byte label, int idx)
		{
			fixed (byte* plabel = &label)
			{
				DebugNodePlatformMonitorNative(monitor, (byte*)plabel, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ImGuiPlatformMonitorPtr monitor, ReadOnlySpan<byte> label, int idx)
		{
			fixed (byte* plabel = label)
			{
				DebugNodePlatformMonitorNative(monitor, (byte*)plabel, idx);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ImGuiPlatformMonitorPtr monitor, string label, int idx)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugNodePlatformMonitorNative(monitor, pStr0, idx);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ref ImGuiPlatformMonitor monitor, ref byte label, int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				fixed (byte* plabel = &label)
				{
					DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, (byte*)plabel, idx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ref ImGuiPlatformMonitor monitor, ReadOnlySpan<byte> label, int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				fixed (byte* plabel = label)
				{
					DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, (byte*)plabel, idx);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugNodePlatformMonitor(ref ImGuiPlatformMonitor monitor, string label, int idx)
		{
			fixed (ImGuiPlatformMonitor* pmonitor = &monitor)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (label != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(label);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				DebugNodePlatformMonitorNative((ImGuiPlatformMonitor*)pmonitor, pStr0, idx);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugRenderKeyboardPreviewNative(ImDrawList* drawList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, void>)funcTable[1470])(drawList);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1470])((nint)drawList);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderKeyboardPreview(ImDrawListPtr drawList)
		{
			DebugRenderKeyboardPreviewNative(drawList);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderKeyboardPreview(ref ImDrawList drawList)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderKeyboardPreviewNative((ImDrawList*)pdrawList);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugRenderViewportThumbnailNative(ImDrawList* drawList, ImGuiViewportP* viewport, ImRect bb)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImDrawList*, ImGuiViewportP*, ImRect, void>)funcTable[1471])(drawList, viewport, bb);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, ImRect, void>)funcTable[1471])((nint)drawList, (nint)viewport, bb);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ImDrawListPtr drawList, ImGuiViewportPPtr viewport, ImRect bb)
		{
			DebugRenderViewportThumbnailNative(drawList, viewport, bb);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ref ImDrawList drawList, ImGuiViewportPPtr viewport, ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, viewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ImDrawListPtr drawList, ref ImGuiViewportP viewport, ImRect bb)
		{
			fixed (ImGuiViewportP* pviewport = &viewport)
			{
				DebugRenderViewportThumbnailNative(drawList, (ImGuiViewportP*)pviewport, bb);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void DebugRenderViewportThumbnail(ref ImDrawList drawList, ref ImGuiViewportP viewport, ImRect bb)
		{
			fixed (ImDrawList* pdrawList = &drawList)
			{
				fixed (ImGuiViewportP* pviewport = &viewport)
				{
					DebugRenderViewportThumbnailNative((ImDrawList*)pdrawList, (ImGuiViewportP*)pviewport, bb);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontLoader* ImFontLoaderNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontLoader*>)funcTable[1472])();
			#else
			return (ImFontLoader*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1472])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontLoaderPtr ImFontLoader()
		{
			ImFontLoaderPtr ret = ImFontLoaderNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyNative(ImFontLoader* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontLoader*, void>)funcTable[1473])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1473])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Destroy(ImFontLoaderPtr self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Destroy(ref ImFontLoader self)
		{
			fixed (ImFontLoader* pself = &self)
			{
				DestroyNative((ImFontLoader*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontLoader* ImFontAtlasGetFontLoaderForStbTruetypeNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontLoader*>)funcTable[1474])();
			#else
			return (ImFontLoader*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1474])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontLoaderPtr ImFontAtlasGetFontLoaderForStbTruetype()
		{
			ImFontLoaderPtr ret = ImFontAtlasGetFontLoaderForStbTruetypeNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ImFontAtlasRectId_GetIndexNative(int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int>)funcTable[1475])(id);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int>)funcTable[1475])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImFontAtlasRectId_GetIndex(int id)
		{
			int ret = ImFontAtlasRectId_GetIndexNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint ImFontAtlasRectId_GetGenerationNative(int id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, uint>)funcTable[1476])(id);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<int, uint>)funcTable[1476])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static uint ImFontAtlasRectId_GetGeneration(int id)
		{
			uint ret = ImFontAtlasRectId_GetGenerationNative(id);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int ImFontAtlasRectId_MakeNative(int indexIdx, int genIdx)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, int, int>)funcTable[1477])(indexIdx, genIdx);
			#else
			return (int)((delegate* unmanaged[Cdecl]<int, int, int>)funcTable[1477])(indexIdx, genIdx);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static int ImFontAtlasRectId_Make(int indexIdx, int genIdx)
		{
			int ret = ImFontAtlasRectId_MakeNative(indexIdx, genIdx);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImFontAtlasBuilder* ImFontAtlasBuilderNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlasBuilder*>)funcTable[1478])();
			#else
			return (ImFontAtlasBuilder*)((delegate* unmanaged[Cdecl]<nint>)funcTable[1478])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImFontAtlasBuilderPtr ImFontAtlasBuilder()
		{
			ImFontAtlasBuilderPtr ret = ImFontAtlasBuilderNative();
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DestroyNative(ImFontAtlasBuilder* self)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlasBuilder*, void>)funcTable[1479])(self);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1479])((nint)self);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Destroy(ImFontAtlasBuilderPtr self)
		{
			DestroyNative(self);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void Destroy(ref ImFontAtlasBuilder self)
		{
			fixed (ImFontAtlasBuilder* pself = &self)
			{
				DestroyNative((ImFontAtlasBuilder*)pself);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildInitNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1480])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1480])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildInit(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildInitNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildInit(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildInitNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildDestroyNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1481])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1481])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildDestroy(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildDestroyNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildDestroy(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildDestroyNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildMainNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1482])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1482])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMain(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildMainNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildMain(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildMainNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildSetupFontLoaderNative(ImFontAtlas* atlas, ImFontLoader* fontLoader)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFontLoader*, void>)funcTable[1483])(atlas, fontLoader);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1483])((nint)atlas, (nint)fontLoader);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontLoader(ImFontAtlasPtr atlas, ImFontLoaderPtr fontLoader)
		{
			ImFontAtlasBuildSetupFontLoaderNative(atlas, fontLoader);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontLoader(ref ImFontAtlas atlas, ImFontLoaderPtr fontLoader)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildSetupFontLoaderNative((ImFontAtlas*)patlas, fontLoader);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontLoader(ImFontAtlasPtr atlas, ref ImFontLoader fontLoader)
		{
			fixed (ImFontLoader* pfontLoader = &fontLoader)
			{
				ImFontAtlasBuildSetupFontLoaderNative(atlas, (ImFontLoader*)pfontLoader);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontLoader(ref ImFontAtlas atlas, ref ImFontLoader fontLoader)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontLoader* pfontLoader = &fontLoader)
				{
					ImFontAtlasBuildSetupFontLoaderNative((ImFontAtlas*)patlas, (ImFontLoader*)pfontLoader);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildUpdatePointersNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1484])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1484])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildUpdatePointers(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildUpdatePointersNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildUpdatePointers(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildUpdatePointersNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildRenderBitmapFromStringNative(ImFontAtlas* atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, int, int, byte*, byte, void>)funcTable[1485])(atlas, x, y, w, h, inStr, inMarkerChar);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, int, int, nint, byte, void>)funcTable[1485])((nint)atlas, x, y, w, h, (nint)inStr, inMarkerChar);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar)
		{
			ImFontAtlasBuildRenderBitmapFromStringNative(atlas, x, y, w, h, inStr, inMarkerChar);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, byte* inStr, byte inMarkerChar)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildRenderBitmapFromStringNative((ImFontAtlas*)patlas, x, y, w, h, inStr, inMarkerChar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar)
		{
			fixed (byte* pinStr = &inStr)
			{
				ImFontAtlasBuildRenderBitmapFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, ReadOnlySpan<byte> inStr, byte inMarkerChar)
		{
			fixed (byte* pinStr = inStr)
			{
				ImFontAtlasBuildRenderBitmapFromStringNative(atlas, x, y, w, h, (byte*)pinStr, inMarkerChar);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ImFontAtlasPtr atlas, int x, int y, int w, int h, string inStr, byte inMarkerChar)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (inStr != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(inStr);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ImFontAtlasBuildRenderBitmapFromStringNative(atlas, x, y, w, h, pStr0, inMarkerChar);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, ref byte inStr, byte inMarkerChar)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = &inStr)
				{
					ImFontAtlasBuildRenderBitmapFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, ReadOnlySpan<byte> inStr, byte inMarkerChar)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (byte* pinStr = inStr)
				{
					ImFontAtlasBuildRenderBitmapFromStringNative((ImFontAtlas*)patlas, x, y, w, h, (byte*)pinStr, inMarkerChar);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildRenderBitmapFromString(ref ImFontAtlas atlas, int x, int y, int w, int h, string inStr, byte inMarkerChar)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				byte* pStr0 = null;
				int pStrSize0 = 0;
				if (inStr != null)
				{
					pStrSize0 = Utils.GetByteCountUTF8(inStr);
					if (pStrSize0 >= Utils.MaxStackallocSize)
					{
						pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
					}
					else
					{
						byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
						pStr0 = pStrStack0;
					}
					int pStrOffset0 = Utils.EncodeStringUTF8(inStr, pStr0, pStrSize0);
					pStr0[pStrOffset0] = 0;
				}
				ImFontAtlasBuildRenderBitmapFromStringNative((ImFontAtlas*)patlas, x, y, w, h, pStr0, inMarkerChar);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					Utils.Free(pStr0);
				}
			}
		}

		/// <summary>
		/// Clear output and custom rects<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildClearNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1486])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1486])((nint)atlas);
			#endif
		}

		/// <summary>
		/// Clear output and custom rects<br/>
		/// </summary>
		public static void ImFontAtlasBuildClear(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildClearNative(atlas);
		}

		/// <summary>
		/// Clear output and custom rects<br/>
		/// </summary>
		public static void ImFontAtlasBuildClear(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildClearNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ImTextureData* ImFontAtlasTextureAddNative(ImFontAtlas* atlas, int w, int h)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, ImTextureData*>)funcTable[1487])(atlas, w, h);
			#else
			return (ImTextureData*)((delegate* unmanaged[Cdecl]<nint, int, int, nint>)funcTable[1487])((nint)atlas, w, h);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImTextureDataPtr ImFontAtlasTextureAdd(ImFontAtlasPtr atlas, int w, int h)
		{
			ImTextureDataPtr ret = ImFontAtlasTextureAddNative(atlas, w, h);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImTextureDataPtr ImFontAtlasTextureAdd(ref ImFontAtlas atlas, int w, int h)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImTextureDataPtr ret = ImFontAtlasTextureAddNative((ImFontAtlas*)patlas, w, h);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureMakeSpaceNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1488])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1488])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureMakeSpace(ImFontAtlasPtr atlas)
		{
			ImFontAtlasTextureMakeSpaceNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureMakeSpace(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureMakeSpaceNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureRepackNative(ImFontAtlas* atlas, int w, int h)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, void>)funcTable[1489])(atlas, w, h);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)funcTable[1489])((nint)atlas, w, h);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureRepack(ImFontAtlasPtr atlas, int w, int h)
		{
			ImFontAtlasTextureRepackNative(atlas, w, h);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureRepack(ref ImFontAtlas atlas, int w, int h)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureRepackNative((ImFontAtlas*)patlas, w, h);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureGrowNative(ImFontAtlas* atlas, int oldW, int oldH)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, int, int, void>)funcTable[1490])(atlas, oldW, oldH);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, int, void>)funcTable[1490])((nint)atlas, oldW, oldH);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ImFontAtlasPtr atlas, int oldW, int oldH)
		{
			ImFontAtlasTextureGrowNative(atlas, oldW, oldH);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ImFontAtlasPtr atlas, int oldW)
		{
			ImFontAtlasTextureGrowNative(atlas, oldW, (int)(-1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ImFontAtlasPtr atlas)
		{
			ImFontAtlasTextureGrowNative(atlas, (int)(-1), (int)(-1));
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ref ImFontAtlas atlas, int oldW, int oldH)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureGrowNative((ImFontAtlas*)patlas, oldW, oldH);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ref ImFontAtlas atlas, int oldW)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureGrowNative((ImFontAtlas*)patlas, oldW, (int)(-1));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGrow(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureGrowNative((ImFontAtlas*)patlas, (int)(-1), (int)(-1));
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureCompactNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1491])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1491])((nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureCompact(ImFontAtlasPtr atlas)
		{
			ImFontAtlasTextureCompactNative(atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureCompact(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureCompactNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasTextureGetSizeEstimateNative(ImVec2I* pOut, ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImVec2I*, ImFontAtlas*, void>)funcTable[1492])(pOut, atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[1492])((nint)pOut, (nint)atlas);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec2I ImFontAtlasTextureGetSizeEstimate(ImFontAtlasPtr atlas)
		{
			ImVec2I ret;
			ImFontAtlasTextureGetSizeEstimateNative(&ret, atlas);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGetSizeEstimate(ImVec2IPtr pOut, ImFontAtlasPtr atlas)
		{
			ImFontAtlasTextureGetSizeEstimateNative(pOut, atlas);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGetSizeEstimate(ref ImVec2I pOut, ImFontAtlasPtr atlas)
		{
			fixed (ImVec2I* ppOut = &pOut)
			{
				ImFontAtlasTextureGetSizeEstimateNative((ImVec2I*)ppOut, atlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static ImVec2I ImFontAtlasTextureGetSizeEstimate(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImVec2I ret;
				ImFontAtlasTextureGetSizeEstimateNative(&ret, (ImFontAtlas*)patlas);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGetSizeEstimate(ImVec2IPtr pOut, ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasTextureGetSizeEstimateNative(pOut, (ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasTextureGetSizeEstimate(ref ImVec2I pOut, ref ImFontAtlas atlas)
		{
			fixed (ImVec2I* ppOut = &pOut)
			{
				fixed (ImFontAtlas* patlas = &atlas)
				{
					ImFontAtlasTextureGetSizeEstimateNative((ImVec2I*)ppOut, (ImFontAtlas*)patlas);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildSetupFontSpecialGlyphsNative(ImFontAtlas* atlas, ImFont* font, ImFontConfig* src)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, ImFont*, ImFontConfig*, void>)funcTable[1493])(atlas, font, src);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, void>)funcTable[1493])((nint)atlas, (nint)font, (nint)src);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ImFontAtlasPtr atlas, ImFontPtr font, ImFontConfigPtr src)
		{
			ImFontAtlasBuildSetupFontSpecialGlyphsNative(atlas, font, src);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ref ImFontAtlas atlas, ImFontPtr font, ImFontConfigPtr src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildSetupFontSpecialGlyphsNative((ImFontAtlas*)patlas, font, src);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ImFontAtlasPtr atlas, ref ImFont font, ImFontConfigPtr src)
		{
			fixed (ImFont* pfont = &font)
			{
				ImFontAtlasBuildSetupFontSpecialGlyphsNative(atlas, (ImFont*)pfont, src);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ref ImFontAtlas atlas, ref ImFont font, ImFontConfigPtr src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					ImFontAtlasBuildSetupFontSpecialGlyphsNative((ImFontAtlas*)patlas, (ImFont*)pfont, src);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ImFontAtlasPtr atlas, ImFontPtr font, ref ImFontConfig src)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontAtlasBuildSetupFontSpecialGlyphsNative(atlas, font, (ImFontConfig*)psrc);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ref ImFontAtlas atlas, ImFontPtr font, ref ImFontConfig src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasBuildSetupFontSpecialGlyphsNative((ImFontAtlas*)patlas, font, (ImFontConfig*)psrc);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ImFontAtlasPtr atlas, ref ImFont font, ref ImFontConfig src)
		{
			fixed (ImFont* pfont = &font)
			{
				fixed (ImFontConfig* psrc = &src)
				{
					ImFontAtlasBuildSetupFontSpecialGlyphsNative(atlas, (ImFont*)pfont, (ImFontConfig*)psrc);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildSetupFontSpecialGlyphs(ref ImFontAtlas atlas, ref ImFont font, ref ImFontConfig src)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				fixed (ImFont* pfont = &font)
				{
					fixed (ImFontConfig* psrc = &src)
					{
						ImFontAtlasBuildSetupFontSpecialGlyphsNative((ImFontAtlas*)patlas, (ImFont*)pfont, (ImFontConfig*)psrc);
					}
				}
			}
		}

		/// <summary>
		/// Legacy<br/>
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildLegacyPreloadAllGlyphRangesNative(ImFontAtlas* atlas)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontAtlas*, void>)funcTable[1494])(atlas);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1494])((nint)atlas);
			#endif
		}

		/// <summary>
		/// Legacy<br/>
		/// </summary>
		public static void ImFontAtlasBuildLegacyPreloadAllGlyphRanges(ImFontAtlasPtr atlas)
		{
			ImFontAtlasBuildLegacyPreloadAllGlyphRangesNative(atlas);
		}

		/// <summary>
		/// Legacy<br/>
		/// </summary>
		public static void ImFontAtlasBuildLegacyPreloadAllGlyphRanges(ref ImFontAtlas atlas)
		{
			fixed (ImFontAtlas* patlas = &atlas)
			{
				ImFontAtlasBuildLegacyPreloadAllGlyphRangesNative((ImFontAtlas*)patlas);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImFontAtlasBuildGetOversampleFactorsNative(ImFontConfig* src, ImFontBaked* baked, int* outOversampleH, int* outOversampleV)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ImFontConfig*, ImFontBaked*, int*, int*, void>)funcTable[1495])(src, baked, outOversampleH, outOversampleV);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, nint, nint, void>)funcTable[1495])((nint)src, (nint)baked, (nint)outOversampleH, (nint)outOversampleV);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ImFontBakedPtr baked, int* outOversampleH, int* outOversampleV)
		{
			ImFontAtlasBuildGetOversampleFactorsNative(src, baked, outOversampleH, outOversampleV);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ImFontBakedPtr baked, int* outOversampleH, int* outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, baked, outOversampleH, outOversampleV);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ref ImFontBaked baked, int* outOversampleH, int* outOversampleV)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				ImFontAtlasBuildGetOversampleFactorsNative(src, (ImFontBaked*)pbaked, outOversampleH, outOversampleV);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ref ImFontBaked baked, int* outOversampleH, int* outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, (ImFontBaked*)pbaked, outOversampleH, outOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ImFontBakedPtr baked, ref int outOversampleH, int* outOversampleV)
		{
			fixed (int* poutOversampleH = &outOversampleH)
			{
				ImFontAtlasBuildGetOversampleFactorsNative(src, baked, (int*)poutOversampleH, outOversampleV);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ImFontBakedPtr baked, ref int outOversampleH, int* outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (int* poutOversampleH = &outOversampleH)
				{
					ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, baked, (int*)poutOversampleH, outOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ref ImFontBaked baked, ref int outOversampleH, int* outOversampleV)
		{
			fixed (ImFontBaked* pbaked = &baked)
			{
				fixed (int* poutOversampleH = &outOversampleH)
				{
					ImFontAtlasBuildGetOversampleFactorsNative(src, (ImFontBaked*)pbaked, (int*)poutOversampleH, outOversampleV);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ref ImFontBaked baked, ref int outOversampleH, int* outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (ImFontBaked* pbaked = &baked)
				{
					fixed (int* poutOversampleH = &outOversampleH)
					{
						ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, (ImFontBaked*)pbaked, (int*)poutOversampleH, outOversampleV);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ImFontConfigPtr src, ImFontBakedPtr baked, int* outOversampleH, ref int outOversampleV)
		{
			fixed (int* poutOversampleV = &outOversampleV)
			{
				ImFontAtlasBuildGetOversampleFactorsNative(src, baked, outOversampleH, (int*)poutOversampleV);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		public static void ImFontAtlasBuildGetOversampleFactors(ref ImFontConfig src, ImFontBakedPtr baked, int* outOversampleH, ref int outOversampleV)
		{
			fixed (ImFontConfig* psrc = &src)
			{
				fixed (int* poutOversampleV = &outOversampleV)
				{
					ImFontAtlasBuildGetOversampleFactorsNative((ImFontConfig*)psrc, baked, outOversampleH, (int*)poutOversampleV);
				}
			}
		}
	}
}
